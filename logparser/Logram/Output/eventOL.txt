<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
Display ready! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
QSEECom_send_cmd return! 
qsc_decode end 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
updateClipping isOverlap:true 
ash->screen off 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onScreenTurnedOff() 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
fpc_cancel 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
cancelAutohide 
begin 
InactiveState<*> 
onEntryRemovedInternal:<*>|com.android.incallui|<*>|null|<*>, group=<*>|com.android.incallui|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
applyIconTint ignore 
AutoCleanReceiveServer:receive action:android.intent.action.SCREEN_ON 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
shouldBlockLocation ret:false 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
imeVis=false 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
transferRemoteInputFocus: <*> 
updateDimmedActivatedHideSensitive overlap:true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
OverscanTimeout run 
<*> <*> <*> <*> 
setColorTemperatureAccordingToSetting 
handleNotifyWakingUp 
qsc_send_cmd finish 
cancel alarm. 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
send: <*> 
notifyScreenTurnedOn 
ScreenState present 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
setColorTemperatureAccordingToSetting new. 
<*> <*> <*> <*> 
offsetBrightness=<*>.<*>,mOffsetBrightness_last26.<*>,lux=<*>.<*>,mPosBrightness=<*>.<*>,mIsUserChange=false,mDelta=<*>.<*>,defaultBrightness=<*>.<*>,mStartLuxDefaultBrightness=<*>.8mLastLuxDefaultBrightness=<*>.<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
handledataswitchchanged 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
gettimer:interval=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
AwareMem_DMEServer: stop 
<*> <*> <*> <*> <*> <*> 
onReceive, action:android.intent.action.SCREEN_OFF 
<*> <*> <*> <*> <*> <*> <*> <*> 
mActiveIface: null 
<*> <*> <*> 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
qsc_send_cmd finish 
begin 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
workerFunction STATE_CANCEL 
stopFilter m_filterIsStarted:false 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
begin 
begin 
disableGps:false isEnabled()=true 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
handle_exception_events enter 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ash->screen on 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
scheduleAlarmLocked(<*>, false) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
showNotificationAll 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
setLivenessSwitch:start 
qsc_decode end 
qsc_send_cmd finish 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
mIntentReceiver-ACTION_SCREEN_OFF 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
netmask =<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
sendMessage <*> 
onStartedWakingUp 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
StaEnabledState what=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
restoreBackgroundColor:new=<*>, old=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
BtChrStatisticsManager:sendScreenOnEvent enter. 
updateDimmedActivatedHideSensitive overlap:false 
sendMessage <*> 
<*> <*> <*> 
onAcquired(<*>) 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
VolumeDialogController.Callbacks onScreenOff 
InactiveState<*> 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
WindowOrientationListener disabled 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
onNotificationExpansionChanged called 
<*> <*> <*> <*> 
FingerprintService getEnrolledFingerprints 
QSEECom_send_cmd return! 
FingerprintDaemonProxyEx::onTransact, code:<*> 
workerFunction STATE_AUTHENTICATE 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
hw_set_colortemperature: end-- 
onError(<*>) 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateNotificationShade 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
<*> <*> <*> <*> <*> 
csr 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
bssid=<*>:<*>:bc:0b:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
bssid=<*>:<*>:bc:0a:f9:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
updateTint: tint=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
qsc_decode end 
C onScreenOff 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
removeNotificationChildren 
action:InCallScreenIsForegroundActivity, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> = <*> 
<*> <*> <*> <*> <*> 
notifyUiVisibilityChanged:vis=0xc0000600, SystemUiVisibility=0xc<*> 
<*> <*> <*> <*> <*> 
setExcludeFromRecents:pkgName=null 
send_cmd_kernel: cmd=<*> 
updateBarBgColor:emuiStyle=<*>,statusBarColor=#<*>,navigationBarColor=#<*>, isEmuiLight=-<*> 
restoreBackgroundColor:new=<*>, old=<*> 
<*> <*> <*> 
setScrollingEnabled: true 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
send: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
updateNotificationShade 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
begin 
QSEECom_send_cmd return! 
onStartedWakingUp 
<*> <*> <*> = <*> 
transferRemoteInputFocus: <*> 
updateNotificationShade 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
handledataswitchchanged 
<*> <*> = <*> <*> <*> <*> <*> <*> <*> <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
Finished business... 
<*> <*> <*> 
handleTimeUpdate 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
handleNotifyFinishedGoingToSleep 
begin 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
VolumeDialogController.Callbacks onScreenOff 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onScreenTurnedOff() 
handleNotifyWakingUp 
<*> <*> <*> <*> 
ClientMonitor destroy 
QSEECom_send_cmd return! 
begin 
stopFilter m_filterIsStarted:false 
<*> <*> <*> <*> <*> <*> <*> 
stopMonitoringMotionLocked() 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> 
WindowOrientationListener enabled 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
bssid=<*>:<*>:bc:0a:f2:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
bssid=<*>:<*>:bc:0b:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*>|MSG_RECORD_DATA_TO_FILE_DELAY datas.size()=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
DisplayPowerStatesetScreenState: state=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
onAcquired(<*>) 
isWiredHeadsetOn... 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
StaEnabledState what=<*> 
<*> <*> <*> <*> 
refreshBatteryInfo: null 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
handleNotifyScreenTurnedOff 
<*> <*> <*> 
<*> <*> <*> 
fpc_cancel 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
netmask =<*> 
mKeyguardDelegate.ShowListener.onDrawn. 
<*> <*> <*> <*> 
csr 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): <*> 
<*> - hexdump(len=<*>): <*> 
<*> - hexdump(len=<*>): <*> 
<*> - hexdump(len=<*>): <*> 
<*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> <*> <*> <*> 
bssid=<*>:<*>:bc:0a:fa:e0;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
bssid=<*>:<*>:bc:0b:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
bssid=<*>:<*>:bc:0b:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
bssid=<*>:<*>:bc:0a:fa:e1;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
bssid=<*>:<*>:bc:0b:2b:e0;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
updateNotificationShade 
<*> <*> <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> 
DisplayPowerState :OFF 
<*> <*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateTint: tint=<*> 
sendMessage <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
worker idle 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
workerFunction STATE_AUTHENTICATE 
<*> <*> <*> = <*> 
begin 
<*> <*> <*> <*> <*> 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
LM mrssi=-<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
qsc_decode end 
QSEECom_send_cmd return! 
<*> <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onReceive, action:android.intent.action.SCREEN_ON 
<*> <*> <*> <*> <*> 
handledataswitchchanged 
<*> <*> <*> <*> 
onScreenTurnedOn() 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
startAuthentication(com.android.systemui) 
mIntentReceiver begin 
pluggedStatus: <*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
handle_exception_events enter 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
handleDreamLocked 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Calling fingersense_on_resume() 
<*>|calculateAltitudeWithCache datas.size=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
onError <*> 
<*> <*> <*> <*> 
statusBarIconTint=#B3FFFFFF,navigationBarIconTint=#<*> 
<*> <*> <*> rebatching 
updateClipping isOverlap:true 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> <*> <*> <*> = <*> 
updateDisplayLocked: screenOn=false 
scheduleAlarmLocked(<*>, false) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Calling fingersense_on_pause() 
<*> <*> <*> <*> <*> 
begin 
qsc_send_cmd finish 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> 
bssid=<*>:<*>:bc:0b:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
bssid=<*>:<*>:bc:0b:<*>:e0;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
<*> <*> <*> <*> <*> <*> <*> 
bssid=<*>:<*>:bc:<*>:<*>:e0;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
bssid=<*>:<*>:bc:0a:f1:<*>;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
updateClipping isOverlap:true 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
create: <*> 
<*> <*> <*> 
<*> <*> <*> 
setColorTemperatureAccordingToSetting new. 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
imeVis=false 
<*> <*> <*> <*> <*> = <*> 
addNotification key=<*>|com.android.incallui|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> <*> = <*> 
QSEECom_send_cmd return! 
<*> <*> <*> <*> <*> <*> 
AwareMem_DMEServer: stop 
SleepPolicy:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
KGSvcCall onScreenTurningOn. 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
begin 
<*> <*> <*> <*> <*> <*> <*> <*> 
WindowOrientationListener enabled 
<*> <*> <*> <*> <*> <*> 
worker idle 
updateBarBgColor:emuiStyle=<*>,statusBarColor=#<*>,navigationBarColor=#<*>, isEmuiLight=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
onNotificationExpansionChanged called 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> 
imeVis=false 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
WindowOrientationListener disabled 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
qsc_decode end 
receive data len = <*> 
begin 
qsc_send_cmd finish 
receive data len = <*> 
SleepPolicy:<*> 
<*> <*> <*> <*> <*> <*> <*> 
C onScreenOff 
removeNotificationChildren 
generateAddAnimation:null, false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
cancelNotification,index:<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> <*> <*> <*> <*> <*> <*> <*> <*> 
flush,<*>,handle <*> 
updateSlider2 seekBarProgress:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
DisplayPowerStatesetScreenState: state=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> rebatching 
bssid=<*>:<*>:bc:0a:f9:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
bssid=<*>:<*>:bc:0b:<*>:e1;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
bssid=<*>:c5:8a:1a:4d:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
bssid=<*>:<*>:bc:0a:f2:<*>;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
bssid=<*>:<*>:bc:0a:f9:<*>;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
bssid=<*>:<*>:bc:0a:f9:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
onFinishedGoingToSleep(<*>) 
show_incallscreen <*> 
<*> <*> <*> 
onReceive, action:android.intent.action.SCREEN_OFF 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
receive data len = <*> 
Create obj success <*> <*> <*> 
generateAddAnimation:null, false 
simCount:<*> phoneState:<*> 
resumeSuspendedAutohide 
updateDimmedActivatedHideSensitive overlap:true 
collapsePanel<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
showNotificationAll 
isDisplayFeatureSupported feature:<*> 
hw_set_colortemperature: start++ 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
CtrlSocket restoreScrOnStatus 
setExcludeFromRecents:pkgName=null 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
write:userId=<*>,mPosBrightness =<*>.<*>,mOffsetBrightness_last=<*>.<*>,mIsUserChange=false,mDeltaNew=<*>.<*>,mStartLuxDefaultBrightness=<*>.76mLastLuxDefaultBrightness=<*>.<*>,mAmLux=<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
updateQsState:false 
Finished business... 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
[] 
<*> <*> <*> <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
KGSvcCall onFinishedGoingToSleep. 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> <*> 
mIntentReceiver-ACTION_SCREEN_OFF 
<*> <*> <*> <*> <*> 
receive data len = <*> 
<*> <*> <*> = <*> 
receive data len = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
receive data len = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
doTemperatueWarning, health:<*> 
cancelNotification,index:-<*> 
<*> <*> <*> 
fpc_cancel 
begin 
<*> <*> <*> <*> <*> <*> 
begin 
<*> <*> <*> <*> 
Unfinished business... 
<*> <*> <*> <*> <*> <*> <*> <*> 
cancel alarm. 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
csr 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
notifyScreenTurnedOn 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
bssid=<*>:<*>:bc:0a:f2:<*>;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
bssid=<*>:<*>:bc:0b:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
bssid=<*>:<*>:bc:0b:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
FingerprintDaemonProxyEx::onTransact, code:<*> 
FingerprintDaemonProxyEx::onTransact, code:<*> 
begin 
QSEECom_send_cmd return! 
receive data len = <*> 
<*> <*> <*> 
stopMonitoringMotionLocked() 
FingerprintDaemonProxyEx::onTransact, code:<*> 
worker idle 
begin 
<*> <*> <*> 
onNotificationExpansionChanged called 
onNotificationExpansionChanged called 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
updateTint: tint=<*> 
<*> <*> <*> <*> <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
KGSvcCall onStartedWakingUp. 
<*> <*> <*> <*> <*> <*> 
QSEECom_send_cmd return! 
mIntentReceiver begin 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
onEntryRemoved:<*>|com.android.incallui|<*>|null|<*> 
removeNotificationChildren 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
Create obj success <*> <*> <*> 
showNotificationAll 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> = <*> 
<*> <*> <*> <*> 
myUser=0currentUser=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> code(<*>) 
<*> <*> <*> <*> <*> <*> <*> 
update_calls: enter: 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
bssid=<*>:<*>:bc:0b:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
bssid=<*>:<*>:bc:0b:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
attemptAutoConnect: false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Create obj success <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
send_cmd_kernel: cmd=<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
VolumeDialogController.Callbacks onStateChanged 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> pid=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyUiVisibilityChanged:vis=0x40000500, SystemUiVisibility=0x<*> 
getOrInflateState subId:<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
stepAtomic 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
at android.database.sqlite.SQLiteConnectionPool.open(SQLiteConnectionPool.java:<*>) 
transitionTo:mode=<*>, isEmuiStyle=false 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
gettimer:interval=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateTint: tint=<*> 
removeNotificationChildren 
updateClipping isOverlap:false 
Create obj success <*> <*> <*> 
<*> <*> <*> 
networkAvailable=true 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> 
m1: false 
<*> = <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
<*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
updateSlider2 seekBarProgress:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*>|compensate received 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> <*> 
isSpeakerphoneOn... 
<*> <*> <*> <*> <*> 
AutoMode=true,Target=<*>,Current=<*>,amount=<*>.<*>,duration=<*>.<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
<*> <*> <*> <*> <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> <*> <*> <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*> 
IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
Beacon IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> 0d <*> <*> ... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> est=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> - hexdump(len=<*>): [REMOVED] 
bssid=<*>:<*>:bc:0a:f9:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
bssid=<*>:<*>:bc:0a:f1:<*>;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
<*> <*> <*> 
<*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
kWhatSetDataSource 
Create obj success use class android.app.HwCustNotificationImpl 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
transferRemoteInputFocus: <*> 
gettimer:interval=<*> 
<*> <*> <*> <*> <*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
removeNotificationChildren 
LM mrssi=-<*> 
<*> <*> <*> 
showNotificationAll 
showTraffic 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
showNotificationAll 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
state.clipTopAmount:<*>, i:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> outq=<*> send_len=<*> 
send_cmd_kernel: cmd=<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
gettimer:interval=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
setBackgroundAlpha:alpha=<*>.<*> 
onHeadsUpStateChanged:<*>|com.tencent.mm|<*>|null|<*> 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
state.clipTopAmount:<*>, i:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
csr 
<*> <*> <*> <*> <*> 
doCheckAccessInternet 
updateNotificationShade 
state.clipTopAmount:<*>, i:<*> 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
loadPic: <*> 
<*> <*> = <*> 
QSEECom_send_cmd return! 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper.-wrap4(KeyguardWallpaper.java) 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
KGSvcCall onFinishedGoingToSleep. 
<*> <*> = <*> 
<*> <*> <*> 
disableGps:false isEnabled()=true 
<*> <*> <*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
IEs - hexdump(len=<*>): <*> <*> <*> 6c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> 
bssid=<*>:<*>:bc:0a:f1:<*>;freq=<*>;level=<*>;flags=<*>;ssid=wlanaccessv2.<*>; 
<*> <*> <*> <*> outq=<*> send_len=<*> 
removeFreezeProcess pkg:com.android.browser 
<*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
expand: start 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
cancelAllNotificationsInt called 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
kWhatSetDataSource 
<*> <*> <*> 
updateNotificationShade 
<*> <*> <*> <*> = <*> 
hideTraffic 
onShowStatusChange show:false 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
getRemainingChance <*> 
<*> <*> <*> <*> 
<*> <*> <*> rebatching 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
hideKeyguard:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
hide 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
QSEECom_send_cmd return! 
qsc_decode end 
setBackgroundColor:new=<*>, old=<*> 
notifyUiVisibilityChanged:vis=0xc0000700, SystemUiVisibility=0xc<*> 
<*> <*> <*> <*> <*> <*> <*> pid=<*> 
action:android.intent.action.USER_PRESENT, mPermissionType:<*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> pid=<*> 
<*> <*> <*> <*> 
onStartedWakingUp() 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
qsc_decode end 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
<*> <*> <*> 
IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
<*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
bssid=<*>:<*>:bc:0b:2b:e1;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
<*> <*> <*> <*> <*> <*> <*> 
QSEECom_send_cmd return! 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
sendEvent:action=<*>, flag=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
Launcher onStart() 
<*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> 
qsc_send_cmd finish 
<*> <*> <*> = <*> 
qsc_send_cmd finish 
qsc_send_cmd finish 
updateSlider1 seekBarProgress:<*> 
<*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mIntentReceiver-ACTION_SCREEN_OFF 
<*> <*> <*> 
onReceive:screen off 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> = <*> <*> <*> <*> = <*> 
collapseAllGroups: 
updateQsState:false 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
setBackgroundColor:new=<*>, old=<*> 
<*> <*> <*> 
setBackgroundColor:new=<*>, old=<*> 
<*> <*> <*> <*> <*> <*> <*> 
MagicLink2-BroadcastReceiver:====>ACTION_SCREEN_OFF 
<*> <*> <*> <*> = <*> 
<*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> 
<*> <*> <*> = <*> 
getSentSize id=<*> 
<*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> = <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
[ReceiverDispatcher-<*>]ctrlSocket success(android/null:<*>) 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
isBetaStrategy 
received cell-signal:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
key:imsi value:<*> 
<*> <*> <*> <*> <*> 
nspContentRange0-<*>/<*> 
value: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
Enter QmiChr_GetProtocolInfo 
<*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*> <*> = <*> <*> = <*> <*> = <*> 
<*> = <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> = <*>, <*> = <*>, <*> = <*> 
<*> <*> <*> = <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
updateVolte::volteState=UNREGISTERED 
<*> <*> <*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> = <*> <*> = <*> <*> <*> <*> 
<*> <*> = <*> 
<*> <*> <*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTypeIcon type:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
applyIconTint ignore 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> pid=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
acquire <*> <*> <*> <*> <*> uid=<*>, pid=<*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
netmask =<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
send_cmd_kernel: cmd=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
chinaDateTime:晚上<*>:<*> 
<*> = <*> <*> 
checkPackageLogState 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
acquire <*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
flushQueueInfo enter. 
<*> <*> <*> <*> <*> 
hw_set_colortemperature: start++ 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
qsc_decode end 
onAcquired(<*>) 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onScreenTurnedOn() 
acquire <*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> = <*> 
<*> <*> <*> 
showNotificationAll 
onShowStatusChange show:false 
onNotificationExpansionChanged called 
receive data len = <*> 
FpPerformance FpUtils.fingerTurnOnScreen():true 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
loadMagazine 
<*> <*> <*> <*> <*> <*> <*> 
Launcher doResumeWork() 
<*> <*> <*> = <*> <*> = <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> rebatching 
<*> <*> <*> <*> <*> <*> rebatching 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> <*> 
begin 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
wlan0: Control <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[ReceiverUtils.reportVersionInfo] 
<*> <*> <*> <*> <*> <*> <*> <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
<*> <*> <*> <*> <*> = <*> 
begin 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
setRequest ProviderRequest[OFF] 
<*> <*> <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
收到子线程消息 
action:com.huawei.betaclub.UPLOAD_PROGRESS, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
CallObjectMethod end 
<*> <*> <*> <*> 
playingUids: 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
------------startInput-------------- 
action:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
search 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|getTodayTotalSteps <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider2 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> uid=<*>, pid=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
send_cmd_kernel: cmd=<*> 
<*> <*> <*> <*> outq=<*> send_len=<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
<*> <*> <*> 
<*> <*> <*> 
fingersense_touch_up() finished 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> outq=<*> send_len=<*> 
<*> <*> <*> <*> 
restoreBackgroundColor:new=<*>, old=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
updateBarBgColor 
gettimer:interval=<*> 
<*> <*> <*> <*> 
<*>|compensate received 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
updateDimmedActivatedHideSensitive overlap:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider1 seekBarProgress:<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
send_cmd_kernel: cmd=<*> 
during_ms:<*>,period_ms:<*> 
<*> <*> <*> <*> <*> <*> 
cancelAutohide 
<*> <*> <*> <*> 
action:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> 
acquire <*> <*> <*> <*> <*> uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
m1: false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
<*> <*> <*> 
<*> <*> = <*> 
### mPktChkBadCnt=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
updateDimmedActivatedHideSensitive overlap:false 
Calling fingersense_classify_touch() 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
received cell-signal:<*> 
<*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
fingersense_touch_up() finished 
<*> <*> = <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> <*> <*> <*> 
total/<*>/<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> suspend blocker "PowerManagerService.WakeLocks". 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
bssid=<*>:<*>:bc:<*>:<*>:c1;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
<*> <*> <*> <*> = <*>, <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*> <*> <*>, <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|compensate received 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
<*> = <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
loss[<*>]=<*>%, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
loss[<*>]=<*>.<*>%, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
loss[<*>]=<*>%, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> bytes <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> 
suspendAutohide 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Calling fingersense_classify_touch() 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> 0f <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
chinaDateTime:晚上<*>:<*> 
wlan0: Control <*> <*> <*> <*> <*> 
bssid=<*>:<*>:bc:0b:<*>:a1;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
bssid=<*>:<*>:bc:0a:f9:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
bssid=<*>:<*>:bc:0b:<*>:e1;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
fingersense_classify_touch() finished 
sendEvent:action=<*>, flag=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*>, <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
Split <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
updateBarBgColor:emuiStyle=<*>,statusBarColor=#FFFCFCFC,navigationBarColor=#<*>, isEmuiLight=-<*> 
<*> <*> <*> <*> <*> <*> <*> 
action:com.baidu.input.entry.launcer, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> } 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
<*> suspend blocker "PowerManagerService.WakeLocks". 
authenticate(sid=<*>, gid=<*>) 
onAcquired <*> 
at com.huawei.keyguard.util.BitmapUtils.getColorInfo(BitmapUtils.java:<*>) 
at com.huawei.keyguard.support.magazine.MagazineWallpaper$<*>.onMagazinePicLoaded(MagazineWallpaper.java:<*>) 
onScreenTurnedOff() 
Animating brightness: target=<*>, rate=<*> 
onFinishedGoingToSleep(<*>) 
Split <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
onReceive, action:android.intent.action.SCREEN_OFF 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
removeNotificationChildren 
showNotificationAll 
updateQsState:false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
notifyUiVisibilityChanged:vis=0x8608, SystemUiVisibility=0x<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
onScreenTurningOn 
<*> <*> <*> : <*> 
addSensor,mHandles:{<*>=<*>} 
handle_exception_events enter 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
notifyUiVisibilityChanged:vis=0x8308, SystemUiVisibility=0x<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onScreenTurnedOn 
during_ms:<*>,period_ms:<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> = <*>, <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
generateAddAnimation:null, false 
m1: false 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> <*> 
enableDefaultTypeAPN= true 
MagicLink2-BroadcastReceiver:====>NETWORK_STATE_CHANGED_ACTION 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
P2P: cli_channels: 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
Split <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
RCV <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
[RouteService.onStartCommand] 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
AdBlockService:onReceive action=android.net.conn.CONNECTIVITY_CHANGE 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
random pool - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
Split <*> <*> <*> <*> 
onReceive, action:android.net.wifi.STATE_CHANGE 
<*> <*> <*> 
packageInstalled true! 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
<*>|onStandStepChanged <*> 
addFreezeProcess pkg:com.huawei.espacev<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*>|rebuild notification 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
<*> : <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
removeNotificationChildren 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
<*> <*> <*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
random pool - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
wlan0: Control <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
wlan0: Control <*> <*> <*> <*> <*> 
<*> = <*> 
wpas_start_assoc_cb, <*> 
<*> <*> <*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> = <*> 
* freq_hint=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*>|rebuild notification 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
isWiredHeadsetOn... 
<*>|compensate received 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateTint: tint=<*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
wlan0: Control <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
wlan0: Control interface command <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
handle_exception_events enter 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> <*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
Split <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
<*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
action:android.net.wifi.STATE_CHANGE, mPermissionType:<*> 
StartupResidentService:InnerHandler Message:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|compensate received 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
wlan0: Control interface command <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
wlan0: Control interface command <*> <*> <*> 
send: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
wpas_start_assoc_cb, <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
eap_proxy: eap_proxy_notify_config 
eap_proxy: eap_proxy_allowed_method 
wlan0: Control interface command <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
formatChinaDateTime equals. 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
wlan0: Control interface command <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
wlan0: Control interface command <*> <*> 
wlan0: Control interface command <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
wlan0: Control interface command <*> <*> <*> 
wlan0: Control interface command <*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
wlan0: Control interface command <*> <*> <*> 
<*> <*> <*> <*> 
wlan0: Control interface command <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
* bssid_hint=<*>:<*>:bc:0b:2d:<*> 
eap_proxy: eap_proxy_allowed_method 
<*> <*> <*> <*> <*> <*> <*> 
action:android.net.wifi.STATE_CHANGE, mPermissionType:<*> 
receive:android.net.wifi.STATE_CHANGE 
onReceive, action:android.net.wifi.STATE_CHANGE 
RCV <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
random pool - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
operator:<*> 
<*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> bytes <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
refreshBatteryInfo: null 
<*> <*> <*> <*> = <*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
RCV <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
action:android.net.wifi.supplicant.STATE_CHANGE, mPermissionType:<*> 
RCV <*> <*> <*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
RCV <*> <*> <*> <*> <*> <*> 
mIntentReceiver begin 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> 
onReceive, action:android.net.wifi.STATE_CHANGE 
InactiveState<*> 
<*> <*> <*> <*> <*> <*> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
eap_proxy: eap_proxy_notify_config 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
wlan0: Control interface command <*> <*> 
onReceive, action:android.net.wifi.STATE_CHANGE 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
clearTetheredNotification 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
wlan0: Control interface command <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
CTRL_IFACE: <*> <*> <*> 
CTRL_IFACE: <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
CTRL_IFACE: <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> 0f <*> <*> <*> <*> <*> 0f <*> <*> <*> <*> <*> 0f <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
WifiStateManager:isWifiDisconnected: disconnect 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> 
IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> <*> 
bssid=<*>:<*>:bc:0b:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
CTRL_IFACE: <*> <*> <*> 
CTRL_IFACE: <*> <*> <*> 
wlan0: Control interface command <*> <*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
wlan0: Control interface command <*> <*> 
wlan0: Control interface command <*> <*> 
wlan0: Control interface command <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
wlan0: Control interface command <*> <*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
wlan0: Control interface command <*> <*> <*> 
wlan0: Control interface command <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> = <*> 
<*> <*> <*> 
wpas_start_assoc_cb, <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> <*> <*> 
* akm=0xfac<*> 
<*> = <*> 
<*> <*> = <*> 
RCV <- {<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> bytes <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> - hexdump(len=<*>): <*> <*> <*> 0f <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
Dispatching event <*> <*> <*> 
notifyInterfaceLinkStateChanged <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
NetworkAgent connected 
<*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> <*> 
receive:android.net.wifi.STATE_CHANGE 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
onReceive, action:android.net.wifi.STATE_CHANGE 
<*> <*> <*> <*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
mIntentReceiver begin 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
MagicLink2-BroadcastReceiver:====>NETWORK_STATE_CHANGED_ACTION 
<*> <*> <*> <*> 
<*> changed bounds; rebatching 
enableDefaultTypeAPN= false 
<*> <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
RTT[<*>]=<*>, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
triggerUpdateAPInfo 
<*> <*> <*> 
<*> <*> <*> 
RCV <- {<*> <*> <*> 
RTM_NEWROUTE Indication 
<*> <*> = <*>, <*> <*> <*> 
notifyInterfaceClassActivity: <*> <*> <*> 
<*> <*> <*> <*> 
acquire <*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> 
<*> = <*> <*> 
<*> = <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
ACTION_NETWORK_CONDITIONS_MEASURED 
Enter InternetReadyState 
wlan0: Control interface command <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> = <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> = <*> <*> <*> 
myPid: <*> 
packageInstalled true! 
<*> <*> <*> <*> <*> <*> 
ActivityThread,attachApplication 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[main-<*>]HwOUCSearchIndexablesProvider onCreate(/HwOUCSearchIndexablesProvider.java:<*>) 
[main-<*>]enter detectStorage!!!(/HwOucUtility.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[main-<*>]isInstallingStatus(/HwOucUtility.java:<*>) 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
action:com.tencent.mm.ACTION.note_tracemsg_lock, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
<*> <*> <*> 
setAlarmsPending ... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
gettimer:interval=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
during_ms:<*>,period_ms:<*> 
<*> caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*> = <*> 
RCV <- {<*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
begin 
<*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
EAPOL: getSuppRsp 
EAPOL: txSuppRsp 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
EAPOL: txSuppRsp 
loss[<*>]=<*>%, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> - hexdump(len=<*>): [REMOVED] 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
dont updateTargetBssid 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
WifiMonitor:wlan0 <*> <*> <*> <*> <*> <*> <*> 
loss[<*>]=<*>%, volume=<*> 
<*> <*> <*> <*> changed bounds; rebatching 
<*> <*> <*> = <*>, <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
Beacon IEs - hexdump(len=<*>): <*> 0f <*> <*> <*> <*> <*> <*> 2d <*> 6d <*> 6c 6f <*> <*> <*> <*> <*> <*> <*> 0b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
RTT[<*>]=<*>, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
RTT[<*>]=<*>, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
EAPOL: getSuppRsp 
EAPOL: txSuppRsp 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0b <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> <*> <*> 
total/<*>/<*>,android.uid.system:<*>/<*>/<*> 
<*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> 
handleNetworkDisconnect,resetWifiProManualConnect 
<*> <*> <*> <*> <*> <*> <*> 
DisconnectedState enter 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> does not <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
reSetWifiInternetState 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> type <*> <*> <*> is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> = false, <*> = false, <*> = false, <*> <*> <*> <*> = false, <*> = false, <*> <*> <*> 
notifyInterfaceClassActivity: <*> <*> <*> 
<*> <*> <*> type <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[ConnectivityChangeReceiver.onReceive]Start! 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*>, <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
upstreamIfaceTypes.add:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
showNotificationAll 
Create obj success use class <*> 
<*> <*> <*> <*> <*> <*> 
onShowStatusChange show:false 
HiWiService stopself 
<*> <*> <*> = <*> 
<*> <*> <*> type <*> <*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|getTodayTotalSteps <*> 
<*>|rebuild notification 
updateDimmedActivatedHideSensitive overlap:false 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> 
bssid=<*>:<*>:bc:0b:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
bssid=<*>:<*>:<*>:1f:f0:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Huawei-Employee; 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> does not <*> <*> <*> 
<*> <*> <*> 
handle_exception_events enter 
send: <*> 
<*> = <*> <*> 
<*> = <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*>|compensate received 
<*>|compensate received 
<*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
onShowStatusChange show:false 
<*> <*> <*> 
updateClipping isOverlap:false 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
onStepCounterChange stepsNum:<*> 
updateNotificationShade 
<*> <*> <*> <*> = <*> 
<*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onShowStatusChange show:false 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*>|compensate received 
<*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> <*> 
updateNotificationShade 
updateClipping isOverlap:false 
updateTint: tint=<*> 
<*>|getTodayTotalSteps <*> 
transferRemoteInputFocus: <*> 
updateNotificationShade 
transferRemoteInputFocus: <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> 
BSS: last_scan_res_used=<*>/<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
Dispatching event <*> <*> <*> 
getTempInfo error: null, <*> 
wlan0: Control interface command <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
wlan0: Control interface command <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
updateNotificationShade 
hideTraffic 
<*> : <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
sendMessage <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
msg = <*> received 
<*>|onStandStepChanged <*> 
onShowStatusChange show:false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> flags: <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> 
updateTint: tint=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> type <*> <*> <*> <*> <*> <*> <*> 
isMusicActive... 
<*> <*> <*> <*> 
received cell-signal:<*> 
<*> <*> <*> 
wlan0: Control interface command <*> <*> 
<*> <*> <*> = <*> <*> = <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
wifiSleepPolicy:<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
updateClipping isOverlap:false 
shouldBlockLocation ret:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
begin 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
setLift <*>.<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
StartupResidentService:InnerHandler Message:<*> 
fingersense_touch_up() finished 
<*> <*> <*> <*> 
Calling fingersense_classify_touch() 
onStepCounterChange stepsNum:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> 
onStepCounterChange stepsNum:<*> 
removeNotificationChildren 
onShowStatusChange show:false 
updateNotificationShade 
<*> <*> <*> <*> <*> 
updateNotificationShade 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
<*>|onStandStepChanged <*> 
updateTint: tint=<*> 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> <*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
sendMessage <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
onStepCounterChange stepsNum:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> = <*> 
formatChinaDateTime equals. 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> 
msg = <*> received 
<*> <*> <*> 
setColorTemperatureAccordingToSetting 
setColorTemperature:<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> = <*>, <*> <*> 
m1: false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
qsc_decode end 
<*> <*> <*> <*> <*> 
begin 
receive data len = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> 
<*> type <*> <*> <*> is <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
DynamicUpdater registerReceiver 
<*> <*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
qsc_send_cmd finish 
notifyStartedWakingUp 
Create obj success use class android.app.HwCustNotificationImpl 
removeNotificationChildren 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
[StartupguideUtils.isBeta]is beta=false 
transferRemoteInputFocus: <*> 
transferRemoteInputFocus: <*> 
onShowStatusChange show:false 
<*> <*> : <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
<*> <*> <*> <*> <*> 
MemoryRecoveryDMEPlugin: interrupt 
handle_exception_events enter 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
BtChrStatisticsManager:sendScreenOnEvent enter. 
updateNotificationShade 
<*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> suspend blocker <*> 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
workerFunction STATE_NAVIGATION 
Dispatching event to interface: wlan<*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
bssid=bc:d1:<*>:2e:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=MERCURY_<*>; 
<*> attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
<*> <*> <*> <*> <*> 
bssid=bc:d1:<*>:2e:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=MERCURY_<*>; 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
<*> ordered <*> <*> <*> <*> prev had <*> 
<*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ActivityThread,attachApplication 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
Add randomness: count=<*> entropy=<*> 
random pool - hexdump(len=<*>): [REMOVED] 
Add randomness: count=<*> entropy=<*> 
wlan0: Control interface command <*> <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> flags: <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
state.clipTopAmount:<*>, i:<*> 
state.clipTopAmount:<*>, i:<*> 
suspendAutohide 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
NetworkSelectionStatus NETWORK_SELECTION_ENABLED 
triggeredJoin: <*> 
<*> <*> <*> rt=<*>/<*> <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> = <*> 
<*> <*> <*> 
<*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
bss->freq (<*>) 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> 
disconnected, trafficStats: 
<*> <*> <*> <*> 
action:wifi_scan_available, mPermissionType:<*> 
<*> : <*> 
set(null) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver <*> <*> <*> <*> <*> <*> 
at com.android.systemui.qs.tiles.WifiTile.handleUpdateState(WifiTile.java:<*>) 
<*> <*> <*> <*> 
action:android.net.wifi.WIFI_STATE_CHANGED, mPermissionType:<*> 
<*> <*> <*> not in <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> does not <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> flags: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> step_<*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> <*> 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
mActiveIface: null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> not in <*> <*> 
AutoStartupDataMgr:isUnderControll third party not in <*> <*> 
<*> type <*> <*> <*> is <*> 
AutoStartupDataMgr:isUnderControll third party not in <*> <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> <*> <*> is <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
PreferenceHelper:lastAlarmTime: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
AdBlockService:onReceive action=android.net.conn.CONNECTIVITY_CHANGE 
<*> <*> <*> <*> <*> <*> <*> 
[ReceiverUtils.resumeLogUpload] 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> flags: <*> 
<*> <*> <*> 
isCurrentBySim()=false 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
[ReceiverUtils.launchCheckVersionService] 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
setProgress: <*> 
<*> <*> <*> 
action =android.net.conn.CONNECTIVITY_CHANGE 
state.clipTopAmount:<*>, i:<*> 
<*> <*> <*> <*> <*> <*> 
setScrollingEnabled: true 
collapsePanel<*> 
<*> <*> <*> <*> <*> 
obtain, mHwFlags=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
Create obj success use class <*> 
cryptfs cryptocomplete 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
cancelAllNotificationsInt called 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> = <*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*>|getTodayTotalSteps <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> <*> SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
transferRemoteInputFocus: <*> 
isCurrentBySim()=false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> 
cancelNotification,index:-<*> 
<*> <*> <*> <*> <*> <*> <*> 
updateRotationUnchecked(alwaysSendConfiguration=false) 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
<*> : <*> <*> <*> <*> 
querySoundEffectsEnabled... 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
onStepCounterChange stepsNum:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
[getprop, ro.product.cpu.abi] 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> <*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
updateTint: tint=<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> 
showNotificationAll 
<*> <*> <*> <*> <*> = <*> 
updateSlider2 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
updateSlider1 seekBarProgress:<*> 
at android.database.sqlite.SQLiteConnectionPool.open(SQLiteConnectionPool.java:<*>) 
BaiduLocation:locType: <*> 
<*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
showNotificationAll 
showNotificationAll 
onStepCounterChange stepsNum:<*> 
<*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
isCurrentBySim()=false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> step_<*> 
<*> <*> <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateDimmedActivatedHideSensitive overlap:false 
csr 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.tencent.mm,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotificationShade 
<*> <*> <*> 
<*> <*> <*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
action:null, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
addNotification key=<*>|com.tencent.mm|<*>|null|<*> 
<*> <*> <*> <*> 
showNotificationAll 
transferRemoteInputFocus: <*> 
<*> <*> <*> step_<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> : <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
transferRemoteInputFocus: <*> 
updateClipping isOverlap:true 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
removeNotificationChildren 
<*> <*> <*> <*> <*> <*> 
<*>|compensate received 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> 
isBluetoothScoOn... 
<*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
updateClipping isOverlap:true 
<*> <*> <*> step_<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotificationShade 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
isCurrentBySim()=false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
updateNotificationShade 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*>|rebuild notification 
updateTint: tint=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> <*> = <*>, <*> = <*> 
notifyInterfaceClassActivity: client is <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
updateSlider1 seekBarProgress:<*> 
updateSlider1 seekBarProgress:<*> 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> step_<*> 
Client requesting input be hidden, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|getTodayTotalSteps <*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
updateRotationUnchecked(alwaysSendConfiguration=false) 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
removeNotificationChildren 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> <*> 
getSeekBarProgress isAutoMode:true <*> <*> <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
updateTint: tint=<*> 
updateNotificationShade 
bright trace:<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
transferRemoteInputFocus: <*> 
interpolate:mPosBrightness=<*>.0lux=<*>.<*>,mIsReboot=true,mIsUserChange=false,mDelta=<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> is <*> 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
Client requesting input be hidden, pid=<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
Split enqueueing broadcast <*> <*> 
updateSlider2 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider1 seekBarProgress:<*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
<*>|onStandStepChanged <*> 
onStepCounterChange stepsNum:<*> 
<*>|getTodayTotalSteps <*> 
updateNotificationShade 
isCurrentBySim()=false 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
updateNotificationShade 
isCurrentBySim()=false 
<*>|onStandStepChanged <*> 
<*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
<*> compensate: cache step_<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
<*>|getTodayTotalSteps <*> 
transferRemoteInputFocus: <*> 
Calling fingersense_touch_up() 
<*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
Client requesting input be hidden, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
transferRemoteInputFocus: <*> 
Client requesting input be hidden, pid=<*> 
<*> <*> <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
at android.os.Looper.loop(Looper.java:<*>) 
<*>|after compensate: cache step_<*> 
<*>|after compensate: cache step_<*> 
notifyInterfaceClassActivity: client is <*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> is <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> compensate: cache step_<*> 
<*>|rebuild notification 
<*> <*> <*> 
transferRemoteInputFocus: <*> 
<*>|compensate received 
<*>|getTodayTotalSteps <*> 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
<*>|getTodayTotalSteps <*> 
updateNotificationShade 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
<*>|rebuild notification 
<*> <*> <*> <*> <*> <*> <*> <*> 
Client requesting input be hidden, pid=<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
<*> suspend blocker "PowerManagerService.WakeLocks". 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Client requesting input be hidden, pid=<*> 
<*> <*> <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider2 seekBarProgress:<*> 
<*> <*> <*> <*> 
<*>|rebuild notification 
transferRemoteInputFocus: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*>|onStandStepChanged <*> 
updateTint: tint=<*> 
Client requesting input be hidden, pid=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
updateTint: tint=<*> 
transferRemoteInputFocus: <*> 
AutoMode=true,Target=<*>,Current=<*>,amount=<*>.<*>,duration=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> = <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> compensate: cache step_<*> 
removeNotificationChildren 
<*>|compensate received 
Create obj success use class android.app.HwCustNotificationImpl 
getTempInfo error: null, <*> 
handle_exception_events enter 
mSendService start 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
obtain, mHwFlags=<*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
resumeSuspendedAutohide 
obtain, mHwFlags=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
<*> <*> <*> 
showNotificationAll 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> 
fingersense_classify_touch() finished 
acquire lock=<*>, flags=0x1, <*> <*> <*> uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
action:com.huawei.android.action.WEATHER_CHANGE, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> flags: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> } 
<*>|onStandStepChanged <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
transferRemoteInputFocus: <*> 
<*> <*> <*> 
<*> compensate: cache step_<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
removeNotificationChildren 
<*> <*> <*> <*> <*> <*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateRotationUnchecked(alwaysSendConfiguration=false) 
processEventsLocked code=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
send data return = <*> 
KGSvcFp onAuthenticationAcquired.<*> 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper.updateWallpaper(KeyguardWallpaper.java:<*>) 
at android.os.Handler.handleCallback(Handler.java:<*>) 
DisplayPowerStatesetColorFadeLevel: level=<*>.0967255E-<*> 
<*> <*> <*> <*> <*> 
onScreenTurnedOff() 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
<*> <*> <*> <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> 
onFinishedGoingToSleep(<*>) 
AutoCleanReceiveServer:receive action:android.intent.action.SCREEN_OFF 
<*> <*> <*> = <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
show 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
generateAddAnimation:null, false 
<*> <*> <*> <*> <*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*>|MSG_RECORD_DATA_TO_FILE 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> 
<*>|before compensate: cache step_<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|before compensate: cache step_<*> 
<*>|REPORT : <*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
notifyInterfaceClassActivity: client is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
disableEffects=null canInterrupt=false once update: false 
<*> <*> user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
sendMessage <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*>|before compensate: cache step_<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> 
<*> <*> <*> 
<*>|onStandStepChanged <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateTint: tint=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
removeNotificationChildren 
updateClipping isOverlap:false 
at android.os.Looper.loop(Looper.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
removeNotificationChildren 
MSG_QUERY_TCP_INFO called,count:<*> 
Split enqueueing broadcast <*> <*> 
<*> <*> not in <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
m1: false 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> (has extras) } <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> 
<*> <*> <*> 
[SocketRead_<*>:<*>:<*>-<*>]conetEntity.channelType:ChannelType_Secure(android/null:<*>) 
<*> <*> <*> <*> <*> <*> 
onShowStatusChange show:false 
updateTint: tint=<*> 
<*>|getTodayTotalSteps <*> 
removeNotificationChildren 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
onStepCounterChange stepsNum:<*> 
disableEffects=null canInterrupt=false once update: false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*>|onStandStepChanged <*> 
<*>|rebuild notification 
<*> <*> <*> <*> <*> 
Action: BatChange 
cancelNotification,index:-<*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
at java.io.FileInputStream.open(Native Method) 
notifyInterfaceClassActivity: client is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
updateTint: tint=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*>|calculateCaloriesWithCache totalCalories=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> changed bounds; rebatching 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|onStandStepChanged <*> 
<*>|before compensate: cache step_<*> 
removeNotificationChildren 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*> <*> <*> = <*> 
isDisplayFeatureSupported feature:<*> 
hw_get_smart_display_supported: end-- 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
write:userId=<*>,mPosBrightness =<*>.<*>,mOffsetBrightness_last=<*>.<*>,mIsUserChange=false,mDeltaNew=<*>.<*>,mStartLuxDefaultBrightness=<*>.038124mLastLuxDefaultBrightness=<*>.<*>,mAmLux=<*>.<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
begin 
Fingerprint timeout 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> flags: <*> 
QSEECom_send_cmd return! 
QSEECom_send_cmd return! 
qsc_send_cmd finish 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
Launcher dynamicIconsRegister 
<*> <*> <*> <*> flags: <*> 
onNotificationVisibilityChanged called 
<*> <*> <*> 
instantCollapse 
<*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
updateDimmedActivatedHideSensitive overlap:false 
updateClipping isOverlap:false 
isCurrentBySim()=false 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
DefaultState MSG_SCREEN_ON 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
isCurrentBySim()=false 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ash->screen on 
receive data len = <*> 
<*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
MagicLink2-BroadcastReceiver:====>ACTION_SCREEN_ON 
<*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
shouldBlockLocation ret:false 
[IssueCreationService.startSocketServerThread] 
qsc_decode end 
action:com.huawei.betaclub.UPLOAD_PROGRESS, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> 
QSEECom_send_cmd return! 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
<*> not in <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> = <*> 
<*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
onHeadsUpStateChanged:<*>|com.tencent.mm|<*>|null|<*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> <*> 
receive data len = <*> 
qsc_send_cmd finish 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
begin 
qsc_decode end 
qsc_decode end 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
begin 
qsc_send_cmd finish 
qsc_decode end 
qsc_decode end 
receive data len = <*> 
transferRemoteInputFocus: <*> 
state.clipTopAmount:<*>, i:<*> 
updateTint: tint=<*> 
begin 
QSEECom_send_cmd return! 
qsc_decode end 
send data return = <*> 
qsc_decode end 
qsc_send_cmd finish 
begin 
receive data len = <*> 
send data return = <*> 
begin 
send data return = <*> 
qsc_decode end 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
<*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:true 
updateSlider2 seekBarProgress:<*> 
updateSlider1 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
updateNotificationShade 
removeNotificationChildren 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> 
updateTint: tint=<*> 
action:null, mPermissionType:<*> 
state.clipTopAmount:<*>, i:<*> 
removeNotificationChildren 
transferRemoteInputFocus: <*> 
handleTimeUpdate 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
sub =<*>,strMccMnc <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> flags: <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
<*> <*> <*> <*> <*> <*> <*> 
state.clipTopAmount:<*>, i:<*> 
<*> <*> <*> <*> 
removeNotificationChildren 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
transitionTo:mode=<*>, isEmuiStyle=false 
cancelNotification,index:<*> 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> flags: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
handleLteCaStatusChange 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + <*> 
<*> <*> : <*> 
<*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
sub =<*>,strMccMnc <*> <*> <*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
<*> <*> <*> 
earliestValidTime + <*> 
earliestValidTime + <*> 
earliestValidTime + <*> 
<*>|REPORT : <*> <*> <*> <*> 
<*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
updateTint: tint=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*>|onStandStepChanged <*> 
disableEffects=null canInterrupt=false once update: false 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> is <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
QSEECom_send_cmd return! 
begin 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> is <*> 
<*> <*> <*> <*> <*> <*> 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper.updateWallpaper(KeyguardWallpaper.java:<*>) 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
java.lang.Exception 
enqueueNotificationInternal: <*> <*> <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
onFinishedGoingToSleep(<*>) 
<*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
getTempInfo error: null, <*> 
show 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
setBarState:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
setKeyguardWallpaperAVGColor:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
updateTint: tint=<*> 
getOrInflateState subId:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
showNotificationAll 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> 
<*> <*> = <*> <*> 
<*> <*> <*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
hideTraffic 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
RCV <- {<*> <*> <*> <*> <*> <*> 
<*> <*> not in <*> <*> 
onEntryUpdated:<*>|com.tencent.mm|<*>|null|<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
notifyInterfaceClassActivity: client is <*> 
csr 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*>|getTodayTotalSteps <*> 
Split enqueueing broadcast <*> <*> 
updateTint: tint=<*> 
removeNotificationChildren 
getRingerMode... 
<*> <*> not in <*> <*> 
<*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
at java.io.FileInputStream.open(Native Method) 
notifyInterfaceClassActivity: client is <*> 
chinaDateTime:晚上<*>:<*> 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> (has extras) } <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
at java.io.FileInputStream.open(Native Method) 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
RCV <- {<*> <*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> <*> 
action:com.tencent.mm.ACTION.note_tracemsg_lock, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
isMusicActive... 
<*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
at java.io.FileInputStream.open(Native Method) 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> <*> ws=null, uid=<*>, pid=<*> 
handleNotifyScreenTurningOn 
<*> <*> <*> <*> 
<*> changed bounds; rebatching 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc <*> <*> <*> 
mVSimCurCardType is -<*> 
begin 
<*> <*> <*> 
begin 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Fingerprint timeout 
remove:kg_policy_pswd_pin_patten_x0_<*> 
handleNotifyScreenTurnedOn 
<*> <*> <*> 
setScrollingEnabled: true 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
receive data len = <*> 
WindowOrientationListener enabled 
AppAutoStartupPolicy:prevent start receiver <*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
action:android.intent.action.SCREEN_ON, mPermissionType:<*> 
KGSvcCall onStartedWakingUp. 
<*> <*> <*> <*> flags: <*> 
collapsePanel<*> 
StartupResidentService:InnerHandler Message:<*> 
ApStaDisabledState what=<*> 
qsc_send_cmd finish 
<*> <*> <*> due to <*> <*> <*> 
<*> <*> <*> <*> 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
cancelNotification,index:-<*> 
qsc_decode end 
<*> <*> <*> <*> <*> 
Action: Unknown 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> = false, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*> <*> <*>, <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*>|after compensate: cache step_<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> = false 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
isCurrentBySim()=false 
<*> <*> <*> <*> bytes <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> flags: <*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
fingersense_classify_touch() finished 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
Calling fingersense_classify_touch() 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
fingersense_classify_touch() finished 
Calling fingersense_touch_up() 
<*> <*> <*> <*> changed bounds; rebatching 
handle_exception_events enter 
fingersense_classify_touch() finished 
<*> <*> <*> <*> <*> <*> <*> 
not in <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
fingersense_touch_up() finished 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc <*> <*> <*> 
<*> <*> <*> <*> 
fingersense_touch_up() finished 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
MyOrientationListener: updateRotation. 
fingersense_classify_touch() finished 
<*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
ContentChange for slot: <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Animating brightness: target=<*>, rate=<*> 
isCurrentBySim()=false 
------------startInput-------------- 
<*> = false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|getTodayTotalSteps <*> 
Client requesting input be hidden, pid=<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
<*> <*> user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 <*> <*> <*> <*> <*> <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Client requesting input be hidden, pid=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> = <*> 
obtain, mHwFlags=<*> 
obtain, mHwFlags=<*> 
<*> <*> <*> 
isBluetoothScoOn... 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
removeNotificationChildren 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: <*> <*> <*> 
<*> <*> <*> <*> <*> <*> screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, <*> <*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
updateSlider2 seekBarProgress:<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*> 
Change to single clock mode! 
<*> <*> <*> <*> <*> <*> 
disableEffects=null canInterrupt=false once update: false 
transferRemoteInputFocus: <*> 
<*>|compensate received 
<*>|after compensate: cache step_<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
dispatch <*> <*> <*> <*> <*> <*> <*> <*> receivers 
<*> <*> <*> <*> <*> <*> (has extras) } 
<*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
showNotificationAll 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
getOrInflateState subId:<*> 
<*>|onStandStepChanged <*> 
<*> <*> <*> <*> 
csr 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> <*> 
fingersense_touch_up() finished 
<*> <*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
<*> <*> <*> is -<*> 
<*>|onStandStepChanged <*> 
fingersense_touch_up() finished 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
<*> <*> <*> is -<*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
java.lang.reflect.InvocationTargetException 
at com.huawei.android.chr.ProtocolLogManager.addSubCommonBaseParaInfo(ProtocolLogManager.java:<*>) 
at com.huawei.android.chr.ProtocolLogManager.handleReportChrAPCommonPara(ProtocolLogManager.java:<*>) 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> : <*> 
<*> <*> : <*> 
<*> <*> <*> <*> 
<*> <*> : <*> 
<*> <*> <*> 
<*> <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> = <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
at java.lang.Thread.sleep(Thread.java:<*>) 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> is -<*> 
<*> <*> = <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
getOrInflateState subId:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Split enqueueing broadcast <*> <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*>|REPORT : <*> <*> <*> <*> 
fingersense_touch_up() finished 
Create obj success use class android.app.HwCustNotificationImpl 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*>|compensate <*> <*> 
updateTint: tint=<*> 
updateSlider1 seekBarProgress:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
disableEffects=null canInterrupt=false once update: false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> <*> <*> <*> <*> <*> <*> <*> <*> 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Calling fingersense_touch_up() 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> <*> <*> 
action:null, mPermissionType:<*> 
isCurrentBySim()=false 
Calling fingersense_classify_touch() 
fingersense_classify_touch() finished 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
disableEffects=null canInterrupt=false once update: false 
Create obj success use class android.app.HwCustNotificationImpl 
getOrInflateState subId:<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
fingersense_classify_touch() finished 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Create obj success use class android.app.HwCustNotificationImpl 
removeNotificationChildren 
MSG_QUERY_TCP_INFO called,count:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
MyOrientationListener: updateRotation. 
<*>|after compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
updateClipping isOverlap:false 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
<*>|compensate <*> <*> 
onStepCounterChange stepsNum:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> peeking: <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
fingersense_classify_touch() finished 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*>, <*>, <*>), <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> type <*> <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> changed bounds; rebatching 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
c: <*> <*> <*> <*> <*> l: false 
<*> <*> <*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
connect :true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*> <*> <*> is -<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
getOrInflateState subId:<*> 
onProposedRotationChanged, rotation=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
onProposedRotationChanged, rotation=<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
updateSlider1 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
applyInPlace=true shouldPeek=false alertAgain=true 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
isCurrentBySim()=false 
<*> <*> <*> is -<*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 <*> <*> <*> when=<*>, vis=<*>, userid=<*> 
<*> <*> <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
------------startInput-------------- 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
action:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, mPermissionType:<*> 
<*> <*> <*> <*> 
updateRotationUnchecked(alwaysSendConfiguration=false) 
<*> <*> <*> 
begin 
<*> flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> = <*>, <*> = <*> 
at com.huawei.keyguard.support.magazine.MagazineWallpaper$BgPicLoader$<*>.run(MagazineWallpaper.java:<*>) 
at android.os.Handler.handleCallback(Handler.java:<*>) 
notifyFinishedGoingToSleep 
<*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
at java.io.FileInputStream.open(Native Method) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
showLocked 
<*> <*> is null <*> <*> 
updateQsState:false 
update HiddenSpaceData! 
hideTraffic 
expand: start 
Provider.call: getPrefString 
<*> <*> <*> <*> <*> <*> <*> <*> 
isWiredHeadsetOn... 
Split enqueueing broadcast <*> <*> 
mVSimCurCardType is -<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
notifyInterfaceClassActivity: client is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
sendMessage <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> is <*> <*> <*> <*> <*> is <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
<*> <*> <*> <*> 
action:com.tencent.mm.ACTION.note_tracemsg_lock, mPermissionType:<*> 
updateTint: tint=<*> 
disableEffects=null canInterrupt=false once update: false 
updateTint: tint=<*> 
Split enqueueing broadcast <*> <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateNotificationShade 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> flags: <*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
<*> <*> <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
onStepCounterChange stepsNum:<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
dispatch ordered <*> <*> <*> <*> <*> <*> <*> receivers 
<*> <*> <*> 
<*> <*> pid: <*> <*> <*> <*> pid: <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
notifyInterfaceClassActivity: client is <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
showNotificationAll 
removeNotificationChildren 
<*> <*> <*> <*> changed bounds; rebatching 
<*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
<*> <*> <*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
onShowStatusChange show:false 
updateNotificationShade 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
sendMessage <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> bytes <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
updateNotificationShade 
sendMessage <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> bytes <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
onShowStatusChange show:false 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*>|compensate received 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
<*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> bytes <*> <*> 
<*> <*> <*> <*> <*> <*> 
at java.io.FileInputStream.open(Native Method) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*> <*> <*> = false 
<*> <*> : <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
isCurrentBySim()=false 
Create obj success use class <*> 
<*>|MSG_RECORD_DATA_TO_FILE 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> file or directory) 
transferRemoteInputFocus: <*> 
onShowStatusChange show:false 
notifyInterfaceClassActivity: client is <*> 
<*>|REPORT : <*> <*> <*> <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 <*> <*> <*> when=<*>, vis=<*>, userid=<*> 
<*>|onStandStepChanged <*> 
onEntryUpdated:<*>|com.tencent.mm|<*>|null|<*> 
sendMessage <*> 
<*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> bytes <*> <*> <*> 
applyIconTint ignore 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
transferRemoteInputFocus: <*> 
Create obj success use class android.app.HwCustNotificationImpl 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> <*> bytes <*> <*> <*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
<*> <*> <*> <*> <*> <*> <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
at java.io.FileInputStream.open(Native Method) 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
transferRemoteInputFocus: <*> 
onShowStatusChange show:false 
<*> <*> <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> <*> <*> <*> <*> <*> <*> <*> <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*>|after compensate: cache step_<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
<*> <*> <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
onStepCounterChange stepsNum:<*> 
isCurrentBySim()=false 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
applyIconTint ignore 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*>|rebuild notification 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is <*> 
updateTint: tint=<*> 
isWiredHeadsetOn... 
applyInPlace=true shouldPeek=false alertAgain=true 
transferRemoteInputFocus: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> is <*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
disableEffects=null canInterrupt=false once update: false 
showNotificationAll 
<*> <*> <*> <*> = <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
<*>|onStandStepChanged <*> 
<*> <*> <*> <*> bytes <*> <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
removeNotificationChildren 
received cell-signal:<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
c: <*> <*> <*> <*> <*> l: false 
<*> <*> <*> <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
No peeking: not in <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
mVSimCurCardType is -<*> 
<*> <*> <*> 
No peeking: not in <*> <*> 
handleDreamLocked 
updateChargingLocked: charging=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte <*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
setRestrictBackgroundLocked(): false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
at java.io.FileInputStream.open(Native Method) 
notifyInterfaceClassActivity: client is <*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
action:huawei.intent.action.IMS_SERVICE_STATE_CHANGED, mPermissionType:<*> 
notifyInterfaceClassActivity: client is <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.open(Native Method) 
<*> <*> <*> <*> <*> <*> <*> type <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
updateTint: tint=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
send_cmd_kernel: cmd=<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*> <*> <*> <*> <*> 
at android.os.Handler.handleCallback(Handler.java:<*>) 
<*> <*> <*> <*> 
<*> <*> is null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
fingersense_on_resume() finished 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
QSEECom_send_cmd return! 
<*> <*> <*> <*> <*> <*> <*> 
ContentChange for slot: <*> 
template id:<*> 
handleKeyguardDone 
setIsExpanded: false 
showTraffic 
qsc_decode end 
<*> <*> <*> 
send data return = <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
<*> <*> <*> <*> <*> 
dispatch <*> <*> <*> <*> <*> <*> <*> <*> receivers 
begin 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
updateDimmedActivatedHideSensitive overlap:false 
ash->screen unlock 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
LISTEN_CELL_LOCATION uid:<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
removeFreezeProcess pkg:com.android.browser 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
isCurrentBySim()=false 
[Utils.lockCreate] <> 
<*> <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
onDataActivity: direction=<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
onDataActivity: direction=<*> 
<*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> <*> <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> : <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> is <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> = <*> 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
moveTaskToTop mTaskChanged:true 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> (has extras) } 
<*> <*> <*> <*> <*> <*> <*> 
at com.baidu.location.g.a$a.handleMessage(Unknown) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> <*> <*> 
updateBarBgColor 
<*> caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
action:null, mPermissionType:<*> 
dispatch <*> <*> <*> <*> <*> <*> <*> <*> receivers 
<*> caller <*> does not hold REAL_GET_TASKS; limiting output 
m1: false 
Error reading charge file 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
action:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
obtain, mHwFlags=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte <*> <*> <*> <*> 
<*> <*> <*> <*> <*> : <*> 
<*> <*> <*> <*> <*> <*> <*> flags: <*> 
suspendAutohide 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> due to <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = false 
<*> <*> <*> 
<*> <*> due to <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> euid: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
checkPathCanWrite:/storage/emulated/<*>/Android/data/com.qiyi.video/files 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
received cell-signal:<*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
onBaseContextAttached: 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> 
Nexus initConnection 
Skipping, withExcluded: false, <*> <*> <*> <*> <*> (has extras) } 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
HCDN_LOG: [<*>/<*>/<*>-<*>:<*>:<*>:<*>]:m_DBFilePath::memory: 
<*>.<*>.<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> 
<*> callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> flags: <*> 
<*> <*> <*> 
at android.os.Looper.loop(Looper.java:<*>) 
registerPluginDataListener <*> 
at android.os.Looper.loop(Looper.java:<*>) 
actionId=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
at com.android.providers.telephony.TpProviderHw.checkPermission(TpProviderHw.java:<*>) 
at android.content.ContentProviderNative.onTransact(ContentProviderNative.java:<*>) 
at com.android.providers.telephony.TpProviderHw.query(TpProviderHw.java:<*>) 
<*> <*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
at android.content.ContentProvider$Transport.query(ContentProvider.java:<*>) 
<*> <*> <*> <*> 
at android.content.ContentProvider$Transport.query(ContentProvider.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.qiyi.video,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> class android.app.HwCustNotificationImpl 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
<*> <*> <*> <*> <*> 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
iqiyi message: failed to open /proc/<*>/cmdline 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.qiyi.video,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
初始化 
AutoStartupDataMgr:isUnderControll third party not in <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
[PushService] stopTryConnectTask 
<*> <*> <*> <*> <*> 
at com.android.providers.settings.SettingsProvider.call(SettingsProvider.java:<*>) 
at android.provider.Settings.checkAndNoteWriteSettingsOperation(Settings.java:<*>) 
at android.content.ContentProviderNative.onTransact(ContentProviderNative.java:<*>) 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
List [] 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
at android.os.Handler.handleCallback(Handler.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> DownloadEpisodeAdapter] <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
at android.app.ContextImpl.enforceCallingOrSelfPermission(ContextImpl.java:<*>) 
getTempInfo error: null, <*> 
at com.android.okhttp.okio.AsyncTimeout$<*>.read(AsyncTimeout.java:<*>) 
at java.io.FileOutputStream.<init>(FileOutputStream.java:<*>) 
<*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
fingersense_touch_up() finished 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
getOrInflateState subId:<*> 
dispatch <*> <*> <*> <*> <*> <*> <*> <*> receivers 
<*> <*> <*> 
<*> <*> <*> <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> euid: <*> <*> 
<*> <*> <*> <*> <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
MagicLink-BtAndWifiWrapper:====>DefaultState 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
mVSimCurCardType is -<*> 
iqiyi message: <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> is <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onConfigurationChanged... 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
InitCupidEpisode() 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> euid: <*> <*> 
action:com.huawei.appmarket.service.downloadservice.Receiver, mPermissionType:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> code(<*>) 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> is <*> 
<*> <*> <*> <*> = <*>, <*> = <*>, <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
<*> <*> <*> <*> <*> euid: <*> <*> <*> euid: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> 
<*> <*> <*> <*> changed bounds; rebatching 
[CheckFaultTreeVersionTask.doInBackground.httpCallback]onSuccess! 
<*> <*> <*> <*> 
begin 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> 
obtain, mHwFlags=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
received cell-signal:<*> 
c: <*> <*> <*> <*> <*> l: false 
isAdjustVolumeEnable,mEnableAdjustVolume:true 
VolumeDialogController.Callbacks onStateChanged 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
isCurrentBySim()=false 
updateDimmedActivatedHideSensitive overlap:false 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
obtain, mHwFlags=<*> 
setLVMMode abort 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*> <*> <*> is -<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> is <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
m1: false 
action:com.huawei.appmarket.service.downloadservice.Receiver, mPermissionType:<*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
action=android.intent.action.PACKAGE_CHANGED queryReplace=false 
isCurrentBySim()=false 
action:android.search.action.SEARCHABLES_CHANGED, mPermissionType:<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true <*> <*> <*> <*> <*> <*> <*> <*> <*> 
setTracingEnabled:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
iqiyi message: <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = false 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
updateRotationUnchecked(alwaysSendConfiguration=false) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*>, <*> = <*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mVSimCurCardType is -<*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> 
<*> <*> <*> 
onProposedRotationChanged, rotation=<*> 
<*> <*> <*> <*> <*> <*> <*> 
csr 
<*> <*> <*> <*> <*> <*> (has extras) } 
action:com.huawei.appmarket.service.downloadservice.Receiver, mPermissionType:<*> 
com.amap.android.ams useCivilNlpPackage 
<*> <*> <*> = false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*> <*> <*> <*> <*> <*> 
received cell-signal:<*> 
<*> <*> <*> <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
<*> <*> <*> type <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*> caller <*> does not hold REAL_GET_TASKS; limiting output 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
csr 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> 
<*> TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> <*> <*> <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
c: true, w: false, t: false, l: false 
<*> caller <*> does not hold REAL_GET_TASKS; limiting output 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> euid: <*> <*> <*> euid: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
not in <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
is3GCalling is false,mCdmaSlot is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 <*> isTypeIconWide:true showActivity:true <*> <*> <*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*> <*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> caller <*> does not hold REAL_GET_TASKS; limiting output 
isCurrentBySim()=false 
isCurrentBySim()=false 
onDataActivity: direction=<*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*> <*> <*> <*> <*> 
<*> caller <*> does not hold REAL_GET_TASKS; limiting output 
getTempInfo error: null, <*> 
<*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 <*> isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true <*> <*> <*> 
Create obj success use class <*> 
getTempInfo error: null, <*> 
refreshBatteryInfo: null 
<*> <*> <*> <*> <*> <*> (has extras) } <*> <*> <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> onDataActivity: <*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
isCurrentBySim()=false 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
proxy app:com.huawei.camera,uid:<*>,result:true 
isCurrentBySim()=false 
isCurrentBySim()=false 
csr 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
received cell-signal:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
t:false, fl: false, p: <*>, ce: true, we: false 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
iqiyi message: <*> <*> <*> <*> 
iqiyi message: <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
csr 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> <*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
received cell-signal:<*> 
<*> <*> <*> <*> <*> <*> 
iqiyi message: <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
iqiyi message: <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, <*> <*> <*> <*> <*> mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
csr 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
c: true, w: false, t: false, l: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
mVSimCurCardType is -<*> 
c: true, w: false, t: false, l: false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
csr 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
csr 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
<*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
m1: false 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
received cell-signal:<*> 
RCV <- {<*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 <*> isTypeIconWide:true showActivity:true <*> <*> <*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
<*> <*> <*> type <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> onDataActivity: direction=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> <*> <*> 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
<*> <*> <*> 
<*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
csr 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
<*> <*> <*> <*> 
<*> <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
isCurrentBySim()=false 
<*> <*> <*> type <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> changed bounds; rebatching 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.tencent.mm,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, <*> <*> <*> <*> <*> mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
csr 
onDataActivity: direction=<*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
formatChinaDateTime equals. 
<*> <*> <*> <*> = <*>, <*> = <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> 
m1: false 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
notifyInterfaceClassActivity: client is <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
onSignal: mSubId=<*>,currDataSubID=<*> 
handleLteCaStatusChange 
isCurrentBySim()=false 
isCurrentBySim()=false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
received cell-signal:<*> 
<*> : <*> 
<*> <*> <*> 
<*> action = <*> 
PFW.HwPFWService:handle PFW_MSG_WAKEUP_TIMER 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> <*> <*> <*> = <*> 
received cell-signal:<*> 
<*> <*> <*> <*> <*> <*> 
iqiyi message: <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onDataActivity: direction=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 <*> isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
iqiyi message: <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*>, <*>, <*>), <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
setTracingEnabled:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> onDataActivity: direction=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
connect :true 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> <*> <*> <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> <*> <*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
c: true, w: false, t: false, l: false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
getOrInflateState subId:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
mVSimCurCardType is -<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
<*> <*> <*> <*> <*> 
iqiyi message: <*> <*> <*> <*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
csr 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
iqiyi message: <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
csr 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
org.iqiyi.video.vote.b.aux.a()<<*>> : <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
notifyInterfaceClassActivity: client is <*> 
received cell-signal:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
c: true, w: false, t: false, l: false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
received cell-signal:<*> 
handleLteCaStatusChange 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
csr 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
handleLteCaStatusChange 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
iqiyi message: <*> <*> <*> <*> 
setTracingEnabled:<*> 
<*> <*> <*> <*> <*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
c: true, w: false, t: false, l: false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
notifyInterfaceClassActivity: client is <*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> = <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
is3GCalling is false,mCdmaSlot is -<*> 
m1: false 
<*> <*> <*> mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, <*> <*> <*> <*> <*> mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
[qiyi_LOG_INFO <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
at java.lang.Thread.run(Thread.java:<*>) 
<*> <*> <*> <*> contentView=null vibrate=null <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
at java.lang.Thread.run(Thread.java:<*>) 
<*> <*> <*> 
<*> <*> <*> 
updateTint: tint=<*> 
<*> <*> <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
c: true, w: false, t: false, l: false 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> dataConnected=true, isRoaming=false 
is3GCalling is false,mCdmaSlot is -<*> 
Split enqueueing broadcast <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 <*> isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> <*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
csr 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
iqiyi message: <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
csr 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*> 
received cell-signal:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
m1: false 
iqiyi message: <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
csr 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
notifyInterfaceClassActivity: client is <*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> dataConnected=true, isRoaming=false 
received cell-signal:<*> 
formatChinaDateTime equals. 
<*> <*> <*> <*> <*> <*> <*> 
received cell-signal:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
Create obj success use class <*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Split enqueueing broadcast <*> <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
Create obj success use class <*> 
<*> [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] <*> [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
handle_exception_events enter 
getTempInfo error: null, <*> 
null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
iqiyi message: <*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
received cell-signal:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
c: true, w: false, t: false, l: false 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn <*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
<*> <*> <*> 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> dataConnected=true, isRoaming=false 
getTempInfo error: null, <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
isCurrentBySim()=false 
m1: false 
sending broadcast to Pid = <*>, Uid = <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
formatChinaDateTime equals. 
handleTimeUpdate 
<*> <*> <*> <*> 
iqiyi message: <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mSimSubId:<*> onDataActivity: direction=<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
received cell-signal:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
iqiyi message: <*> <*> <*> <*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
csr 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
isCurrentBySim()=false 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
is3GCalling is false,mCdmaSlot is -<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
m1: false 
<*> <*> <*> <*> <*> <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
handleLteCaStatusChange 
mVSimCurCardType is -<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
m1: false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
t:false, fl: false, p: <*>, ce: true, we: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
iqiyi message: <*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
iqiyi message: ==== <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
m1: false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
notifyInterfaceClassActivity: client is <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
not in <*> <*> <*> <*> <*> <*> <*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
<*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
<*> <*> <*> <*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
<*> <*> <*> <*> <*> = <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> = false 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
<*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
is3GCalling is false,mCdmaSlot is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
getTempInfo error: null, <*> 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
onSignal: mSubId=<*>,currDataSubID=<*> 
isCurrentBySim()=false 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> Intent { <*> <*> (has extras) } <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
chinaDateTime:晚上<*>:<*> 
<*> is null <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
syncCalendar begin! 
<*> <*> <*> <*> changed bounds; rebatching 
<*> <*> <*> 
<*> <*> <*> <*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
csr 
m1: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast <*> <*> 
getOrInflateState subId:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
csr 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
iqiyi message: ==== <*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
notifyInterfaceClassActivity: client is <*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
received cell-signal:<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<*> <*> <*> 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> <*> <*> <*> 
setTracingEnabled:<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
onDataActivity: direction=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
notifyInterfaceClassActivity: client is <*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> <*> 
Create obj success use class <*> 
onDataActivity: direction=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
formatChinaDateTime equals. 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
sending broadcast to Pid = <*>, Uid = <*> 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
m1: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
isCurrentBySim()=false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
getOrInflateState subId:<*> 
iqiyi message: ==== <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
iqiyi message: <*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = false 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
send: <*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> pid: <*> <*> <*> <*> pid: <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
t:false, fl: false, p: <*>, ce: true, we: false 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> = <*> <*> = <*> 
m1: false 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
m1: false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
t:false, fl: false, p: <*>, ce: true, we: false 
notifyInterfaceClassActivity: client is <*> 
notifyInterfaceClassActivity: client is <*> 
send_cmd_kernel: cmd=<*> 
iqiyi message: ==== <*> <*> <*> <*> <*> <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
csr 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
notifyInterfaceClassActivity: client is <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Change to single clock mode! 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
<*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> = <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> 
m1: false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
onDataActivity: direction=<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
notifyInterfaceClassActivity: client is <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
mSimSubId:<*> onDataActivity: direction=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
csr 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> = <*> <*> = <*> <*> = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
iqiyi message: <*> isProcessExist <*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> = false 
isCurrentBySim()=false 
iqiyi message: <*> isProcessExist true 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
t:false, fl: false, p: <*>, ce: true, we: false 
m1: false 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
notifyInterfaceClassActivity: client is <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
received cell-signal:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
######### CMD_QUERY_PKTS ######## 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> <*> <*> type <*> when <*> <*> <*> <*> <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
RCV <- {<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
isCardAbsent slot:<*> slotState:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
[SocketRead_<*>:<*>:<*>-<*>]conetEntity.channelType:ChannelType_Secure(android/null:<*>) 
<*> <*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> <*> <*> is <*> <*> <*> <*> <*> is <*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
notifyInterfaceClassActivity: client is <*> 
notifyInterfaceClassActivity: client is <*> 
notifyInterfaceClassActivity: client is <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
setTracingEnabled:<*> 
received cell-signal:<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
m1: false 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
getTempInfo error: null, <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> <*> <*> <*> = false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
received cell-signal:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
m1: false 
<*> <*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
iqiyi message: <*> isProcessExist true 
onSignal: mSubId=<*>,currDataSubID=<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
formatChinaDateTime equals. 
<*> <*> <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
<*> <*> <*> <*> <*> <*> <*> <*> = false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> action = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
[ReceiverDispatcher-<*>]lastnetWorkType:<*> curNetWorkType:<*>(android/null:<*>) 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
AFTER CALLBACK 
<*> <*> <*> 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
csr 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
iqiyi message: <*> isProcessExist true 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
isCurrentBySim()=false 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
received cell-signal:<*> 
received cell-signal:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> 
send_cmd_kernel: cmd=<*> 
Change in <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
BgPowerManagerService:onStartCommand 
<*> <*> <*> <*> <*> <*> <*> <*> 
PowerStatsHelper:minAveragePowerForCpu= <*>.<*> 
<*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
is3GCalling is false,mCdmaSlot is -<*> 
m1: false 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
csr 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCurrentBySim()=false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
send_cmd_kernel: cmd=<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*>, <*>, <*>), <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*>, <*>, <*>), <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> changed bounds; rebatching 
notifyInterfaceClassActivity: client is <*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
getOrInflateState subId:<*> 
Change in <*> <*> <*> <*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>; 
<*> <*> <*> <*> <*> dataConnected=true, isRoaming=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
mVSimCurCardType is -<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> <*> <*> <*> <*> <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
m1: false 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
getOrInflateState subId:<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
notifyInterfaceClassActivity: client is <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
notifyInterfaceClassActivity: client is <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> callerApp: <*> <*> flags: <*> 
chinaDateTime:晚上<*>:<*> 
<*> <*> <*> <*> <*> <*> <*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
received cell-signal:<*> 
<*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
isCurrentBySim()=false 
m1: false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
mVSimCurCardType is -<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
t:false, fl: false, p: <*>, ce: true, we: false 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
<*> <*> <*> 
iqiyi message: <*> isProcessExist true 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
csr 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onDataActivity: direction=<*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
mVSimCurCardType is -<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
<*> <*> <*> <*> 
getOrInflateState subId:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
send_cmd_kernel: cmd=<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
c: true, w: false, t: false, l: false 
csr 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> = <*> 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<*> <*> <*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
received cell-signal:<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> <*> 
初始化 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> pid: <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> <*> <*> <*> <*> 
CallObjectMethod strat 
<*> <*> <*> 
getOrInflateState subId:<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
<*> typeIcon:<*> <*> isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
m1: false 
isCardAbsent slot:<*> slotState:<*> 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> = <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
sending broadcast to Pid = <*>, Uid = <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
csr 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
send_cmd_kernel: cmd=<*> 
received cell-signal:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
handle_exception_events enter 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
m1: false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
######### CMD_QUERY_PKTS ######## 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) <*> <*> <*> <*> 
isCurrentBySim()=false 
notifyInterfaceClassActivity: client is <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
received cell-signal:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
is3GCalling is false,mCdmaSlot is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
onSignal: mSubId=<*>,currDataSubID=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
received cell-signal:<*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> pid: <*> <*> <*> <*> pid: <*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
Received kernel message payload: event <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
t:false, fl: false, p: <*>, ce: true, we: false 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
[<*>.<*>/<*>, <*>.<*>/<*>] 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
getTempInfo error: null, <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
isCurrentBySim()=false 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCardAbsent slot:<*> slotState:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
mVSimCurCardType is -<*> 
Change in <*> <*> <*> <*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
mVSimCurCardType is -<*> 
onDataActivity: direction=<*> 
isCardAbsent slot:<*> slotState:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
Received kernel message payload: event <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
Change in <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
<*> <*> Intent { <*> <*> <*> (has extras) } <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
isCurrentBySim()=false 
Received kernel message payload: event <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
poll before: g_monitor_fd =<*> 
<*> <*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> : <*> <*> <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
Error reading charge file 
<*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
getOrInflateState subId:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> <*> euid: <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
send_cmd_kernel: cmd=<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
Calling fingersense_touch_up() 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> : <*> 
reset finish 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*>-<*>-<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>-<*>-<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*>-<*>-<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> not in <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*>-<*>-<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>-<*>-<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
[qiyi_LOG_INFO <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Watch Thread{<*>} <*> <*> <*> <*> = <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> 
[qiyi_LOG_INFO <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
[qiyi_LOG_INFO <*> <*> <*> 
<*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
mIntentReceiver-Package changed 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
com.amap.android.ams useCivilNlpPackage 
<*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Change to single clock mode! 
handle_exception_events enter 
handle_exception_events enter 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
<*> action = <*> 
PFW.HwPFWService:handle PFW_MSG_WAKEUP_TIMER 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
getOrInflateState subId:<*> 
c: true, w: false, t: false, l: false 
getOrInflateState subId:<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> = false 
mVSimCurCardType is -<*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*> <*> <*> 
csr 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
c: true, w: false, t: false, l: false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
t:false, fl: false, p: <*>, ce: true, we: false 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
isCurrentBySim()=false 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
getOrInflateState subId:<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> <*> = <*> 
received cell-signal:<*> 
<*> [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] <*> [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
is3GCalling is false,mCdmaSlot is -<*> 
setTracingEnabled:<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
mVSimCurCardType is -<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
isCurrentBySim()=false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
isCurrentBySim()=false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
t:false, fl: false, p: <*>, ce: true, we: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
ImsSenderRxr : <*> <*> <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
sending broadcast to Pid = <*>, Uid = <*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
isCurrentBySim()=false 
<*> : <*> <*> = true <*> <*> = false 
<*> <*> <*> <*> <*> 
chinaDateTime:晚上<*>:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
mSimSubId:<*> onDataActivity: direction=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
ImsServiceSub : <*> <*> = true <*> <*> = false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> 
csr 
isCurrentBySim()=false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
m1: false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
iqiyi message: create--runOnSubprocess isProcessExist true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
is3GCalling is false,mCdmaSlot is -<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
isCurrentBySim()=false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
at com.android.internal.telephony.ITelephony$Stub.onTransact(ITelephony.java:<*>) 
at android.app.ContextImpl.enforceCallingOrSelfPermission(ContextImpl.java:<*>) 
at com.android.phone.PhoneInterfaceManager.enforceFineOrCoarseLocationPermission(PhoneInterfaceManager.java:<*>) 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:true isRoaming:false 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.content.ContentProvider.query(ContentProvider.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
<*> <*> <*> <*> <*> 
handle_exception_events enter 
getOrInflateState subId:<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ImsSenderRxr : <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
isCardAbsent slot:<*> slotState:<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:false isRoaming:false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
received cell-signal:<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
<*> <*> <*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
c: true, w: false, t: false, l: false 
getOrInflateState subId:<*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
ImsSenderRxr : <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
notifyInterfaceClassActivity: client is <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> 
<*> <*> <*> 
updateClipping isOverlap:true 
mVSimCurCardType is -<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*>, <*>, <*>), <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCardAbsent slot:<*> slotState:<*> 
mVSimCurCardType is -<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
ImsServiceSub : <*> <*> = <*> 
not in <*> <*> <*> <*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> <*> <*> <*> <*> 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*>, <*>, <*>), <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> 
getTempInfo error: null, <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ImsServiceSub : <*> <*> = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
updateClipping isOverlap:true 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
<*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> 
received cell-signal:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
onSignal: mSubId=<*>,currDataSubID=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*>, <*>, <*>), <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>), <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
getOrInflateState subId:<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
send_cmd_kernel: cmd=<*> 
received cell-signal:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
updateDimmedActivatedHideSensitive overlap:true 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
<*> <*> <*> type <*> when <*> <*> <*> <*> <*> 
<*> action = <*> 
<*> <*> <*> <*> <*> 
<*> is null <*> <*> 
<*> is null <*> <*> 
<*> is null <*> <*> 
<*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Provider.call: getPrefString 
resetCommute 
getCurRoamingState 
<*> <*> <*> <*> 
<*> <*> <*> : <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
c: true, w: false, t: false, l: false 
c: true, w: false, t: false, l: false 
MSG_QUERY_TCP_INFO called,count:<*> 
send_cmd_kernel: cmd=<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
<*> <*> <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
t:false, fl: false, p: <*>, ce: true, we: false 
m1: false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
mVSimCurCardType is -<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
received cell-signal:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> <*> = <*> 
csr 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
m1: false 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
getOrInflateState subId:<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onSignal: mSubId=<*>,currDataSubID=<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
m1: false 
m1: false 
updateDimmedActivatedHideSensitive overlap:true 
onDataActivity: direction=<*> 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
mVSimCurCardType is -<*> 
c: true, w: false, t: false, l: false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> <*> <*> 
received cell-signal:<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
Watch Thread{<*>} <*> <*> <*> <*> = <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
csr 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
send_cmd_kernel: cmd=<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
c: true, w: false, t: false, l: false 
mVSimCurCardType is -<*> 
mVSimCurCardType is -<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
<*> <*> pid: <*> is <*> <*> pid: <*> 
Watch Thread{<*>} <*> <*> <*> <*> = <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
onSignal: mSubId=<*>,currDataSubID=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
RCV <- {<*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getOrInflateState subId:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
getOrInflateState subId:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
received cell-signal:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
received cell-signal:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread <*> <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
received cell-signal:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
ImsServiceSub : <*> <*> = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
RCV <- {<*> <*> <*> <*> <*> 
<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<*> <*> <*> <*> <*> <*> <*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
t:false, fl: false, p: <*>, ce: true, we: false 
received cell-signal:<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
received cell-signal:<*> 
<*> <*> <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
mVSimCurCardType is -<*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
Change in <*> <*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
m1: false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
received cell-signal:<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
handleTimeUpdate 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
csr 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) <*> <*> <*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
isCurrentBySim()=false 
<*> = <*> 
<*> <*> <*> <*> : <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
m1: false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ImsSenderRxr : <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> = <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> --> <*> 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
not in <*> <*> <*> <*> <*> <*> <*> 
received cell-signal:<*> 
<*> <*> <*> type <*> when <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
<*> <*> <*> <*> <*> <*> <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
onSignal: mSubId=<*>,currDataSubID=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
received cell-signal:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
m1: false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
Change to single clock mode! 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
ImsSenderRxr : <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
RCV <- {<*> IfaceClass <*> <*> <*> <*> 
getOrInflateState subId:<*> 
notifyInterfaceClassActivity: client is <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*> <*> <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*> <*> <*> <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
<*> <*> <*> <*> 
getOrInflateState subId:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
notifyInterfaceClassActivity: client is <*> 
isCurrentBySim()=false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
Change in state from: <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
c: true, w: false, t: false, l: false 
onSignal: mSubId=<*>,currDataSubID=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
<*> <*> <*> 
Change in state from: <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> <*> <*> 
Change in state from: <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
<*> <*> <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getTempInfo error: null, <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> 
chinaDateTime:晚上<*>:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
<*> <*> <*> 
getOrInflateState subId:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
mVSimCurCardType is -<*> 
Received kernel message payload: event <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
ImsSenderRxr : <*> <*> <*> <*> <*> 
sending broadcast to Pid = <*>, Uid = <*> 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
<*> <*> <*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
Change in state from: <*> <*> 
getOrInflateState subId:<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCardAbsent slot:<*> slotState:<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
MSG_QUERY_TCP_INFO called,count:<*> 
received cell-signal:<*> 
m1: false 
poll before: g_monitor_fd =<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:true 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
updateChargingLocked: charging=false 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
m1: false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
not in <*> <*> <*> <*> <*> <*> <*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
Sending <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> in the <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> 
getOrInflateState subId:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> action = <*> <*> <*> <*> <*> 
at com.huawei.android.bastet.HwBastet.<init>(HwBastet.java:<*>) 
<*> <*> <*> <*> <*> <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
ImsServiceSub : <*> <*> = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
<*> <*> <*> <*> <*> <*>} <*>.<*>.<*>.<*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
is3GCalling is false,mCdmaSlot is -<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
Change in state from: <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
c: true, w: false, t: false, l: false 
<*> <*> Intent { <*> <*> (has extras) } 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
m1: false 
[<*>.<*>/<*>, <*>.<*>/<*>] 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
m1: false 
<*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
t:false, fl: false, p: <*>, ce: true, we: false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
ImsSenderRxr : <*> <*> <*> 
Sending <*> <*> <*> <*> <*> <*> <*> <*> 
sending broadcast to Pid = <*>, Uid = <*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
Received kernel message payload: event <*> 
<*> <*> <*> <*> <*> <*> <*> is <*> <*> <*> <*> <*> is <*> 
received cell-signal:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
getOrInflateState subId:<*> 
m1: false 
received cell-signal:<*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
failed to <*> <*> <*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
received cell-signal:<*> 
m1: false 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
<*> <*> <*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
<*> <*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
received cell-signal:<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<*> <*> <*> <*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
mVSimCurCardType is -<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
MSG_QUERY_TCP_INFO called,count:<*> 
Received kernel message payload: event <*> 
<*> <*> <*> <*> <*> in the <*> <*> <*> <*> <*> in the <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
not in <*> <*> <*> <*> <*> <*> <*> 
c: true, w: false, t: false, l: false 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
<*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
mSimSubId:<*> onDataActivity: direction=<*> 
notifyInterfaceClassActivity: client is <*> 
m1: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
Error reading charge file 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
ImsSenderRxr : <*> <*> <*> <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:true isRoaming:false 
getOrInflateState subId:<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> = <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> to open <*> due to <*> <*> <*> <*> = <*> is <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> type <*> when <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> pid: <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
mVSimCurCardType is -<*> 
<*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
onSignal: mSubId=<*>,currDataSubID=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> <*> <*> <*> type <*> when <*> <*> <*> type <*> when <*> <*> <*> type <*> when <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
Change in state from: <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
######### CMD_QUERY_PKTS ######## 
onSignal: mSubId=<*>,currDataSubID=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
m1: false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>; 
ImsSenderRxr : <*> <*> <*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
mSimSubId:<*> onDataActivity: direction=<*> 
received cell-signal:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
ImsSenderRxr : <*> <*> <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
is3GCalling is false,mCdmaSlot is -<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
mVSimCurCardType is -<*> 
onDataActivity: direction=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> * <*> <*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
ImsServiceSub : <*> <*> = <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = false <*> = <*> <*> <*> <*> <*> = false 
<*> <*> <*> : <*> 
<*> <*> <*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
setActionsBackground,null == view,mPrivateLayout 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
c: true, w: false, t: false, l: false 
m1: false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
received cell-signal:<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
is3GCalling is false,mCdmaSlot is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
Change in state from: <*> <*> 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
ImsSenderRxr : <*> <*> <*> <*> <*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
Sending <*> <*> <*> <*> <*> <*>:com.android.phone/<*> pkg com.android.phone 
onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
csr 
<*> <*> <*> <*> <*> = <*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) <*> <*> <*> 
mVSimCurCardType is -<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
received cell-signal:<*> 
c: true, w: false, t: false, l: false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> H! 
chinaDateTime:晚上<*>:<*> 
setActionsBackground,null == view,mPrivateLayout 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Received kernel message payload: event <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
not in <*> <*> <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
isCurrentBySim()=false 
iqiyi message: ==== do something executeCmd isProcessExist true ===== 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
c: true, w: false, t: false, l: false 
m1: false 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
ImsServiceSub : <*> <*> = <*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Received kernel message payload: event <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
notifyInterfaceClassActivity: client is <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
setActionsBackground,null == <*> 
setActionsBackground,null == view,mPrivateLayout 
<*> <*> <*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
poll before: g_monitor_fd =<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
<*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) <*> <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
<*> <*> <*> 
<*> <*> <*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
is3GCalling is false,mCdmaSlot is -<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
org.iqiyi.video.player.cv.ag()<<*>> : current progress: progress= <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--hideVoteView 
<*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
m1: false 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
ImsSenderRxr : <*> <*> <*> <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
getOrInflateState subId:<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
mVSimCurCardType is -<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
RCV <- {<*> IfaceClass <*> <*> <*>} 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> 
m1: false 
######### CMD_QUERY_PKTS ######## 
isCurrentBySim()=false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> * <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
org.iqiyi.video.ui.bf.h()<<*>> : 当前时间<*> 
c: true, w: false, t: false, l: false 
t:false, fl: false, p: <*>, ce: true, we: false 
m1: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
m1: false 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
org.iqiyi.video.vote.b.aux.a()<<*>> : checkVoteShowTime--><*> 
t:false, fl: false, p: <*>, ce: true, we: false 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
notifyInterfaceClassActivity: client is <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> = <*> 
ImsServiceSub : handleSsac voice = <*> 
mVSimCurCardType is -<*> 
[qiyi_LOG_INFO <*> <*> <*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
org.iqiyi.video.ui.ci.onProgressChanged()<<*>> : 当前进度：<*> 缓冲大小:<*> 缓冲进度：<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
querySoundEffectsEnabled... 
<*>-<*>-<*> <*>:<*>:<*>.<*> T:<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[qiyi_LOG_INFO Utility] isQiyiPackage <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> = <*> 
<*> | <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*>-<*>-<*> <*>:<*>:<*>.<*> T:<*> <*> <*> <*> <*> <*> 
msg = <*> received 
<*> <*> <*> <*> 
[qiyi_LOG_INFO Utility] isQiyiPackage PackageName:com.qiyi.video 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*>} <*>.<*>.<*>.<*> 
<*> <*> = <*> 
<*>-<*>-<*> <*>:<*>:<*>.<*> T:<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
[qiyi_LOG_INFO Utility] isQiyiPackage <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = false, <*> = false, <*> = false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.qiyi.video,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
setActionsBackground,null == view,mPrivateLayout 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
setActionsBackground,null == view,mPrivateLayout 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
<*> <*> <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] loadImage 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
<*>-<*>-<*> <*>:<*>:<*>.<*> T:<*> <*> <*> <*> 
<*> <*> <*> = <*> 
MyOrientationListener: updateRotation. 
<*> <*> <*> <*> is <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] loadImage 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] setEpisodeTitle 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] loadImage 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] setEpisodeTitle 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] loadImage 
<*> <*> <*> <*> <*> <*> 
<*>-<*>-<*> <*>:<*>:<*>.<*> T:<*> <*> <*> <*> <*> <*>, <*>, <*> 
get_android_log_exception_write comes... 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] setEpisodeTitle 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] setEpisodeTitle 
[qiyi_LOG_INFO DownloadEpisodeAdapter] localPath = /storage/emulated/<*>/Android/data/com.qiyi.video/files/<*>_<*>/<*>_<*>.jpg 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] setEpisodeTitle 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> in the <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
iqiyi message: create--runOnSubprocess isProcessExist true 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
isCardAbsent slot:<*> slotState:<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
<*> <*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
addNotification key=<*>|com.qiyi.video|<*>|null|<*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] localPath = /storage/emulated/<*>/Android/data/com.qiyi.video/files/<*>_<*>/<*>_<*>.jpg 
[qiyi_LOG_INFO DownloadEpisodeAdapter] localPath = /storage/emulated/<*>/Android/data/com.qiyi.video/files/<*>_<*>/<*>_<*>.jpg 
[qiyi_LOG_INFO DownloadEpisodeAdapter] loadImage 
<*> <*> <*> <*> <*> <*> <*> 
at com.android.providers.telephony.TelephonyProvider.query(TelephonyProvider.java:<*>) 
[qiyi_LOG_INFO DownloadEpisodeAdapter] setEpisodeTitle 
[qiyi_LOG_INFO DownloadEpisodeAdapter] loadImage 
[qiyi_LOG_INFO DownloadEpisodeAdapter] localPath = /storage/emulated/<*>/Android/data/com.qiyi.video/files/<*>_<*>/<*>_<*>.jpg 
[qiyi_LOG_INFO DownloadEpisodeAdapter] setEpisodeTitle 
[qiyi_LOG_INFO DownloadEpisodeAdapter] setEpisodeTitle 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
updateNotificationShade 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> 
setActionsBackground,null == view,mPrivateLayout 
<*> <*> <*> <*> <*> <*> 
setActionsBackground,null == <*> 
updateDimmedActivatedHideSensitive overlap:true 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] localPath = /storage/emulated/<*>/Android/data/com.qiyi.video/files/<*>_<*>/<*>_<*>.jpg 
[qiyi_LOG_INFO DownloadEpisodeAdapter] <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[qiyi_LOG_INFO DownloadEpisodeAdapter] setUnFinishedText:DownloadObject{albumId='<*>', tvId='<*>', <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> downloadRequestUrl='', displayType=TV_TYPE, fileSize=<*>, progress=<*>.<*>, status=FINISHED, clicked=<*>, videoDuration=<*>, clm='锦绣未央', _a_t='锦绣未央', episode=<*>, year='<*>', playRc=<*>, taskStatus=<*>, mNeedDel=<*>, isDownloadPlay=true, speed=<*>, errorCode='', downloadTime=<*>, _pc=<*>, auto=<*>, cid=<*>, <*> <*> <*> <*> <*> segidx='null', accelerate_speed0'} 
[qiyi_LOG_INFO DownloadEpisodeAdapter] setEpisodeTitle 
formatChinaDateTime equals. 
[qiyi_LOG_INFO DownloadEpisodeAdapter] localPath = /storage/emulated/<*>/Android/data/com.qiyi.video/files/<*>_<*>/<*>_<*>.jpg 
[qiyi_LOG_INFO DownloadEpisodeAdapter] setEpisodeTitle 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
<*> <*> <*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
[qiyi_LOG_INFO DownloadEpisodeAdapter] loadImage 
isCardAbsent slot:<*> slotState:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
######### CMD_QUERY_PKTS ######## 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> : <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> 
[qiyi_LOG_INFO Utility] isQiyiPackage PackageName:com.qiyi.video 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
[qiyi_LOG_INFO Utility] isQiyiPackage PackageName:com.qiyi.video 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
[qiyi_LOG_INFO Utility] isQiyiPackage PackageName:com.qiyi.video 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> = <*> <*> = <*> 
vel=<*>.<*>, MinimumFlingVelocity=<*> 
<*> <*> <*> <*> 
domain不匹配http://tyaqy.m.cn.miaozhen.com company.domain.url:s.cr-nielsen.com 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
Calling fingersense_touch_up() 
<*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> due to <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> --> <*> 
onEntryRemovedInternal:<*>|com.qiyi.video|<*>|null|<*>, group=<*>|com.qiyi.video|g:ranker_bundle 
moveTaskToTop mTaskChanged:true 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*>-<*>-<*> <*>:<*>:<*>.<*> T:<*> <*> <*> <*> <*> 
<*>-<*>-<*> <*>:<*>:<*>.<*> T:<*> DEBUG: <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> euid: <*> <*> 
<*> <*> <*> <*> <*> <*> euid: <*> <*> 
<*> <*> <*> <*> <*> <*> euid: <*> <*> 
<*> <*> <*> <*> <*> <*> euid: <*> <*> 
<*> <*> <*> <*> <*> u0 euid: <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
applyIconTint ignore 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> = <*>, <*> = <*> 
<*> <*> <*> 
<*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
<*> <*> <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> 
JNI_OnLoad->enter(puma) 
JNI_OnLoad->exit(puma) 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*>, <*> = false, <*> = false 
<*>-<*>-<*> <*>:<*>:<*>.<*> T:<*> <*> <*> <*> <*> 
<*> : <*> 
<*> : <*> 
<*> <*> : <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
qsc_send_cmd finish 
onAcquired <*> 
<*> <*> <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
<*> <*> <*> <*> <*> <*> screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
stopMonitoringMotionLocked() 
<*> <*> <*> <*> 
<*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> 
<*> <*> is null <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> is null <*> <*> 
<*> <*> <*> = <*> <*> = <*> <*> = <*> 
removeNotificationChildren 
<*> <*> <*> 
showNotificationAll 
showPrimarySecurityScreen(turningOff=false) 
<*> : <*> 
<*> <*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> : <*> false 
<*> <*> is null <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleNotifyScreenTurningOn 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
qsc_send_cmd finish 
set notification panel padding = <*> 
updateDimmedActivatedHideSensitive overlap:false 
KGSvcCall onScreenTurnedOn. 
<*> <*> <*> <*> <*> <*> <*> 
receive data len = <*> 
QSEECom_send_cmd return! 
receive data len = <*> 
call refreshData 
<*> is null <*> <*> 
<*> is null <*> <*> 
<*> is null <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> is null <*> <*> 
<*> is null <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bmp is null : false 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onShowStatusChange show:false 
onShowStatusChange show:false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
onScreenTurnedOff() 
<*> <*> <*> <*> 
<*> <*> = <*>, <*> = <*> 
onStartCommand 
msg = <*> received 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> : <*> 
<*> <*> : <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
msg = <*> received 
<*> <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Cache monitor msg as screen_off 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.qiyi.video,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> = <*> 
[DaemonReceiver] onReceive 
onTrimMemory level:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
iqiyi message: ==== isProcesssExist: stat=<*>, errno=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.open(Native Method) 
sending broadcast to Pid = <*>, Uid = <*> 
<*> <*> <*> 
<*>|calculateCaloriesWithCache datas.size=<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateTint: tint=<*> 
onNotificationExpansionChanged called 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> <*> <*> <*> --> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
LightSensor, <*> <*> <*> 
<*> <*> <*> <*> 
qsc_send_cmd finish 
onAuthenticated <*> 
<*> <*> <*> <*> <*> <*> <*> 
exit keyguard:<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> <*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> <*> <*> is <*> 
AppAutoStartupPolicy:prevent start receiver <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ash->screen unlock 
collapsePanel:false 
<*> <*> <*> <*> 
<*> = false 
setActionsBackground,null == <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> changed bounds; rebatching 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
AutoStartupDataMgr:isUnderControll third party not in <*> <*> 
<*> <*> <*> = false 
<*> <*> <*> <*> action = <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
receive data len = <*> 
<*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*>|REPORT : <*> <*> <*> <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
setAlarmsAdjust ... 
<*> <*> <*> <*> <*> 
updateSlider2 seekBarProgress:<*> 
stopNavigating, mStarted=false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
receive data len = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
receive data len = <*> 
<*> <*> <*> <*> <*> 
ContentChange for slot: <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Failure getting <*> <*> <*> <*> <*> (error <*>) 
<*> <*> <*> 
setActionsBackground,null == view,mPrivateLayout 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> bytes <*> <*> 
MyOrientationListener: updateRotation. 
<*>|before compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> = <*> 
<*> <*> = <*> 
<*> <*> <*> 
Change in state from: <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
write:userId=<*>,mPosBrightness =<*>.<*>,mOffsetBrightness_last=<*>.<*>,mIsUserChange=false,mDeltaNew=<*>.<*>,mStartLuxDefaultBrightness=<*>.0mLastLuxDefaultBrightness=<*>.<*>,mAmLux=<*>.<*> 
updateSlider2 seekBarProgress:<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
select_devices: done 
isCurrentBySim()=false 
<*>|after compensate: cache step_<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*>|after compensate: cache step_<*> 
updateTint: tint=<*> 
transferRemoteInputFocus: <*> 
NuPlayer::resetAsync() 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
removeNotificationChildren 
ImsSenderRxr : <*> = true <*> = <*> <*> = <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Handle message: <*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
AutoStartupDataMgr:isUnderControll third party not in <*> <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> code(<*>) 
<*> <*> = <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> u0 euid: <*> <*> euid: <*> 
<*> <*> <*> <*> <*> <*> not in the <*> <*> <*> <*> <*> 
<*> = <*> 
stopSelfIfIdle: STOP! 
<*> <*> <*> <*> <*> <*> <*> 
ImsServiceSub : <*> = <*> <*> = <*> <*> = true 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
isBetaStrategy 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
SimCardManager:onReceive()-- mNameServSlot<*> 
[main-<*>]AutoCheckReceiver onReceive(/AutoCheckReceiver.java:<*>) 
<*>|compensate <*> <*> 
<*>|after compensate: cache step_<*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
myPid: <*> 
<*> <*> <*> <*> 
action:android.intent.action.PRECISE_CALL_STATE, mPermissionType:<*> 
PstnIncomingCallNotifier: handleNewRingingConnection 
isCardAbsent slot:<*> slotState:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
action:android.intent.action.PHONE_STATE, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> Intent { <*> <*> (has extras) } <*> <*> <*> <*> <*> <*> <*> due to <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> <*> <*> 
[ReceiverUtils.disposeLogUploadProgress] 
<*> <*> <*> in the <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> is null 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> is <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateQsState:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*>|after compensate: cache step_<*> 
updateNotificationShade 
<*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> code(<*>) 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x3b,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> = <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
Destroying TransactionService 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotificationShade 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
enqueueNotificationInternal: <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
No peeking: <*> <*> <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*>|compensate <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
applyInPlace=true shouldPeek=false alertAgain=true 
updateNotificationShade 
removeNotificationChildren 
<*>|getTodayTotalSteps <*> 
updateNotificationShade 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
updateClipping isOverlap:true 
<*>|getTodayTotalSteps <*> 
<*> <*> = <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
showNotificationAll 
t:false, fl: false, p: <*>, ce: true, we: false 
<*>|compensate received 
No peeking: <*> <*> <*> 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
<*>|compensate <*> <*> 
<*>|before compensate: cache step_<*> 
<*>|compensate <*> <*> 
onStepCounterChange stepsNum:<*> 
updateNotificationShade 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
showNotificationAll 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
iqiyi message: create--runOnSubprocess isProcessExist true 
<*>|compensate <*> <*> 
<*>|after compensate: cache step_<*> 
updateNotificationShade 
removeNotificationChildren 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
at com.huawei.ecs.mip.proxy.TcpClientThread.connectSocket(TcpClientThread.java:<*>) 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
DisplayPowerState :OFF 
<*> <*> <*> <*> <*> 
updateTint: tint=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
onFinishedGoingToSleep(<*>) 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> = <*>, <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
generateAddAnimation:null, false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
showNotificationAll 
onNotificationExpansionChanged called 
begin 
updateNotificationShade 
qsc_send_cmd finish 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> type <*> when <*> <*> 
<*>|compensate <*> <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
<*> <*> <*> 
<*> <*> = <*> 
<*> action = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
action:com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver, mPermissionType:<*> 
Error reading charge file 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*>|REPORT : <*> <*> <*> <*> 
isWiredHeadsetOn... 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*>|compensate <*> <*> 
setColorTemperatureAccordingToSetting 
setColorTemperatureAccordingToSetting 
send data return = <*> 
onError(<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> 
mWakeupFromSleep= true,currentTime=<*>,mLightSensorEnableTime=<*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
removeNotification:<*>|com.android.incallui|<*>|null|<*> 
Display ready! 
<*> <*> <*> <*> <*> <*> in the <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
onDataActivity: direction=<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> 
msg = <*> received 
<*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
cancelNotificationLocked:<*>|com.android.incallui|<*>|null|<*> 
<*> <*> <*> due to <*> <*> <*> 
updateLightsLocked --> <*> <*> 
<*> action = <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> <*> <*> = false 
RCV <- {<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
ContentChange for slot: <*> 
ContentChange for slot: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|getTodayTotalSteps <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
back light level before map = <*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onEntryAdded:<*>|com.android.incallui|<*>|null|<*>, group=<*>|com.android.incallui|<*>|null|<*> 
<*> <*> <*> <*> <*> 
begin 
send data return = <*> 
RCV <- {<*> <*> <*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
begin 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
Unfinished business... 
action:InCallScreenIsForegroundActivity, mPermissionType:<*> 
updateLightsLocked --> <*> <*> 
<*> <*> <*> 
<*> action = <*> 
<*> <*> is <*> <*> <*> <*> <*> <*> <*> 
CommandQueue, setBarBackgroundColor 
<*> <*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
<*> <*> is null 
<*> <*> = <*> <*> <*> <*> = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onScreenTurnedOn() 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
mActiveIface: rmnet_data<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> <*> 
QSEECom_send_cmd return! 
transferRemoteInputFocus: <*> 
receive data len = <*> 
begin 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> <*> <*> <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
QSEECom_send_cmd return! 
qsc_decode end 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ContentChange for slot: <*> 
<*> <*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateCallLayout:isBackground=false, isInteractive=false 
restoreBackgroundColor:new=<*>, old=<*> 
onEntryRemoved:<*>|com.android.incallui|<*>|null|<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> 
<*> = <*> 
qsc_decode end 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
mSeekListener onProgressChanged progress:<*> fromUser:false 
qsc_send_cmd finish 
qsc_send_cmd finish 
begin 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
OverscanTimeout run 
<*> <*> <*> <*> <*> 
AwareMem_DMEServer: stop 
<*> <*> is <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> = <*>, <*> = <*> 
updateTint: tint=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
onFinishedGoingToSleep(<*>) 
<*> <*> = <*>, <*> <*> 
onFinishedGoingToSleep 
<*> <*> <*> <*> <*> <*> <*> <*> 
setExcludeFromRecents:pkgName=null 
<*> <*> = <*> <*> <*> <*> <*> <*> <*> is <*> 
<*> <*> <*> <*> <*> <*> <*> 
updateBarBgColor:emuiStyle=<*>,statusBarColor=#<*>,navigationBarColor=#<*>, isEmuiLight=-<*> 
statusBarIconTint=#B3FFFFFF,navigationBarIconTint=#<*> 
Change to single clock mode! 
remove(null) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> 
setScrollingEnabled: true 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> 
LightSensor, enable, <*>: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = false 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
No peeking: <*> <*> <*> 
onNotificationExpansionChanged called 
<*> <*> <*> <*> 
notifyStartedWakingUp 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
notifyUiVisibilityChanged:vis=0xc0000300, SystemUiVisibility=0xc<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
disableEffects=null canInterrupt=false once update: false 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
removeNotification:<*>|com.android.incallui|<*>|null|<*> 
updateNotificationShade 
<*> <*> <*> <*> 
mIntentReceiver-ACTION_SCREEN_OFF 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
VolumeDialogController.Callbacks onScreenOff 
OverscanTimeout run 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
action:android.intent.action.SCREEN_ON, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
handledataswitchchanged 
<*> <*> <*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> 
List [] 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onStepCounterChange stepsNum:<*> 
<*> - <*> is null 
<*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> <*> <*> <*> <*> 
DisplayPowerState :ON 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
onStartedWakingUp 
begin 
QSEECom_send_cmd return! 
<*> <*> <*> 
mNotifyStateChangedReceiver::onReceive:action=InCallScreenIsForegroundActivity, mBackgroundState=false 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
begin 
updateLightsLocked --> <*> <*> 
<*> <*> <*> <*> <*> 
fpc_tac_send_set_arbitrary_data_cmd:ok, response:<*> 
<*> <*> <*> 
mActiveIface: rmnet_data<*> 
receive data len = <*> 
disableGps:false isEnabled()=true 
QSEECom_send_cmd return! 
receive data len = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
scheduleLightAlarmLocked(<*>) 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
setColorTemperatureAccordingToSetting 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
<*> <*> <*> 
handleNotifyWakingUp 
onStartedWakingUp 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> = false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
cancelNotification,index:<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
updateTint: tint=<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> 
<*> <*> <*> = false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
<*> <*> = true 
<*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
updateDimmedActivatedHideSensitive overlap:true 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Create obj success use class android.app.HwCustNotificationImpl 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
<*> <*> <*> 
StatusBarNotifier - <*> <*> <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
stepAtomic 
updateNotificationShade 
hideScrim() 
updateDimmedActivatedHideSensitive overlap:true 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> Intent { <*> <*> (has extras) } <*> <*> <*> <*> <*> <*> <*> due to <*> <*> <*> <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> in the <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> : <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> due to <*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
audio_extn_get_parameters: returns 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
<*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> 
<*> <*> id = <*> = <*> <*> = <*> 
setRegistedNetwork <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> 
report state:<*> event type:<*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> <*> <*> <*> <*> is <*> 
<*> <*> <*> <*> =<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> = <*> <*> = <*> <*> = <*> <*> = <*> 
stopFilter m_filterIsStarted:false 
<*> <*> <*> code(<*>) 
<*> <*> <*> is not <*> <*> <*> = <*> 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
stopInComingMotionsReco ... 
flush:sensor(android.sensor.step_counter) handle:<*> 
<*> <*> <*> <*> <*> 
ScreenState present 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
received cell-signal:<*> 
<*> <*> <*> <*> <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver <*> <*> <*> <*> <*> <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> <*> <*> is <*> 
Change to single clock mode! 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> = <*> 
<*> <*> <*> = <*> 
setChrInfo2Db begin 
Split enqueueing broadcast <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
StartupResidentService:InnerHandler Message:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onDataActivity: direction=<*> 
<*> <*> <*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> is <*> 
<*> <*> <*> <*> <*> <*> 
ImsSenderRxr : <*> <*> <*> <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> euid: <*> 
[main-<*>]Network available(hwouc/DownloadReceiver.java:<*>) 
[main-<*>]AutoCheckReceiver onReceive(/AutoCheckReceiver.java:<*>) 
<*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
AwareMem_DMEServer: start 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
<*> is <*> 
<*> <*> <*> is not <*> <*> <*> = <*> 
<*> <*> = <*>, <*> = <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> <*> <*> is <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
updateSlider2 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> 
ContentChange for slot: <*> 
<*> <*> Intent { <*> <*> <*> <*> 
<*> <*> : <*> 
<*> <*> <*> <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
List [] 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> failed to <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*>|getTodayTotalSteps <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider1 seekBarProgress:<*> 
at android.content.ContentProvider$Transport.call(ContentProvider.java:<*>) 
fingersense_classify_touch() finished 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
No peeking: <*> <*> <*> 
querySoundEffectsEnabled... 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> <*> <*> 
Create obj success use class <*> 
obtain, mHwFlags=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<*> <*> due to <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Create obj success use class <*> 
<*> <*> <*> 
Skipping, withExcluded: false, <*> <*> <*> <*> <*> <*> <*> (has extras) } 
[DaemonStrategy23] sendBroadcastByAmsBinder 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
at android.database.sqlite.SQLiteDatabase.open(SQLiteDatabase.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*>|compensate <*> <*> 
<*>|after compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
[CheckNewVersionThread-<*>]retrieve newversioninfo.xml: 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
bmp is null : false 
<*> <*> <*> <*> <*> <*> (has extras) } 
syncCalendar begin! 
Create obj success use class android.app.HwCustNotificationImpl 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
action:null, mPermissionType:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
<*> <*> <*> temp_old :<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*>|before compensate: cache step_<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*>|REPORT : <*> <*> <*> <*> 
<*>|rebuild notification 
onStepCounterChange stepsNum:<*> 
disableEffects=null canInterrupt=false once update: false 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
showNotificationAll 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> = <*> 
<*>|onStandStepChanged <*> 
<*>|REPORT : <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
updateLightsLocked --> mBatteryLight.turnOff 
setActionsBackground,null == <*> 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
updateClipping isOverlap:true 
updateClipping isOverlap:true 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, <*> <*> <*> 
state.clipTopAmount:<*>, i:<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
Provider.call: getPrefString 
<*> need to <*> <*> 
[StartupguideUtils.isScreenLocked]isScreenLocked=true 
send data return = <*> 
<*> <*> <*> <*> <*> <*> 
send data return = <*> 
[ChrServiceUtils.isMethodSupported]Method/Supported:getModemLogStatus/true 
updateTint: tint=<*> 
onEntryAdded:<*>|com.qiyi.video|<*>|group_key_override|<*>|ranker_bundle, group=<*>|com.qiyi.video|g:ranker_bundle 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
updateNotificationShade 
removeNotificationViews:<*>|com.qiyi.video|<*>|null|<*> 
[HttpClient.postDataWithRetryNoLogin] success 
<*> <*> <*> <*> <*> : <*> 
updateDimmedActivatedHideSensitive overlap:false 
updateClipping isOverlap:false 
<*> <*> <*> = <*> 
<*> <*> <*> <*> = <*>, <*> <*> <*> <*> = false 
obtain, mHwFlags=<*> 
state.clipTopAmount:<*>, i:<*> 
action:com.android.systemui.statusbar.visible.change, mPermissionType:<*> 
makeExpandedInvisible: mExpandedVisible=true 
<*>|after compensate: cache step_<*> 
<*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
fingersense_classify_touch() finished 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> = <*> 
QSEECom_send_cmd return! 
receive data len = <*> 
receive data len = <*> 
qsc_decode end 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
at com.huawei.keyguard.util.BitmapUtils.getColorInfo(BitmapUtils.java:<*>) 
loadType:<*> 
updateDisplayLocked: screenOn=false 
<*>|after compensate: cache step_<*> 
mIntentReceiver begin 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
collapseAllGroups: 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Handle message: <*> 
<*> <*> <*> 
<*> <*> is null <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
updateNotificationShade 
ash->screen off 
hideTraffic 
Handle message: <*> 
<*> <*> <*> <*> 
<*>|rebuild notification 
transferRemoteInputFocus: <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
mSimSubId:<*> onDataActivity: direction=<*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
at java.io.FileInputStream.open(Native Method) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
Error reading charge file 
hw_set_colortemperature: end-- 
<*> <*> <*> <*> <*> <*> screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
onAuthenticated(fid=<*>, gid=<*>) 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Fingerprint timeout 
<*> <*> <*> <*> 
removeSensor,mHandles:{} 
Animating brightness: target=<*>, rate=<*> 
send data return = <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> <*> <*> <*> 
<*> <*> <*> 
updateNotificationShade 
makeExpandedInvisible: mExpandedVisible=true 
CollectorManager--isCollectorEnabled--getBoolean: false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
isSimPinSecure mSimDatas is null or empty 
loadMagazine 
showTraffic 
mIntentReceiver-ACTION_SCREEN_ON 
<*> <*> <*> <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
updateClipping isOverlap:false 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
begin 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
<*> <*> Intent { <*> <*> (has extras) } 
qsc_send_cmd finish 
receive data len = <*> 
m1: false 
transferRemoteInputFocus: <*> 
Calling fingersense_touch_up() 
<*> <*> <*> <*> <*> 
Launcher onPause() 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> = <*> 
search 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*>|getTodayTotalSteps <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
removeNotificationChildren 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotificationShade 
Client requesting input be hidden, pid=<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onStepCounterChange stepsNum:<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
<*>|after compensate: cache step_<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
disableEffects=null canInterrupt=false once update: false 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
Calling fingersense_classify_touch() 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
<*> <*> due to <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> eventTime=<*>, downTime=<*>, deviceId=<*>, <*> <*> 
<*> <*> <*> 
<*> <*> due to <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> eventTime=<*>, downTime=<*>, deviceId=<*>, <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
showNotificationAll 
QSEECom_send_cmd return! 
receive data len = <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
at com.huawei.keyguard.support.magazine.MagazineWallpaper$<*>.onMagazinePicLoaded(MagazineWallpaper.java:<*>) 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> 
handleNotifyScreenTurnedOff 
<*>|compensate received 
Reset 
onShowStatusChange show:false 
updateNotificationShade 
<*> <*> <*> 
Sending <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> is null <*> 
resetCommute 
<*> <*> <*> <*> <*> <*> 
handle_exception_events enter 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
onCellLocationChanged 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
No peeking: not in <*> <*> 
<*> <*> <*> <*> <*> 
Handle message: <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Cache monitor msg as screen_off 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> is not <*> <*> <*> = <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateClipping isOverlap:false 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*>|calculateCaloriesWithCache totalCalories=<*> 
updateTint: tint=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
onShowStatusChange show:false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
RCV <- {<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<*>|REPORT : <*> <*> <*> <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
hideTraffic 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
updateTint: tint=<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Error reading charge file 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> to open <*> due to <*> <*> <*> <*> = <*> is <*> <*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
onShowStatusChange show:false 
<*> <*> <*> <*> <*> <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*>|onStandStepChanged <*> 
c: true, w: false, t: false, l: false 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
ImsSenderRxr : <*> = true <*> = <*> <*> = <*> <*> <*> <*> 
<*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> 
updateDataConnectionState: state=<*>,networkType=<*> 
shouldBlockLocation ret:false 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
applyIconTint ignore 
getTypeIcon type:<*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = false, <*> = false 
RCV <- {<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
[PhoneIntfMgr] <*> <*> <*> 
<*> <*> <*> u0 euid: <*> <*> euid: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> is null <*> <*> <*> <*> <*> <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
Timer---run(), remainTime=<*> 
<*> <*> <*> temp_old :<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
CollectorManager--isCollectorEnabled--getBoolean: false 
CollectorManager--isCollectorEnabled--getBoolean: false 
<*> <*> <*> <*> <*> 
csr 
shouldBlockLocation ret:false 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
csr 
m1: false 
<*> <*> <*> <*> <*> <*> 
<*> <*> ==================== TCP CLIENT CLEAR ALL ==================== 
<*> <*> <*> <*> 
at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<*>) 
<*> <*> <*> <*> <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
Sending non-protected broadcast <*> from system <*> <*> <*> 
<*> <*> <*> <*> =<*> 
at java.io.FileInputStream.open(Native Method) 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
action:qualcomm.intent.action.ACTION_AUDIO_STATE_CHANGED, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> is null 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> is <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
Handle message: <*> 
<*>|getTodayTotalSteps <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
<*>|compensate <*> <*> 
onStepCounterChange stepsNum:<*> 
Create obj success use class <*> 
<*> <*> <*> <*> 
<*>|compensate <*> <*> 
<*>|compensate received 
<*>|compensate <*> <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
imeVis=false 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
addSensor,mHandles:{<*>=<*>} 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
updateTint: tint=<*> 
StatusBarNotifier - <*> <*> <*> 
hideTraffic 
LightSensor, enable, <*>: <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
Cache monitor msg as screen_off 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> 
generateAddAnimation:null, false 
updateDisplayLocked: screenOn=false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateTint: tint=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onEntryUpdated:<*>|com.android.incallui|<*>|null|<*> 
<*> <*> <*> 
setBackgroundColor:new=<*>, old=<*> 
updateBarBgColor:emuiStyle=<*>,statusBarColor=#<*>,navigationBarColor=#<*>, isEmuiLight=<*> 
notifyScreenOn 
onStartedWakingUp 
<*> <*> <*> 
<*> : <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x2b,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*>|rebuild notification 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
dumpTrace::setTracingEnabled: false 
<*> <*> <*> <*> <*> <*> 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
Calling fingersense_classify_touch() 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Calling fingersense_classify_touch() 
updateTint: tint=<*> 
Calling fingersense_touch_up() 
getTempInfo error: null, <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Error reading charge file 
Calling fingersense_touch_up() 
Calling fingersense_touch_up() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x2b,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|before compensate: cache step_<*> 
<*>|REPORT : <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
updateClipping isOverlap:true 
<*>|onStandStepChanged <*> 
<*>|after compensate: cache step_<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*>|getTodayTotalSteps <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
transferRemoteInputFocus: <*> 
fingersense_touch_up() finished 
<*>|onStandStepChanged <*> 
Calling fingersense_touch_up() 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*>|compensate <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x2b,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|before compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
<*>|before compensate: cache step_<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|compensate received 
Create obj success use class android.app.HwCustNotificationImpl 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x2b,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
fingersense_classify_touch() finished 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> 
<*>|before compensate: cache step_<*> 
onStepCounterChange stepsNum:<*> 
disableEffects=null canInterrupt=false once update: false 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
<*> <*> <*> <*> =<*> 
<*> exit with code(<*>) 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> u0 euid: <*> <*> euid: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Split enqueueing broadcast <*> <*> 
updateNotificationShade 
removeNotificationChildren 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
<*> <*> due to no <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> eventTime=<*>, downTime=<*>, deviceId=<*>, <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateClipping isOverlap:false 
<*> <*> due to no <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> eventTime=<*>, downTime=<*>, deviceId=<*>, <*> <*> 
<*> action = <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> is not <*> 
<*> <*> due to no <*> <*> <*> <*> <*> <*> <*> x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
[PhoneIntfMgr] <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[PhoneIntfMgr] <*> <*> <*> 
shouldBlockLocation ret:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> = <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
showNotificationAll 
[PhoneIntfMgr] <*> <*> <*> 
[PhoneIntfMgr] <*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
m1: false 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> in the <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> <*> x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
hideTraffic 
<*> <*> <*> <*> <*> = <*> 
hideTraffic 
c: true, w: false, t: false, l: false 
<*> <*> <*> in the <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
set notification panel padding = <*> 
[main-<*>]Network available(hwouc/DownloadReceiver.java:<*>) 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
[main-<*>]/checkVersionPackageType/(hwouc/HwOucUtility.java:<*>) 
<*> <*> <*> <*> 
<*> <*> is null <*> <*> <*> 
HiWiService stopself 
onShowStatusChange show:false 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> = <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
StartupResidentService:InnerHandler Message:<*> 
<*> <*> due to no <*> <*> <*> <*> <*> <*> <*> x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
<*> <*> <*> 
######### CMD_QUERY_PKTS ######## 
querySoundEffectsEnabled... 
<*> <*> due to no <*> <*> <*> <*> <*> <*> <*> x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
<*> event due to no window focus: <*> <*> <*> <*> <*> x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
<*>|before compensate: cache step_<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
updateNotificationShade 
<*> event due to no window focus: <*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
m1: false 
Cancelling event due to no window focus: <*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> is not <*> <*> <*> <*> <*> <*> <*> 
OEMINFO_TPCOLOR_TYPE FAIL! 
updateTint: tint=<*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> <*> 
<*>|onStandStepChanged <*> 
onStepCounterChange stepsNum:<*> 
Calling fingersense_classify_touch() 
<*>|after compensate: cache step_<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
Destroying TransactionService 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> is not <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
updateTint: tint=<*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> pid: <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> id = <*> 
<*>|after compensate: cache step_<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
updateTint: tint=<*> 
transferRemoteInputFocus: <*> 
getRemainingChance <*> 
<*>|compensate received 
sendMessage <*> 
set notification panel padding = <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> 
updateTint: tint=<*> 
removeNotificationChildren 
hideTraffic 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
querySoundEffectsEnabled... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateNotificationShade 
<*>|compensate received 
<*>|after compensate: cache step_<*> 
<*> <*> <*> <*> <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
setKeyguardEnabled(true) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
state.clipTopAmount:<*>, i:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
updateNotificationShade 
Handle message: <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*>|getTodayTotalSteps <*> 
removeNotificationChildren 
updateDimmedActivatedHideSensitive overlap:true 
<*> failed to <*> <*> <*> 
HwLocationManager:onLocationChanged.ThirdLocation 
at android.database.sqlite.SQLiteConnectionPool.open(SQLiteConnectionPool.java:<*>) 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onClockLocationChange 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
sendMessage <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
action:com.huawei.android.action.launcher_weather_icon_change, mPermissionType:<*> 
querySoundEffectsEnabled... 
<*>|before compensate: cache step_<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
resp->status: -<*> 
<*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
removeNotificationChildren 
chinaDateTime:晚上<*>:<*> 
<*>|onStandStepChanged <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.tencent.mm,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> 
<*>|compensate received 
<*>|REPORT : <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|getTodayTotalSteps <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
hideTraffic 
Handle message: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|REPORT : <*> <*> <*> <*> 
<*>|rebuild notification 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
readPasswordHash ok 
updateTint: tint=<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*>|REPORT : <*> <*> <*> <*> 
onStepCounterChange stepsNum:<*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> 
######### CMD_QUERY_PKTS ######## 
send_cmd_kernel: cmd=<*> 
onStepCounterChange stepsNum:<*> 
removeNotificationChildren 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
fingersense_touch_up() finished 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
querySoundEffectsEnabled... 
<*> <*> <*> <*> 
removeNotificationChildren 
state.clipTopAmount:<*>, i:<*> 
<*>|before compensate: cache step_<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
hideTraffic 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*>|getTodayTotalSteps <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Handle message: <*> 
querySoundEffectsEnabled... 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
disableEffects=null canInterrupt=false once update: false 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
m1: false 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> <*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
onStepCounterChange stepsNum:<*> 
updateDimmedActivatedHideSensitive overlap:true 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|compensate received 
<*>|after compensate: cache step_<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
t:false, fl: false, p: <*>, ce: true, we: false 
<*>|compensate received 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
<*>|compensate received 
<*>|compensate <*> <*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
Handle message: <*> 
<*>|onStandStepChanged <*> 
<*>|rebuild notification 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
hideTraffic 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
updateDimmedActivatedHideSensitive overlap:true 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
querySoundEffectsEnabled... 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
updateTint: tint=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotificationShade 
removeNotificationChildren 
<*>|onStandStepChanged <*> 
hideTraffic 
querySoundEffectsEnabled... 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
<*>|compensate <*> <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
Create obj success use class android.app.HwCustNotificationImpl 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
at org.json.JSONObject.<init>(JSONObject.java:<*>) 
at android.os.Looper.loop(Looper.java:<*>) 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*>|before compensate: cache step_<*> 
Create obj success use class android.app.HwCustNotificationImpl 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Calling fingersense_touch_up() 
<*>|compensate received 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*>|getTodayTotalSteps <*> 
<*>|rebuild notification 
Create obj success use class android.app.HwCustNotificationImpl 
Calling fingersense_touch_up() 
onStepCounterChange stepsNum:<*> 
<*>|rebuild notification 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
Create obj success use class android.app.HwCustNotificationImpl 
sendMessage <*> 
<*>|getTodayTotalSteps <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
state.clipTopAmount:<*>, i:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> H! 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
showNotificationAll 
querySoundEffectsEnabled... 
<*>|compensate received 
updateTint: tint=<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
skip input. 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
<*>|rebuild notification 
<*>|rebuild notification 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|onStandStepChanged <*> 
<*>|compensate <*> <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
updateTint: tint=<*> 
<*>|after compensate: cache step_<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
hideTraffic 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*>|before compensate: cache step_<*> 
updateTint: tint=<*> 
sendMessage <*> 
<*> <*> <*> <*> <*> <*> 
skip input. 
disableEffects=null canInterrupt=false once update: false 
<*> <*> <*> <*> <*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
updateClipping isOverlap:true 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
state.clipTopAmount:<*>, i:<*> 
updateDimmedActivatedHideSensitive overlap:true 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*>|getTodayTotalSteps <*> 
transferRemoteInputFocus: <*> 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
onStepCounterChange stepsNum:<*> 
updateNotificationShade 
<*>|getTodayTotalSteps <*> 
updateNotificationShade 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> <*> <*> <*> <*> <*> H! 
disableEffects=null canInterrupt=false once update: false 
updateTint: tint=<*> 
state.clipTopAmount:<*>, i:<*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*>|compensate <*> <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
send: <*> 
Calling fingersense_touch_up() 
sendMessage <*> 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sendMessage <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*>|before compensate: cache step_<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> pid: <*> <*> <*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*>|compensate <*> <*> 
isCurrentBySim()=false 
updateTint: tint=<*> 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*>|compensate <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
state.clipTopAmount:<*>, i:<*> 
Handle message: <*> 
m1: false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
updateNotificationShade 
handleKeyguardDoneDrawing 
<*>|REPORT : <*> <*> <*> <*> 
set notification panel padding = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
removeNotificationChildren 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|onStandStepChanged <*> 
onScreenTurnedOff() 
<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>, 
<*> <*> <*> <*> <*> <*> <*> 
becomeInactiveIfAppropriateLocked() 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
onFinishedGoingToSleep(<*>) 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> = true 
onShowStatusChange show:false 
<*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> is null <*> 
<*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
updateClipping isOverlap:false 
<*> <*> <*> temp_old :<*> 
<*>|calculateCaloriesWithCache totalCalories=<*> 
sending broadcast to Pid = <*>, Uid = <*> 
notifyInterfaceClassActivity: client is <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*>|MSG_RECORD_DATA_TO_FILE 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> 
setAlarmsAdjust ... 
action:com.tencent.mm.ACTION.note_tracemsg_unlock, mPermissionType:<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
<*>|getTodayTotalSteps <*> 
<*> action = <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*>|getTodayTotalSteps <*> 
onShowStatusChange show:false 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*>|calculateCaloriesWithCache datas.size=<*> 
mobile iface:rmnet_data<*> 
showNotificationAll 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
parsed ip:<*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|rebuild notification 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
RCV <- {<*> IfaceClass idle <*> <*>} 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
updateTint: tint=<*> 
removeNotificationChildren 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> <*> <*> bytes <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
connect :true 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
c: true, w: false, t: false, l: false 
need to <*> <*> <*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*> <*> <*> = false 
<*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
<*> <*> <*> <*> 
Handle message: <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onShowStatusChange show:false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
getTempInfo error: null, <*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> ==================== TCP CLIENT <*> <*> 
<*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*>|getTodayTotalSteps <*> 
showNotificationAll 
at java.io.FileInputStream.open(Native Method) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
onShowStatusChange show:false 
Split enqueueing broadcast <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> <*> <*> <*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
handleLteCaStatusChange 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
<*> what = <*> 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
readRilMessage: Buffer = [B@204bb9f <*> <*> <*> 
<*> <*> = <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Create obj success use class android.app.HwCustNotificationImpl 
hideTraffic 
<*> <*> <*> <*> <*> <*> 
Create obj success use class <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> data: [<*>, <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> pid: <*> <*> <*> 
<*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
at java.io.FileInputStream.open(Native Method) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
updateTint: tint=<*> 
. 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> to open <*> due to <*> <*> <*> <*> = <*> is <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
refreshBatteryInfo: null 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> <*> <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> 
AFTER CALLBACK 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> <*> <*> 
onShowStatusChange show:false 
updateDimmedActivatedHideSensitive overlap:false 
proxy app:com.android.browser,uid:<*>,result:true 
<*> <*> Intent { <*> <*> (has extras) } 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>} <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> is closed 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*>|MSG_RECORD_DATA_TO_FILE 
<*>|calculateCaloriesWithCache totalCalories=<*> 
onStepCounterChange stepsNum:<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
disableEffects=null canInterrupt=false once update: false 
<*> <*> <*> <*> <*> 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
poll before: g_monitor_fd =<*> 
<*>|REPORT : <*> <*> <*> <*> 
sendMessage <*> 
hideTraffic 
Error reading charge file 
Error reading charge file 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
csr 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
received cell-signal:<*> 
isMusicActive... 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
MSG_QUERY_TCP_INFO called,count:<*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
Change to single clock mode! 
<*>|compensate <*> <*> 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> data: [<*>, <*> 
onCellLocationChanged 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*>|rebuild notification 
sendMessage <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
readRilMessage: Buffer = [B@204bb9f <*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*>|getTodayTotalSteps <*> 
<*>|before compensate: cache step_<*> 
<*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
chinaDateTime:晚上<*>:<*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
onShowStatusChange show:false 
<*>|REPORT : <*> <*> <*> <*> 
updateNotificationShade 
<*>|calculateCaloriesWithCache totalCalories=<*> 
<*>|getTodayTotalSteps <*> 
updateTint: tint=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
<*>|compensate received 
<*>|before compensate: cache step_<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
showNotificationAll 
<*> <*> <*> is not <*> <*> <*> <*> 
isCurrentBySim()=false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
c: true, w: false, t: false, l: false 
<*>|getTodayTotalSteps <*> 
<*>|compensate <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
sendMessage <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> 
<*> <*> <*> 
action:huawei.intent.action.IMS_SERVICE_STATE_CHANGED, mPermissionType:<*> 
<*> what = <*> 
ImsSenderRxr : <*> <*> <*> <*> <*> 
ImsSenderRxr : <*> = true type = <*> <*> = <*> <*> <*> <*> 
sending broadcast to Pid = <*>, Uid = <*> 
applyIconTint 
ImsServiceSub : <*> <*> = <*> <*> = <*> <*> = <*> <*> = <*> 
removeCallbacksAndMessages end 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
getTypeIcon type:<*> 
Calling a method in the system process without a <*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
isCardAbsent slot:<*> slotState:<*> 
<*>|onStandStepChanged <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> = <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
action:android.intent.action.PRECISE_DATA_CONNECTION_STATE_CHANGED, mPermissionType:<*> 
onCallStateChanged: callState:<*> 
StartupResidentService:InnerHandler Message:<*> 
[ReceiverUtils.launchNotificationPollService]Start 
StartupResidentService:InnerHandler Message:<*> 
<*> <*> <*> <*> 
action:android.intent.action.ANY_DATA_STATE, mPermissionType:<*> 
StartupResidentService:InnerHandler Message:<*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
getNumberLocationResultAsync getGeoNumLocation 
shouldBlockLocation running ... 
<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
<*> is -<*> 
[LogSendProgressReceiver.onReceive]Start! 
<*> <*> <*> <*> <*> <*> 
updateTint: tint=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
disableEffects=null canInterrupt=false once update: false 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
<*> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
StatusBarNotifier - <*> <*> <*> <*> in the <*> <*> <*> 
StatusBarNotifier - <*> <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
Create obj success use class <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> enable, <*>: <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*>|getTodayTotalSteps <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
onEntryAdded:<*>|com.android.incallui|<*>|null|<*>, group=<*>|com.android.incallui|<*>|null|<*> 
showNotificationAll 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> 
Create obj success use class <*> 
simCount:<*> phoneState:<*> 
<*> <*> <*> 
sendMessage <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
onNotificationExpansionChanged called 
<*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
sendKeyguardReset 
isMobileDataEnable::dateEnable=true, cotrollerEnable=true 
updateClipping isOverlap:true 
instantCollapse 
<*> <*> <*> <*> 
updateBarBgColor:emuiStyle=<*>,statusBarColor=#<*>,navigationBarColor=#<*>, isEmuiLight=<*> 
notifyUiVisibilityChanged:vis=0xc0000700, SystemUiVisibility=0xc<*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> <*> <*> 
applyIconTint ignore 
<*> <*> <*> <*> 
c: true, w: false, t: false, l: false 
Create obj success use class <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> = <*> pid = <*> 
<*> exit with code(<*>) 
<*> <*> <*> <*> 
<*> <*> ==================== TCP CLIENT <*> <*> 
dumpTrace::setTracingEnabled: false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*>|compensate <*> <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
updateDimmedActivatedHideSensitive overlap:true 
updateRotationUnchecked(alwaysSendConfiguration=false) 
<*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
removeNotificationChildren 
MyOrientationListener: updateRotation. 
<*> <*> <*> <*> <*> win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
######### CMD_QUERY_PKTS ######## 
showNotificationAll 
<*> <*> <*> 
<*>|compensate received 
onProposedRotationChanged, rotation=<*> 
<*>|REPORT : <*> <*> <*> <*> 
onStepCounterChange stepsNum:<*> 
updateRotationUnchecked(alwaysSendConfiguration=false) 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateRotationUnchecked(alwaysSendConfiguration=false) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateRotationUnchecked(alwaysSendConfiguration=false) 
<*>|getTodayTotalSteps <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
<*> <*> <*> 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
applyInPlace=true shouldPeek=false alertAgain=true 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> 
null 
######### CMD_QUERY_PKTS ######## 
showNotificationAll 
<*> <*> <*> 
<*>|before compensate: cache step_<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateRotationUnchecked(alwaysSendConfiguration=false) 
Create obj success use class android.app.HwCustNotificationImpl 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
removeNotificationChildren 
<*> <*> <*> <*> <*> win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
updateTint: tint=<*> 
<*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateDimmedActivatedHideSensitive overlap:true 
onProposedRotationChanged, rotation=<*> 
updateClipping isOverlap:true 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*>|getTodayTotalSteps <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
<*> <*> : <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|compensate received 
<*>|getTodayTotalSteps <*> 
<*>|rebuild notification 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*>|REPORT : <*> <*> <*> <*> 
<*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
updateTint: tint=<*> 
at java.net.Inet6AddressImpl.lookupAllHostAddr(Inet6AddressImpl.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
<*> <*> <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
removeNotificationChildren 
updateRotationUnchecked(alwaysSendConfiguration=false) 
<*>|compensate received 
onProposedRotationChanged, rotation=<*> 
updateTint: tint=<*> 
updateClipping isOverlap:true 
<*>|getTodayTotalSteps <*> 
<*>|before compensate: cache step_<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateDimmedActivatedHideSensitive overlap:true 
updateRotationUnchecked(alwaysSendConfiguration=false) 
<*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateRotationUnchecked(alwaysSendConfiguration=false) 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
m1: false 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
showNotificationAll 
<*>|compensate <*> <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
onProposedRotationChanged, rotation=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*>|compensate received 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
transferRemoteInputFocus: <*> 
transferRemoteInputFocus: <*> 
MyOrientationListener: updateRotation. 
<*>|onStandStepChanged <*> 
<*>|before compensate: cache step_<*> 
<*> <*> <*> <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> 
showNotificationAll 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
updateDimmedActivatedHideSensitive overlap:true 
<*>|after compensate: cache step_<*> 
disableEffects=null canInterrupt=false once update: false 
m1: false 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
<*>|compensate <*> <*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
updateNotificationShade 
updateRotationUnchecked(alwaysSendConfiguration=false) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x2b,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x2b,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
isFailCall:true, mCallReasonFromAP:<*> 
getOrInflateState subId:<*> 
ImsSenderRxr : [UNSL]< <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateLightsLocked --> mBatteryLight.turnOff 
GetProtocolFailCause failed. 
<*>|compensate received 
<*> <*> <*> = <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> uid: <*>, <*> <*> 
action:com.android.huawei.broadcast.HwRepairHelper, mPermissionType:<*> 
Sending non-protected broadcast <*> from system <*> <*> <*> 
<*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
<*> <*> <*> <*> <*> <*> 
resetStateLocked 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> : <*> false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> : <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
setColorTemperatureAccordingToSetting 
hw_get_smart_display_supported: end-- 
<*> <*> <*> 
updateQsState:false 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> <*> is <*> 
<*> - <*> <*> 
InCallPresenter - <*> <*> <*> <*> <*> <*> 
<*> <*> <*> true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
disableEffects=null canInterrupt=false once update: false 
<*> = false 
<*> <*> = true 
<*> <*> = <*> 
<*> <*> <*> <*> 
setOccluded false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.Looper.loop(Looper.java:<*>) 
<*> <*> <*> 
<*> enable, <*>: <*> 
updateNotificationShade 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> <*> <*> 
onProposedRotationChanged, rotation=<*> 
action:android.intent.action.ANY_DATA_STATE, mPermissionType:<*> 
<*> <*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
StatusBarNotifier - <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> not supported <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onShowStatusChange show:false 
<*> <*> = false 
<*> <*> <*> 
<*> true , <*> <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
<*> <*> <*> 
generateAddAnimation:null, false 
Skipping, withExcluded: false, <*> <*> <*> <*> <*> (has extras) } 
Skipping, withExcluded: false, <*> <*> <*> <*> <*> <*> <*> (has extras) } 
notifyUiVisibilityChanged:vis=0x8608, SystemUiVisibility=0x<*> 
<*> <*> = <*> 
<*> = false 
<*> <*> <*> <*> <*> <*> <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> <*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
ImsSenderRxr : <*> = <*> <*> = <*> <*> = <*> <*> <*> <*> 
ImsSenderRxr : <*> = true type = <*> <*> = <*> <*> <*> <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sendMessage <*> 
<*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
isNetworkAvailable::netInfo isConnected! 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> euid: <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
networkAvailable=true 
Handle message: <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
msg = <*> received 
ImsSenderRxr : <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
is3GCalling is false,mCdmaSlot is -<*> 
received cell-signal:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> is null <*> <*> <*> 
[main-<*>]initTopActivityList.(hwouc/HwOucConfig.java:<*>) 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> failed to <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> is <*> 
<*> <*> <*> <*> <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> <*> 
CallObjectMethod end 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
transferRemoteInputFocus: <*> 
[main-<*>]HwOUCSearchIndexablesProvider onCreate(/HwOUCSearchIndexablesProvider.java:<*>) 
<*> <*> is null <*> <*> <*> 
<*> <*> <*> <*> 
[main-<*>]HwOucApplication--onCreate, end(hwouc/HwOucApplication.java:<*>) 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> to open <*> due to <*> <*> <*> <*> = <*> is <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[LogSendProgressReceiver.onReceive]Start! 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
</title> 
removeNotificationChildren 
</div> 
<script language="JavaScript"> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onStepCounterChange stepsNum:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|rebuild notification 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*>|onStandStepChanged <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
disableEffects=null canInterrupt=false once update: false 
HarassmentInterceptionDBProvider:URL= content://com.huawei.systemmanager.HarassmentInterceptionDBProvider/interception_messages 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at com.huawei.keyguard.util.BitmapUtils.getSuggestColorInfo(BitmapUtils.java:<*>) 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
at android.os.Looper.loop(Looper.java:<*>) 
becomeInactiveIfAppropriateLocked() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onShowStatusChange show:false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
onShowStatusChange show:false 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> <*> 
stopNavigating, mStarted=false 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
onShowStatusChange show:false 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
removeNotificationChildren 
begin 
send data return = <*> 
[ChrServiceUtils.isMethodSupported]Method/Supported:getModemLogStatus/true 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is <*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
updateClipping isOverlap:false 
Handle message: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> pid: <*> <*> <*> 
<*>|before compensate: cache step_<*> 
at java.io.FileInputStream.open(Native Method) 
setAlarmsAdjust ... 
<*> <*> <*> <*> <*> <*> <*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
hideTraffic 
sending broadcast to Pid = <*>, Uid = <*> 
<*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
QSEECom_send_cmd return! 
send data return = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
Wait finish 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
begin 
begin 
onShowStatusChange show:false 
updateQsState:false 
qsc_decode end 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
qsc_send_cmd finish 
qsc_decode end 
begin 
resetPagerState 
Acquiring suspend blocker <*> 
<*> <*> <*> 
DynamicUpdater registerReceiver 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
begin 
<*> <*> <*> 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> ==================== TCP CLIENT <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
updateNotificationShade 
<*> <*> <*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
<*> <*> <*> <*> 
ImsSenderRxr : <*> data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
<*> <*> <*> <*> <*> = <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
qsc_send_cmd finish 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<*> <*> <*> <*> <*> 
shouldBlockLocation running ... 
<*> addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
[RouteService.onDestroy] 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> Intent { <*> <*> <*> <*> (has extras) } <*> <*> <*> 
MyOrientationListener: updateRotation. 
updateClipping isOverlap:true 
<*> <*> <*> 
action:com.huawei.android.action.launcher_weather_icon_change, mPermissionType:<*> 
<*> <*> action = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.tencent.mm,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
Change to single clock mode! 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
updateLightsLocked --> mBatteryLight.turnOff 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
onExpandingStarted 
suspendAutohide 
transitionTo:mode=<*>, isEmuiStyle=false 
state.clipTopAmount:<*>, i:<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
state.clipTopAmount:<*>, i:<*> 
updateDimmedActivatedHideSensitive overlap:true 
updateDimmedActivatedHideSensitive overlap:true 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
refreshState=airplane, BooleanState[,icon=ResourceIcon[resId=0x7f0201af],label=飞行模式,labelTint=<*>,textChangedDelay=<*>,contentDescription=飞行模式,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false] 
refreshState=screenshot, State[,icon=com.android.systemui.qs.QSTile$DrawableIcon@8fb5eb0,label=截屏,labelTint=<*>,textChangedDelay=<*>,contentDescription=null,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=null,expandedAccessibilityClassName=null,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null] 
<*> <*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
fingersense_touch_up() finished 
updateDimmedActivatedHideSensitive overlap:false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
Skipping, withExcluded: false, <*> <*> <*> <*> <*> <*> (has extras) } 
<*> <*> <*> <*> <*> size is <*> <*> 
state.clipTopAmount:<*>, i:<*> 
updateClipping isOverlap:true 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
setBackgroundAlpha:alpha=<*>.<*> 
<*> = false 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
Create obj success use class <*> 
<*> <*> <*> 
<*> <*> <*> 
Create obj success use class <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
Create obj success use class <*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
obtain, mHwFlags=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
fingersense_touch_up() finished 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> <*> <*> 
setBackgroundColor:new=<*>, old=<*> 
<*> <*> <*> <*> 
Client requesting input be hidden, pid=<*> 
<*> <*> <*> <*> <*> : <*> 
<*> <*> <*> <*> <*> 
<*>|compensate <*> <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> size is <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
onDataActivity: direction=<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
search 
<*> <*> = <*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*>|after compensate: cache step_<*> 
updateClipping isOverlap:false 
back light level before map = <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> is not <*> 
closeAudioSink 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
received cell-signal:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> <*> = <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
<*> <*> <*> <*> <*> 
readRilMessage: Buffer = [B@204bb9f <*> <*> <*> 
<*> <*> <*> 
getOrInflateState subId:<*> 
Calling a method in the system process without a <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> = <*>, <*> <*> <*> <*> <*> <*> 
<*> <*> <*> u0 euid: <*> <*> euid: <*> 
<*> <*> <*> = <*> 
<*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
StartupResidentService:InnerHandler Message:<*> 
ImsServiceSubHandler : Message received: what = <*> 
<*> <*> <*> is not <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
<*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
notifyListenerHuawei::origin typeIcon:<*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> 
<*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
TelephonyConnection: clearOriginalConnection 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
<*> <*> = true 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> disabled 
<*> <*> <*> 
proxyBroadcast:[com.huawei.camera] proxy:false 
[RouteService.onStartCommand] 
<*> <*> <*> <*> 
<*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
Calling a method in the system process without a <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
StatusBarNotifier - <*> notification for <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
imeVis=false 
<*>|compensate received 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:huawei.w3,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
moveTaskToTop mTaskChanged:true 
acquire lock=<*>, flags=0x1, <*> <*> <*> uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> euid: <*> 
<*> <*> <*> <*> 
mNotifyStateChangedReceiver::onReceive:action=InCallScreenIsForegroundActivity, mBackgroundState=false 
Create obj success use class android.app.HwCustNotificationImpl 
disableEffects=null canInterrupt=false once update: false 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
setScrollingEnabled: true 
release:lock=<*>, flg=0x0, <*> <*> <*> uid=<*>, pid=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|onStandStepChanged <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
updateNotificationShade 
fingersense_classify_touch() finished 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> = <*>, <*> = <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> is not in <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 <*> <*> <*> activityIn:false activityOut:false isRoaming:false 
stopInComingMotionsReco ... 
onEntryRemovedInternal:<*>|com.android.incallui|<*>|null|<*>, group=<*>|com.android.incallui|<*>|null|<*> 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*>|compensate received 
<*> <*> <*> <*> <*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> u0 euid: <*> <*> euid: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|onStandStepChanged <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> not supported <*> 
<*> = false 
<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
KGSvcCall onScreenTurningOn. 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> not supported <*> 
<*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> 
onEntryAdded:<*>|com.android.incallui|<*>|null|<*>, group=<*>|com.android.incallui|<*>|null|<*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
remove(null) changed bounds; rebatching 
<*> <*> id = <*> = <*> <*> = <*> 
action:android.intent.action.SCREEN_ON, mPermissionType:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
ash->screen on 
ash->screen unlock 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
setAlarmsPending ... 
setAlarmsPending ... 
<*>|compensate received 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
<*> <*> <*> <*> 
setAlarmsPending ... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
QSEECom_send_cmd return! 
audio_extn_set_anc_parameters: anc_enabled:<*> 
onReceive, action:android.intent.action.SCREEN_OFF 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> pid: <*>, uid: <*>, <*> <*> 
proxyBroadcast:[com.tencent.mm] proxy:false 
<*> <*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
InCallPresenter - <*> 
Unfinished business... 
<*> <*> = <*>, <*> = <*> 
stopMonitoringMotionLocked() 
cancelNotificationLocked,remove =com.android.incallui 
<*> <*> <*> 
<*> <*> <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> <*> 
Caller checkPermission fail 
<*> <*> <*> <*> 
send: <*> 
removeNotificationChildren 
updateClipping isOverlap:false 
<*> <*> ==================== TCP CLIENT CLEAR ALL ==================== 
Animating brightness: target=<*>, rate=<*> 
ContentChange for slot: <*> 
AutoMode=true,Target=<*>,Current=<*>,amount=<*>.<*>,duration=<*>.<*> 
back light level before map = <*> 
<*>|compensate <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
updateTint: tint=<*> 
transferRemoteInputFocus: <*> 
need to <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
applyInPlace=true shouldPeek=false alertAgain=true 
updateSlider2 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Finished business... 
<*>|getTodayTotalSteps <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*>|compensate received 
<*>|compensate received 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
updateTint: tint=<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
showNotificationAll 
at org.json.JSONObject.<init>(JSONObject.java:<*>) 
at com.huawei.systemmanager.rainbow.comm.request.AbsRequest.processRequest(AbsRequest.java:<*>) 
transferRemoteInputFocus: <*> 
<*>|after compensate: cache step_<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
updateNotificationShade 
csr 
<*> <*> is -<*> 
<*> <*> <*> <*> <*> <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
updateTint: tint=<*> 
<*>|after compensate: cache step_<*> 
updateNotificationShade 
transferRemoteInputFocus: <*> 
<*>|onStandStepChanged <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) 
transferRemoteInputFocus: <*> 
imeVis=false 
<*> <*> <*> <*> <*> <*> 
InCallPresenter - <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
updateTint: tint=<*> 
<*> <*> <*> <*> 
<*>|compensate received 
<*> <*> rt=<*>/<*> <*> <*> 
updateLightsLocked --> mBatteryLight.turnOff 
<*> action = <*> 
receive data len = <*> 
send data return = <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
ash->screen off 
<*> <*> <*> 
msg = <*> received 
<*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*>|compensate <*> <*> 
removeNotificationChildren 
<*>|after compensate: cache step_<*> 
<*>|compensate received 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateNotificationShade 
removeNotificationChildren 
updateNotificationShade 
transferRemoteInputFocus: <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|after compensate: cache step_<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
updateLightsLocked --> mBatteryLight.turnOff 
<*> <*> <*> <*> <*> 
handleNotifyScreenTurnedOff 
timeForContinueCapture id:<*> 
<*> <*> <*> <*> 
Reading a NULL string not supported here. 
InCallPresenter - <*> 
<*> <*> <*> due to <*> <*> <*> 
<*> exit with code(<*>) 
<*> <*> <*> 
interpolate:mPosBrightness=<*>.0lux=<*>.<*>,mIsReboot=true,mIsUserChange=false,mDelta=<*>.<*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> <*> <*> 
<*> <*> <*> = <*> 
CommandQueue, setBarBackgroundColor 
<*> <*> <*> <*> 
LightSensor, enable, <*>: <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> <*> 
checkNeedLivenessList:start 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
begin 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
Cache monitor msg as screen_off 
Cache monitor msg as screen_off 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
DefaultState what=<*> 
updateCallLayout:isBackground=false, isInteractive=true 
shouldBlockLocation running ... 
<*> <*> <*> <*> = <*> 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ash->screen on 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
removeNotificationChildren 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
read Events lux: <*>.<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
at java.io.FileInputStream.open(Native Method) 
<*> updatePowerState <*> <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> 
StatusBarNotifier - <*> <*> <*> <*> 
LightSensor, enable, <*>: <*> 
<*> <*> <*> 
<*> <*> <*> 
addNotification key=<*>|com.android.incallui|<*>|null|<*> 
<*> = false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
notifyScreenTurnedOff 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
DisplayPowerState :ON 
KGSvcCall onStartedWakingUp. 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> due to <*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
<*> <*> <*> <*> 
<*> <*> <*> mSecond:<*>] 
isSimPinSecure mSimDatas is null or empty 
<*> <*> <*> 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
updateNotificationShade 
<*> <*> <*> <*> 
remove(null) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
getTempInfo error: null, <*> 
Animating brightness: target=<*>, rate=<*> 
WindowOrientationListener enabled 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
cancel alarm. 
<*> <*> rt=<*>/<*> <*> <*> 
Unfinished business... 
<*> <*> <*> <*> =<*> 
ContentChange for slot: <*> 
updateSlider2 seekBarProgress:<*> 
<*> <*> <*> <*> <*> <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
<*> <*> Intent { <*> <*> <*> 
<*> <*> <*> <*> 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> 
ContentChange for slot: <*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
csr 
<*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
showNotificationAll 
read from <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
onReceive, action:android.intent.action.SCREEN_OFF 
<*> <*> <*> 
send data return = <*> 
<*> <*> <*> <*> 
qsc_send_cmd finish 
QSEECom_send_cmd return! 
<*> <*> type = <*> 
######### CMD_QUERY_PKTS ######## 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
DisplayPowerController updatePowerState <*> <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
Animating brightness: target=<*>, rate=<*> 
onError <*> 
send data return = <*> 
<*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
StatusBarNotifier - <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> = <*> 
mActiveIface: rmnet_data<*> 
mAmbientLuxValid=true,mWakeupFromSleep= false 
<*> <*> <*> <*> 
<*> <*> Intent { <*> <*> <*> 
<*>| <*> <*> <*> 
DisplayPowerController updatePowerState <*> <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
onScreenTurnedOn() 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
shouldBlockLocation running ... 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> = true 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
ret: <*> 
setScrollingEnabled: true 
------------startInput-------------- 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> <*> 
scheduleLightAlarmLocked(<*>) 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onNotificationExpansionChanged called 
fingersense_on_pause() finished 
Animating brightness: target=<*>, rate=<*> 
receive data len = <*> 
begin 
receive data len = <*> 
<*> <*> <*> <*> =<*> 
receive data len = <*> 
qsc_decode end 
onScreenTurnedOff() 
<*> <*> <*> <*> 
<*> <*> <*> 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> <*> <*> 
onError <*> 
<*> <*> test Type =<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Create obj success use class <*> 
Reading a NULL string not supported here. 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
<*> <*> <*> 
DisplayPowerController updatePowerState <*> <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> <*> 
Display ready! 
updateLowPowerMode,isPowerSaveMode:falseisInteractive:false 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> 
<*> <*> = <*> <*> <*> <*> <*> <*> <*> is <*> 
<*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> 
updateNotificationShade 
transferRemoteInputFocus: <*> 
FingerprintDaemonProxyEx::onTransact, code:<*> 
QSEECom_send_cmd return! 
MagicLink2-BroadcastReceiver:====>ACTION_SCREEN_ON 
qsc_decode end 
<*> <*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> = false 
<*> exit with code(<*>) 
<*> exit with code(<*>) 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ash->screen off 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> type = <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
handleNotifyWakingUp 
<*> <*> <*> mSecond:<*>] 
isSimPinSecure mSimDatas is null or empty 
loadMagazine 
<*> <*> <*> <*> 
QSEECom_send_cmd return! 
qsc_decode end 
<*> <*> <*> <*> 
QSEECom_send_cmd return! 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
send data return = <*> 
remove(null) changed bounds; rebatching 
Create obj success use class <*> 
<*> <*> result = false 
mNotifyStateChangedReceiver::onReceive:action=InCallScreenIsForegroundActivity, mBackgroundState=false 
removeNotification:<*>|com.android.incallui|<*>|null|<*> 
onEntryRemovedInternal:<*>|com.android.incallui|<*>|null|<*>, group=<*>|com.android.incallui|<*>|null|<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
ash->screen unlock 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
back light level before map = <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
generateAddAnimation:null, false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
receive data len = <*> 
RCV <- {<*> <*> Tethering stats list completed} 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
qsc_send_cmd finish 
begin 
<*> <*> <*> <*> <*> <*> * <*> * <*> <*> <*> <*> <*> <*> <*> <*> * <*> * <*> <*> <*> <*> 
<*> <*> <*> pid: <*>, uid: <*> <*> <*> <*> <*> 
######### CMD_QUERY_PKTS ######## 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
Animating brightness: target=<*>, rate=<*> 
setColorTemperatureAccordingToSetting 
hw_set_colortemperature: end-- 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
Handle message: <*> 
LightSensor, enable, <*>: en=<*> 
Unfinished business... 
InCallPresenter - <*> 
Reading a NULL string not supported here. 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> - <*> <*> <*> <*> <*> <*> 
csr 
ApStaDisabledState what=<*> 
<*> <*> does not <*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
ash->screen unlock 
<*> byte = <*> <*> <*> <*> <*> <*> <*> is <*> 
<*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
Display ready! 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> ==================== TCP CLIENT <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> 
ProximitySensor - <*> <*> <*> <*> <*> 
read Events lux: <*>.<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> } 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> byte = <*> <*> <*> byte = <*> 
<*> byte = <*>, <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> not supported <*> 
hw_set_colortemperature: end-- 
<*> <*> <*> 
<*> <*> <*> 
qsc_send_cmd finish 
<*> <*> <*> <*> <*> 
onEntryRemoved:<*>|com.android.incallui|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
ContentChange for slot: <*> 
<*> <*> <*> <*> <*> <*> 
DisplayPowerController updatePowerState <*> useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
handle_exception_events enter 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
updateLightsLocked --> mBatteryLight.turnOff 
DefaultState what=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ash->screen on 
<*> <*> <*> <*> <*> in the <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
updateTint: tint=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
setAlarmsPending ... 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
updateNotificationShade 
<*> <*> <*> <*> 
InCallPresenter - <*> <*> 
onFinishedGoingToSleep(<*>) 
<*> : <*> 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
send data return = <*> 
begin 
begin 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
VolumeDialogController.Callbacks onScreenOff 
<*> <*> <*> <*> = <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
action:android.intent.action.SCREEN_ON, mPermissionType:<*> 
qsc_decode end 
InCallPresenter - <*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
<*> <*> <*> due to <*> <*> <*> 
<*> exit with code(<*>) 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> <*> 
updateClipping isOverlap:true 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mActiveIface: rmnet_data<*> 
disableGps:false isEnabled()=true 
<*> <*> <*> 
<*>| <*> <*> <*> 
create: <*> 
<*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> 
transferRemoteInputFocus: <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
<*> <*> <*> due to <*> 
StatusBarNotifier - <*> is null 
LightSensor, enable, <*>: <*> 
<*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
startAuthentication(com.android.systemui) 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> 
onScreenTurnedOff() 
Caller checkPermission fail 
<*> <*> <*> 
onError <*> 
<*> <*> <*> <*> <*> <*> 
QSEECom_send_cmd return! 
mIntentReceiver-ACTION_SCREEN_ON 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> = null 
ash->screen on 
<*> <*> <*> = <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> <*> <*> <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
handle_exception_events enter 
<*> - <*> <*> = null 
Change to single clock mode! 
<*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
ret: <*> 
<*> <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=NaN 
LightSensor, enable, <*>: en=<*> 
<*> <*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
updateNotificationShade 
Split enqueueing broadcast <*> <*> 
simCount:<*> phoneState:<*> 
Acquiring suspend blocker <*> 
simCount:<*> phoneState:<*> 
<*> <*> <*> <*> 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> <*> <*> } 
<*> <*> <*> 
<*> <*> <*> <*> = <*> 
QSEECom_send_cmd return! 
onAcquired(<*>) 
onAcquired <*> 
receive data len = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
Cache monitor msg as screen_off 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
Create obj success use class android.app.HwCustNotificationImpl 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
setColorTemperatureAccordingToSetting 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
receive data len = <*> 
QSEECom_send_cmd return! 
<*> <*> is not <*> 
<*> <*> <*> mode to <*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> <*> 
ProximitySensor - <*> <*> <*> <*> <*> 
<*> action = <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
write:userId=<*>,mPosBrightness =<*>.<*>,mOffsetBrightness_last=<*>.<*>,mIsUserChange=false,mDeltaNew=<*>.<*>,mStartLuxDefaultBrightness=<*>.133335mLastLuxDefaultBrightness=<*>.<*>,mAmLux=<*>.<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
Display ready! 
InCallActivity - <*> <*> = null 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotificationShade 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
------------startInput-------------- 
at com.huawei.ecs.mip.proxy.TcpClientThread.connectSocket(TcpClientThread.java:<*>) 
StatusBarNotifier - <*> <*> <*> 
StatusBarNotifier - <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
InCallPresenter - <*> 
scheduleAlarmLocked(<*>, false) 
<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onNotificationExpansionChanged called 
<*> = false 
<*> <*> <*> mode to <*> 
isSimPinSecure mSimDatas is null or empty 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> result = false 
send data return = <*> 
begin 
receive data len = <*> 
fpc_tac_begin_identify---need_liveness_authentication: <*> 
begin 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> 
isMusicActive... 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
isSimPinSecure mSimDatas is null or empty 
receive data len = <*> 
<*> <*> rt=<*>/<*> <*> <*> 
Cache monitor msg as screen_off 
<*> <*> <*> <*> <*> <*> 
mWakeupFromSleep= true,currentTime=<*>,mLightSensorEnableTime=<*> 
setExcludeFromRecents:pkgName=null 
<*> <*> <*> due to <*> <*> <*> 
updateLightsLocked --> mBatteryLight.turnOff 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateDisplayLocked: screenOn=true 
cancelNotification,index:<*> 
cancelNotificationLocked,remove =com.android.incallui 
<*> <*> <*> <*> 
simCount:<*> phoneState:<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
stopMonitoringMotionLocked() 
scheduleLightAlarmLocked(<*>) 
read from <*> <*> <*> 
Caller checkPermission fail 
handleNotifyFinishedGoingToSleep 
FingerprintService getEnrolledFingerprints 
<*> <*> <*> 
<*> <*> <*> <*> = <*> 
fpc_tac_begin_identify---need_liveness_authentication: <*> 
setColorTemperatureAccordingToSetting 
fpc_cancel 
isSimPinSecure mSimDatas is null or empty 
<*> <*> <*> 
notifyScreenOn 
InCallActivity - <*> 
<*> <*> <*> 
<*> exit with code(<*>) 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
ApStaDisabledState what=<*> 
<*> <*> action = <*> 
onDataActivity: direction=<*> 
read from <*> <*> <*> 
<*> <*> <*> <*> 
updateNotificationShade 
<*> <*> <*> 
ContentChange for slot: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
showNotificationAll 
<*> <*> <*> <*> <*> <*> is not <*> 
<*> <*> ==================== TCP CLIENT CLEAR ALL ==================== 
at com.huawei.ecs.mip.proxy.TcpSocket.connect_i(TcpSocket.java:<*>) 
at com.huawei.ecs.mip.proxy.TcpClientThread.connectSocket(TcpClientThread.java:<*>) 
disableEffects=null canInterrupt=false once update: false 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ret: <*> 
Reading a NULL string not supported here. 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
generateAddAnimation:null, false 
notifyFinishedGoingToSleep 
receive data len = <*> 
<*> <*> <*> <*> <*> <*> 
pluggedStatus: <*> 
AutoCleanReceiveServer:receive action:android.intent.action.SCREEN_OFF 
DisplayPowerState :ON 
onError(<*>) 
<*> <*> rt=<*>/<*> <*> <*> 
######### CMD_QUERY_PKTS ######## 
send data return = <*> 
InCallActivity - <*> 
KGSvcCall onScreenTurningOn. 
Reading a NULL string not supported here. 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> <*> <*> 
cancelNotificationLocked:<*>|com.android.incallui|<*>|null|<*> 
<*> <*> action = <*> 
<*> <*> <*> 
ash->screen unlock 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
onScreenTurnedOn() 
back light level before map = <*> 
flush,<*>,handle <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> ==================== TCP CLIENT <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> = <*>, <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
read from <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> 
<*> <*> <*> 
stopMonitoringMotionLocked() 
remove(null) changed bounds; rebatching 
removeNotificationChildren 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
onScreenTurnedOn() 
notifyScreenTurnedOn 
NormalTrafficAnalysis:alert byte = <*>, <*> <*> 
<*> <*> <*> <*> <*> <*> 
msg = <*> received 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
StatusBarNotifier - <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> 
sendMessage <*> 
stopFilter m_filterIsStarted:false 
send data return = <*> 
<*> exit with code(<*>) 
send data return = <*> 
worker idle 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> action = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
mVSimCurCardType is -<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
updateLightsLocked --> mBatteryLight.turnOff 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
mWakeupFromSleep= true,currentTime=<*>,mLightSensorEnableTime=<*> 
updateBarBgColor:emuiStyle=<*>,statusBarColor=#<*>,navigationBarColor=#<*>, isEmuiLight=-<*> 
<*> <*> <*> <*> 
flush,<*>,handle <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
receive data len = <*> 
Handle message: <*> 
begin 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
send data return = <*> 
<*> <*> <*> 
worker idle 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
proxyBroadcast:[com.tencent.mm] proxy:false 
Unfinished business... 
<*> <*> <*> 
<*> change to <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
updateLightsLocked --> level:<*>, status:<*> 
fingersense_on_pause() finished 
<*> <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
isSimPinSecure mSimDatas is null or empty 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> <*> <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> <*> <*> <*> java.net.SocketException: Socket is not <*> 
Change to single clock mode! 
EventCenter Get <*> 
<*> <*> <*> = false 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
csr 
<*> <*> <*> 
Cache monitor msg as screen_off 
csr 
<*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
Watch Thread{<*>} <*> <*> <*> 
sending broadcast to Pid = <*>, Uid = <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag <*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
doTemperatueWarning, health:<*> 
hw_get_smart_display_supported: start++ 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
<*> <*> <*> : <*> 
<*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
updateDimmedActivatedHideSensitive overlap:true 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
onEntryRemoved:<*>|com.android.incallui|<*>|null|<*> 
<*>|MSG_RECORD_DATA_TO_FILE_DELAY datas.size()=<*> 
disableGps:false isEnabled()=true 
interpolate:mPosBrightness=<*>.0lux=<*>.<*>,mIsReboot=true,mIsUserChange=false,mDelta=<*>.<*> 
ContentChange for slot: <*> 
<*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> z_offset=<*>.<*> 
chinaDateTime:晚上<*>:<*> 
ambient lux=<*>.<*>,timeStamp =<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> due to <*> 
<*> <*> <*> 
interpolate:mPosBrightness=<*>.0lux=<*>.<*>,mIsReboot=true,mIsUserChange=false,mDelta=<*>.<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
SleepPolicy:<*> 
QSEECom_send_cmd return! 
begin 
receive data len = <*> 
qsc_send_cmd finish 
receive data len = <*> 
begin 
KGSvcFp onAuthenticationAcquired.<*> 
receive data len = <*> 
onDataActivity: direction=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> is null 
<*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> is <*> <*> <*> <*> <*> <*> <*> 
handleNotifyScreenTurnedOff 
KGSvcCall onStartedWakingUp. 
hw_set_colortemperature: end-- 
qsc_send_cmd finish 
<*> <*> <*> <*> = <*>, id = <*> 
<*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> action = <*> 
removeNotificationViews:<*>|com.android.incallui|<*>|null|<*> 
handledataswitchchanged 
<*> <*> <*> 0x<*> 
<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> <*> <*> 
InCallActivity - <*> <*> = null 
removeNotificationChildren 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
csr 
StatusBarNotifier - <*> <*> <*> <*> 
LightSensor, enable, <*>: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 0x<*> 
<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
Handle message: <*> 
<*> <*> <*> <*> <*> <*> 
begin 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> does not <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
m1: false 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
begin 
<*> <*> <*> <*> 
Dis-Feature : <*> 
mIntentReceiver begin 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
<*> <*> pid = <*> <*> = <*> <*> = <*> <*> = <*> 
qsc_decode end 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
updateNotificationShade 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
ProximitySensor - <*> <*> <*> <*> <*> 
<*> <*> <*> 
------------startInput-------------- 
<*> <*> <*> = <*>, <*> <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> <*> <*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
updateTint: tint=<*> 
<*> = false 
InCallPresenter - <*> <*> 
KGSvcCall onFinishedGoingToSleep. 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
receive data len = <*> 
qsc_decode end 
receive data len = <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
receive data len = <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> delay to <*> 
<*> <*> <*> <*> 
proxyBroadcast:[com.android.browser] proxy:true 
report state:<*> event type:<*> <*> <*> <*> <*> pid: <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
setColorTemperatureAccordingToSetting 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
loadMagazine 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> mode to <*> 
receive data len = <*> 
begin 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> = false 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> <*> <*> pid: <*> 
proxyBroadcast:[com.tencent.mm] proxy:false 
<*> <*> <*> 
<*> <*> = true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
0x55, 0x0, 0x0, 0x<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> } 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
StatusBarNotifier - <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> id = <*> = <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
shouldBlockLocation ret:false 
shouldBlockLocation ret:false 
<*> <*> <*> <*> <*> <*> <*> 
read Events lux: <*>.<*> 
<*> <*> <*> <*> <*> 
read Events lux: <*>.<*> 
<*> <*> <*> due to <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onScreenTurnedOff() 
sendMessage <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> = null 
RCV <- {<*> <*> Tethering stats list completed} 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
write:userId=<*>,mPosBrightness =<*>.<*>,mOffsetBrightness_last=<*>.<*>,mIsUserChange=false,mDeltaNew=<*>.<*>,mStartLuxDefaultBrightness=<*>.04mLastLuxDefaultBrightness=<*>.<*>,mAmLux=<*>.<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
Finished business... 
KGSvcCall onScreenTurnedOn. 
onScreenTurnedOn 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
received cell-signal:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Canceling vibration. 
suspendAutohide 
suspendAutohide 
StatusBarNotifier - <*> <*> <*> <*> 
StatusBarNotifier - <*> <*> <*> <*> in the <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> <*> 
scheduleLightAlarmLocked(<*>) 
<*> <*> <*> <*> 
isCloneProcess = false 
showNotificationAll 
<*> <*> <*> 
<*> <*> <*> 
handleMessage(<*>) 
getTypeIcon type:<*> 
notifyListenerHuawei::origin typeIcon:<*> <*> <*> <*> <*> <*> 
ProximitySensor - <*> <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> <*> 
ash->screen off 
<*> <*> <*> = <*> <*> = <*> <*> = <*> 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> exit with code(<*>) 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
<*> <*> is <*> <*> <*> <*> <*> <*> <*> 
handleProximitySensorEvent positive:true 
shouldBlockLocation ret:false 
<*> <*> = <*> 
ProximitySensor - Proximity wake <*> <*> <*> 
<*> <*> <*> <*> <*> 
InCallPresenter - <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
read from <*> <*> <*> 
<*> <*> <*> 
notifyScreenTurnedOff 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
updateQsState:true 
<*> <*> <*> 
Reading a NULL string not supported here. 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rac Change (PDC) data: [<*>, <*>] 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ambient lux=<*>.<*>,timeStamp =<*> 
write:userId=<*>,mPosBrightness =<*>.<*>,mOffsetBrightness_last=<*>.<*>,mIsUserChange=false,mDeltaNew=<*>.<*>,mStartLuxDefaultBrightness=<*>.16mLastLuxDefaultBrightness=<*>.<*>,mAmLux=<*>.<*> 
<*> <*> <*> : <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
removeNotificationChildren 
<*> <*> <*> <*> 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
<*> <*> <*> <*> <*> <*> <*> 
onReceive, action:android.intent.action.SCREEN_OFF 
<*> <*> <*> 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
NormalTrafficAnalysis:alert byte = <*> <*> <*> byte = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
<*> action = <*> 
sendScreenOnEvent enter. 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
LightSensor, enable, <*>: <*> 
Reading a NULL string not supported here. 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> 
read from oem info: <*> 
mKeyguardDelegate.ShowListener.onDrawn. 
<*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> <*> = false, <*> <*> <*> <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*> 
ProximitySensor - <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> byte = <*> <*> <*> <*> <*> <*> <*> is <*> 
create: <*> 
flush,<*>,handle <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
write:userId=<*>,mPosBrightness =<*>.<*>,mOffsetBrightness_last=<*>.<*>,mIsUserChange=false,mDeltaNew=<*>.<*>,mStartLuxDefaultBrightness=<*>.12mLastLuxDefaultBrightness=<*>.<*>,mAmLux=<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> <*> 
scheduleAlarmLocked(<*>, false) 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
Calling fingersense_on_pause() 
0x55, 0x0, 0x0, 0x<*> 
0x0, 0x0, 0x0, 0x<*> 
Caller checkPermission fail 
Dis-Feature : <*> 
<*> <*> <*> <*> <*> 
begin 
begin 
send data return = <*> 
receive data len = <*> 
begin 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onDataActivity: direction=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
setColorTemperature:<*> 
<*> <*> <*> 
stopAuthentication() 
begin 
<*> <*> <*> <*> 
<*> <*> pid = <*> <*> = <*> <*> = <*> <*> = <*> 
notifyScreenOn 
<*> <*> <*> <*> 
sendScreenOnEvent enter. 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
<*> <*> type = <*> 
read Events lux: <*>.<*> 
interpolate:mPosBrightness=<*>.0lux=<*>.<*>,mIsReboot=true,mIsUserChange=false,mDelta=<*>.<*> 
<*> <*> <*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
onScreenTurnedOn() 
Finished business... 
updateSlider1 seekBarProgress:<*> 
handleNotifyScreenTurnedOn 
<*> <*> = true 
ProximitySensor - Proximity wake lock already acquired 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
read Events lux: <*>.<*> 
Animating brightness: target=<*>, rate=<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> z_offset=<*>.<*> 
InCallPresenter - <*> 
isCloneProcess = false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
qsc_send_cmd finish 
updateLightsLocked --> mBatteryLight.turnOff 
onAcquired <*> 
send data return = <*> 
<*> <*> <*> <*> <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> 
begin 
qsc_send_cmd finish 
qsc_decode end 
<*> <*> <*> 
<*> <*> <*> callList=com.android.incallui.CallList@86c7f<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
updateDisplayLocked: screenOn=true 
<*> <*> <*> <*> <*> <*> <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> <*> 
DefaultState what=<*> 
<*> <*> <*> = <*> 
<*> <*> <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> = true 
<*> <*> <*> 
refreshState=sound, RingModeState[,icon=com.android.systemui.qs.QSTile$DrawableIcon@8fb5eb0,label=静音,labelTint=<*>,textChangedDelay=<*>,contentDescription=静音,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=true,mode=<*>] 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
becomeInactiveIfAppropriateLocked() 
<*> <*> <*> <*> <*> 
scheduleLightAlarmLocked(<*>) 
read from oem info: <*> <*> z_offset=<*>.<*> 
FingerprintDaemonProxyEx::onTransact, code:<*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> exit with code(<*>) 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
onAcquired <*> 
<*> <*> <*> <*> <*> 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
setColorTemperatureAccordingToSetting 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> <*> <*> <*> 
isSimPinSecure mSimDatas is null or empty 
receive data len = <*> 
<*> <*> <*> : <*> 
qsc_send_cmd finish 
StatusBarNotifier - <*> 
<*> <*> = false 
<*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> 
onScreenTurnedOn() 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
received cell-signal:<*> 
<*> <*> <*> due to <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
InCallActivity - <*> 
Create obj success use class android.app.HwCustNotificationImpl 
scheduleAlarmLocked(<*>, false) 
onEntryAdded:<*>|com.android.incallui|<*>|null|<*>, group=<*>|com.android.incallui|<*>|null|<*> 
updateNotificationShade 
KGSvcCall onFinishedGoingToSleep. 
notifyFinishedGoingToSleep 
<*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> mode to <*> 
<*> <*> = <*>, <*> = <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
onReceive, action:android.intent.action.SCREEN_OFF 
updateDisplayLocked: screenOn=true 
<*> <*> <*> <*> = false, <*> <*> <*> <*> = <*>, <*> = <*>, <*> = <*>, mScrnOffAccTime = <*>, <*> = <*> 
<*> <*> <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
Display ready! 
getNextIndex: <*>; from <*> to <*>; size: <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
onReceive, action:android.intent.action.SCREEN_ON 
<*> <*> pid = <*> <*> = <*> <*> = <*> <*> = <*> 
<*> <*> <*> due to <*> <*> <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
<*> <*> <*> <*> <*> <*> <*> 
MyOrientationListener: updateRotation. 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
------------startInput-------------- 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ret: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> 
<*> <*> <*> = <*>, <*> <*> 
Reading a NULL string not supported here. 
<*> <*> <*> <*> <*> 
action:InCallScreenIsForegroundActivity, mPermissionType:<*> 
resetPagerState 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> rt=<*>/<*> <*> <*> 
QSEECom_send_cmd return! 
receive data len = <*> 
fpc_tac_begin_identify---need_liveness_authentication: <*> 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
AutoCleanReceiveServer:receive action:android.intent.action.SCREEN_OFF 
<*> <*> <*> <*> <*> <*> <*> 
OverscanTimeout run 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
c: true, w: false, t: false, l: false 
Cache monitor msg as screen_off 
Cache monitor msg as screen_off 
Cache monitor msg as screen_off 
<*> <*> <*> 
cancelNotificationWithTag pid <*>,uid = <*> <*> <*> <*> <*> 
isSimPinSecure mSimDatas is null or empty 
notifyScreenOn 
<*> <*> <*> <*> <*> 
CtrlSocket restoreScrOnStatus 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Reading a NULL string not supported here. 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
RCV <- {<*> <*> Tethering stats list completed} 
need to <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
send: <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
restoreBackgroundColor:new=<*>, old=<*> 
DisplayPowerStatesetScreenState: state=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> 
collapsePanel:false 
------------startInput-------------- 
cancelAutohide 
disableEffects=null canInterrupt=false once update: false 
<*> <*> <*> mode to <*> 
DisplayPowerController updatePowerState <*> useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
platform_set_parameters: <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
RCV <- {<*> <*> Tethering stats list completed} 
<*> <*> <*> 
onDataActivity: direction=<*> 
simCount:<*> phoneState:<*> 
qsc_decode end 
begin 
<*> <*> <*> <*> <*> 
hw_set_colortemperature: start++ 
<*> <*> <*> 
FingerprintDaemonProxyEx::onTransact, code:<*> 
stopAuthentication() 
<*> <*> <*> 
handleNotifyScreenTurningOn 
qsc_send_cmd finish 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
DefaultState what=<*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> <*> = <*> <*> = <*> 
<*> <*> = true 
<*> <*> <*> 
<*> <*> <*> <*> to <*> 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
mThermalService is NULL! 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider2 seekBarProgress:<*> 
MyOrientationListener: updateRotation. 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
onProposedRotationChanged, rotation=<*> 
poll before: g_monitor_fd =<*> 
not in <*> <*> <*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
at java.net.Inet6AddressImpl.lookupHostByName(Inet6AddressImpl.java:<*>) 
<*> <*> <*> to uc.huawei.com:<*> 
<*> <*> <*> to uc.huawei.com:<*> 
######### CMD_QUERY_PKTS ######## 
<*> <*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
m1: false 
c: true, w: false, t: false, l: false 
------------startInput-------------- 
StatusBarNotifier - <*> <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 <*> <*> <*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
InCallActivity - <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
becomeInactiveIfAppropriateLocked() 
stopMonitoringMotionLocked() 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onNotificationExpansionChanged called 
fpc_get_authenticator_id 
<*> <*> <*> <*> 
qsc_send_cmd finish 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
QSEECom_send_cmd return! 
receive data len = <*> 
onAcquired <*> 
<*> <*> <*> <*> = <*> 
NormalTrafficAnalysis:alert byte = <*> <*> <*> byte = <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> byte = <*> <*> <*> <*> <*> <*> <*> is <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
report state:<*> event type:<*> <*> <*> <*> <*> pid: <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
setRequest ProviderRequest[OFF] 
<*> <*> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
<*> <*> <*> 
<*> <*> <*> 
<*>| <*> <*> <*> 
<*> <*> <*> <*> 
send: <*> 
<*> <*> <*> <*> <*> <*> <*> type <*> when <*> <*> 
handle_exception_events enter 
handle_exception_events enter 
sending broadcast to Pid = <*>, Uid = <*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
send: <*> 
<*> <*> <*> <*> <*> 
create: <*> 
send: <*> 
msg = <*> received 
Cache monitor msg as screen_off 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
Cache monitor msg as screen_off 
send_cmd_kernel: cmd=<*> 
######### CMD_QUERY_PKTS ######## 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
send: <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
Received kernel message payload: event <*> 
<*> <*> <*> temp_old :<*> 
Animating brightness: target=<*>, rate=<*> 
setColorTemperatureAccordingToSetting 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag <*> 
<*> <*> <*> <*> 
worker idle 
receive data len = <*> 
LightSensor, enable, <*>: <*> 
<*> <*> rt=<*>/<*> <*> <*> 
InCallActivity - <*> <*> <*> <*> <*> 
InCallPresenter - <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateLightsLocked --> mBatteryLight.turnOff 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
<*> <*> is null 
<*> byte = <*> <*> <*> <*> <*> <*> <*> is <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
flush,<*>,handle <*> 
onScreenTurnedOn() 
<*>|calculateCaloriesWithCache datas.size=<*> 
<*>|calculateAltitudeWithCache datas.size=<*> 
disableEffects=null canInterrupt=false once update: false 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
StatusBarNotifier - <*> <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 <*> <*> publicVersion=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
<*> <*> <*> <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> 
onNotificationExpansionChanged called 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> mode to <*> 
Acquiring suspend blocker <*> 
KGSvcCall onFinishedGoingToSleep. 
sendMessage <*> 
<*> <*> <*> <*> <*> 
begin 
begin 
ApStaDisabledState what=<*> 
send data return = <*> 
onDataActivity: direction=<*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
send_cmd_kernel: cmd=<*> 
<*> <*> is <*> <*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker <*> 
setColorTemperatureAccordingToSetting 
------------startInput-------------- 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
receive data len = <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
ash->screen on 
read from oem info: <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
csr 
LightSensor, enable, <*>: en=<*> 
<*> <*> <*> <*> 
ProximitySensor - Proximity wake lock already acquired 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> sample rate:<*>.<*> cur rpt rate:<*> max:<*>.<*> min:<*>.<*> 
begin 
Create obj success use class <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
isMusicActive... 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> to uc.huawei.com:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
getTempInfo error: null, <*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag <*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
updateLightsLocked --> level:<*>, status:<*> 
handleBatteryUpdate 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Caller checkPermission fail 
getTempInfo error: null, <*> 
handleNotifyWakingUp 
receive data len = <*> 
<*> <*> <*> <*> 
cancelAutohide 
QSEECom_send_cmd return! 
<*> <*> <*> 
platform_set_parameters: <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
POSITION_COLLECTOR schedule 
<*> <*> <*> <*> 
read from oem info: <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
Animating brightness: target=<*>, rate=<*> 
KGSvcCall onScreenTurnedOn. 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
<*> <*> <*> <*> <*> 
ProximitySensor - Proximity wake lock already acquired 
------------startInput-------------- 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
back light level before map = <*> 
isCloneProcess = false 
<*> <*> <*> <*> = <*>, id = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
FingerprintService getEnrolledFingerprints 
FingerprintDaemonProxyEx::setLivenessSwitch 
mIntentReceiver begin 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> test Type =<*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
send data return = <*> 
updateLowPowerMode,isPowerSaveMode:falseisInteractive:false 
ash->screen off 
I/LocTech-Label :: OSOBSERVER :: Data Items In 
handle_exception_events enter 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> mSecond:<*>] 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
qsc_send_cmd finish 
LightSensor, enable, <*>: <*> 
<*> HAL <*> mode to <*> 
<*> <*> <*> <*> 
mIntentReceiver begin 
turn off notificationLight due to incall or screenon 
<*> action = <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
handledataswitchchanged 
getNextIndex: <*>; from <*> to <*>; size: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
chinaDateTime:晚上<*>:<*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
Model onReceive user=UserHandle{<*>} 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
cancelAutohide 
m1: false 
begin 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
QSEECom_send_cmd return! 
qsc_send_cmd finish 
onAcquired(<*>) 
DefaultState what=<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> <*> <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
begin 
onScreenTurningOn 
<*> <*> <*> 
<*> <*> <*> 
notifyInterfaceClassActivity: client is <*> 
handleProximitySensorEvent positive:true 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
back light level before map = <*> 
StatusBarNotifier - <*> <*> <*> <*> 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 actions=<*> vis=PRIVATE publicVersion=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
updateQsState:true 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> sample rate:<*>.<*> cur rpt rate:<*> max:<*>.<*> min:<*>.<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> <*> 
send data return = <*> 
transferRemoteInputFocus: <*> 
qsc_decode end 
qsc_decode end 
<*> <*> <*> = <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
EventCenter Get <*> 
handleTimeUpdate 
<*> <*> = true 
onReceive:screen off 
<*> <*> <*> <*> <*> (<*> * <*> * <*> * <*> <*> <*> <*> <*> (<*> * <*> * <*> * <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
mThermalService is NULL! 
<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, <*> <*> 
getTempInfo error: null, <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> delay to H! 
RCV <- {<*> IfaceClass idle <*> <*>} 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
<*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> 
<*> <*> <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> not supported <*> 
isSimPinSecure mSimDatas is null or empty 
cancel alarm. 
<*> <*> rt=<*>/<*> <*> <*> 
setExcludeFromRecents:pkgName=null 
<*> <*> <*> <*> <*> 
SND <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
showNotificationAll 
Finished business... 
mSeekListener onProgressChanged progress:<*> fromUser:false 
PowerManagerNotifier onWakefulnessChangeStarted: <*> <*> <*> <*> <*> 
onProposedRotationChanged, rotation=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
DisplayPowerController updatePowerState <*> useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> Window{e6a6b5e u0 <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
restoreBackgroundColor:new=<*>, old=<*> 
<*>| <*> <*> <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
LightSensor, enable, <*>: <*> 
<*> <*> <*> <*> 
imeVis=false 
StatusBarNotifier - <*> <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 actions=<*> vis=PRIVATE publicVersion=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
2G 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
<*> <*> <*> 
receive data len = <*> 
<*> <*> <*> <*> 
setRequest ProviderRequest[OFF] 
received cell-signal:<*> 
updateTint: tint=<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> exit with code(<*>) 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
PFW.HwPFWService:mBroadcastReceiver action = <*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
updateLowPowerMode,isPowerSaveMode:falseisInteractive:false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
Cache monitor msg as screen_off 
<*> <*> <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
DefaultState what=<*> 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> delay to H! 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
action:com.tencent.mm.ACTION.note_tracemsg_lock, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
<*> <*> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> byte = <*> <*> <*> <*> <*> <*> state is <*> 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
Change to single clock mode! 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
[DisposeLogUploadProgress.dispose] exception:<*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
at com.huawei.service.login.LoginC$LoginThread.doinLoop(LoginC.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Cache monitor msg as screen_off 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> <*> (has extras) } on bgkeyapp queue 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
isWiredHeadsetOn... 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> 
sending broadcast to Pid = <*>, Uid = <*> 
getMobileDataEnabled()+ subId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> = <*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> is not in the <*> <*> <*> <*> <*> 
<*> <*> <*> 
java.lang.reflect.InvocationTargetException 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> : <*> 
<*> <*> <*> <*> <*> <*> <*> is not <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> : <*> 
<*> <*> : <*> 
<*> <*> <*> 
<*> <*> = <*> 
<*> <*> = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
isDisplayFeatureSupported feature:<*> 
notifyScreenOn 
onScreenTurningOn 
Reading a NULL string not supported here. 
Reading a NULL string not supported here. 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =time_tick 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
cancelNotificationLocked,remove =com.android.incallui 
Reading a NULL string not supported here. 
onReceive, action:android.intent.action.SCREEN_ON 
isMusicActive... 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
qsc_send_cmd finish 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
RCV <- {<*> <*> Tethering stats list completed} 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Animating brightness: target=<*>, rate=<*> 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
read from oem info: <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
Releasing suspend blocker <*> 
<*> <*> Intent { <*> <*> (has extras) } 
<*> <*> <*> <*> <*> <*> <*> <*> 
------------startInput-------------- 
StatusBarNotifier - <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> <*> 
0x0, 0x0, 0x0, 0x<*> 
action:android.intent.action.SCREEN_OFF, mPermissionType:<*> 
generateAddAnimation:null, false 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
begin 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> delay to <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
<*> <*> <*> <*> <*> <*> <*> 
isMusicActive... 
ApStaDisabledState what=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> <*> <*> <*> in the <*> <*> <*> <*> <*> in the <*> <*> 
doTemperatueWarning, health:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
setColorTemperatureAccordingToSetting 
hw_get_smart_display_supported: end-- 
hw_set_colortemperature: end-- 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> to open <*> due to <*> <*> <*> <*> = <*> is <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
receive data len = <*> 
InCallPresenter - <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
stopFilter m_filterIsStarted:false 
send data return = <*> 
<*> <*> <*> <*> <*> <*> 
<*> = false 
updateLightsLocked --> mBatteryLight.turnOff 
<*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> <*> <*> 
ash->screen unlock 
<*> <*> <*> <*> <*> <*> <*> = false, <*> = <*>, <*> = <*>, <*> = <*>, mScrnOffAccTime = <*>, mScrnOnAccTime = <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
KGSvcCall onScreenTurnedOn. 
<*> <*> <*> <*> <*> 
updateTint: tint=<*> 
transferRemoteInputFocus: <*> 
ProximitySensor - <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
imeVis=false 
<*> <*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
Setting HAL <*> mode to true 
<*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
process buffer and get message 
at java.io.FileInputStream.open(Native Method) 
Acquiring suspend blocker <*> 
workerFunction STATE_CANCEL 
<*> <*> <*> <*> 
<*> <*> <*> = <*>, <*> <*> 
<*> <*> <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
updateClipping isOverlap:true 
<*> <*> <*> <*> <*> 
remove(null) changed bounds; rebatching 
<*> = null 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> <*> change to true 
updateDimmedActivatedHideSensitive overlap:false 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
onScreenTurnedOn() 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
send: <*> 
<*>|calculateCaloriesWithCache datas.size=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
shouldBlockLocation ret:false 
updateClipping isOverlap:false 
back light level before map = <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
StatusBarNotifier - <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> 
onFinishedGoingToSleep 
isSimPinSecure mSimDatas is null or empty 
LightSensor, enable, <*>: en=<*> 
HDebug print <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> to true 
RCV <- {<*> <*> Tethering stats list completed} 
mAmbientLuxValid=true,mWakeupFromSleep= false 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
notifyScreenTurnedOn 
<*> <*> <*> <*> <*> <*> 
turn off notificationLight due to incall or screenon 
<*> action = android.intent.action.SCREEN_ON 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
Access denied finding property "persist.sys.smart_power" 
<*> = false 
ProximitySensor - <*> <*> <*> <*> 
<*> <*> state = <*>, <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
showNotificationAll 
onFinishedGoingToSleep(<*>) 
updateCallLayout:isBackground=false, isInteractive=false 
fingerprintd 
<*> <*> <*> 
<*> <*> <*> 
QSEECom_send_cmd return! 
onReceive:screen off 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
<*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
msg = <*> received 
Change to single clock mode! 
c: true, w: false, t: false, l: false 
<*> <*> <*> 
<*> <*> <*> state = false, <*> = null 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ContentChange for slot: <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
KGSvcCall onScreenTurnedOff. 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
qsc_decode end 
qsc_decode end 
<*> <*> <*> <*> 
<*> <*> <*> 
Setting HAL <*> mode to true 
cancelNotificationWithTag pid <*>,uid = <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
mSimSubId:<*> onDataActivity: direction=<*> 
onDataActivity: direction=<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
ash->screen unlock 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
interpolate:mPosBrightness=<*>.0lux=<*>.<*>,mIsReboot=true,mIsUserChange=false,mDelta=<*>.<*> 
<*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
------------startInput-------------- 
<*> <*> <*> <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> 
read from oem info: <*> 
updateLightsLocked --> mBatteryLight.turnOff 
qsc_send_cmd finish 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
Caller checkPermission fail 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
begin 
handleNotifyScreenTurningOn 
mIntentReceiver begin 
CtrlSocket restoreScrOnStatus 
remove(null) changed bounds; rebatching 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
DefaultState what=<*> 
<*> <*> <*> <*> <*> 
Display ready! 
Create obj success use class android.app.HwCustNotificationImpl 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
<*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
received cell-signal:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
StatusBarNotifier - <*> notification for <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> z_offset=<*>.<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
Caller checkPermission fail 
onFinishedGoingToSleep(<*>) 
receive data len = <*> 
pluggedStatus: <*> 
begin 
onReceive, action:android.intent.action.SCREEN_OFF 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
removeFreezeProcess pkg:com.tencent.mm 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
isMusicActive... 
KGSvcCall onScreenTurnedOff. 
hw_get_smart_display_supported: start++ 
QSEECom_send_cmd return! 
QSEECom_send_cmd return! 
TurnOffDCState: false 
hideScrim() 
HWCDisplay::SetPowerMode: display = <*>, mode = <*> 
<*> <*> <*> status = <*>, id = <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
handleMessage(<*>) 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
SND <*> <*> <*> <*> 
NormalTrafficAnalysis:alert byte = <*> <*> <*> byte = <*> 
NormalTrafficAnalysis:alert byte = <*>, <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ContentChange for slot: <*> 
<*> <*> <*> <*> <*> 
flush,<*>,handle <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
updateSlider1 seekBarProgress:<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
read Events lux: <*>.<*> 
<*> <*> <*> 
ambient lux=<*>.<*>,timeStamp =<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> sample rate:<*>.<*> cur rpt rate:<*> max:<*>.<*> min:<*>.<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
action:InCallScreenIsForegroundActivity, mPermissionType:<*> 
QSEECom_send_cmd return! 
qsc_decode end 
begin 
huawei_cust_set_parameters: exit with code(<*>) 
receive data len = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
2G 
<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTypeIcon type:<*> 
Acquiring suspend blocker <*> 
<*> <*> <*> 
setColorTemperatureAccordingToSetting 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
mIntentReceiver begin 
Fingerprint RunningStateChanged. <*> 
<*> <*> <*> <*> <*> <*> 
setExcludeFromRecents:pkgName=null 
<*> <*> <*> <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
updateDimmedActivatedHideSensitive overlap:true 
onEntryRemoved:<*>|com.android.incallui|<*>|null|<*> 
onNotificationExpansionChanged called 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
disableEffects=null canInterrupt=false once update: false 
<*> <*> pid: <*> is <*> <*> pid: <*> 
Access denied finding property "persist.sys.smart_power" 
<*> <*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> 
0x55, 0x0, 0x0, 0x<*> 
AwareMem_DMEServer: stop 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> rt=<*>/<*> <*> <*> 
HDebug print <*> <*> <*> 
worker idle 
<*> <*> <*> <*> 
<*> <*> <*> delay to <*> 
<*> <*> <*> <*> <*> 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> 
send data return = <*> 
<*> <*> <*> 
Fingerprint RunningStateChanged. <*> 
InCallActivity - <*> 
<*> <*> <*> <*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
Reading a NULL string not supported here. 
removeNotification:<*>|com.android.incallui|<*>|null|<*> 
<*> <*> <*> = <*> 
back light level before map = <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
received cell-signal:<*> 
PowerManagerNotifier onWakefulnessChangeStarted: <*> <*> <*> <*> <*> 
<*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> sample rate:<*>.<*> cur rpt rate:<*> max:<*>.<*> min:<*>.<*> 
onFinishedGoingToSleep 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
AwareMem_DMEServer: stop 
send data return = <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
turn off notificationLight due to incall or screenon 
updateLightsLocked --> mBatteryLight.turnOff 
KGSvcFp onAuthenticationAcquired.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateLowPowerMode,isPowerSaveMode:falseisInteractive:false 
<*> <*> <*> <*> = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
formatChinaDateTime equals. 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> state = false, <*> = null 
Change to single clock mode! 
Acquiring suspend blocker <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> pid = <*> <*> = <*> <*> = <*> <*> = <*> 
InCallActivity - <*> <*> <*> 
QSEECom_send_cmd return! 
action:InCallScreenIsForegroundActivity, mPermissionType:<*> 
fingersense_on_resume() finished 
<*> <*> <*> <*> 
updateDisplayLocked: screenOn=true 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> does not <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
ContentChange for slot: <*> 
updateNotificationShade 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
proxyBroadcast:[com.android.browser] proxy:true 
addFreezeProcess pkg:com.android.browser 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
HWCDisplay::SetPowerMode: display = <*>, mode = <*> 
scheduleLightAlarmLocked(<*>) 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
Create obj success use class <*> 
removeNotificationChildren 
<*> <*> <*> 
<*> <*> <*> <*> 
WindowOrientationListener disabled 
isSimPinSecure mSimDatas is null or empty 
AutoCleanReceiveServer:receive action:android.intent.action.SCREEN_OFF 
MagicLink2-BroadcastReceiver:====>ACTION_SCREEN_OFF 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
handleProximitySensorEvent positive:false 
Error reading charge file 
Caller checkPermission fail 
begin 
<*> <*> <*> <*> 
<*> <*> <*> 
InCallPresenter - <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> children:[], parent:null, conferenceable:[], videoState:Audio Only, mSessionModificationState:<*>, VideoSettings:(CameraDir:<*>)] 
<*> <*> <*> <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
m1: false 
ApStaDisabledState what=<*> 
<*> <*> type = <*> 
<*> <*> <*> = <*> 
Returning system default Launcher 
WindowOrientationListener enabled 
read from oem info: data_readback 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
showNotificationAll 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
read Events lux: <*>.<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> <*> 
ret: <*> 
StatusBarNotifier - <*> <*> <*> <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
APS brightness=<*>.<*>,ConvertToPercentage=NaN 
set(null) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
WindowOrientationListener disabled 
onFinishedGoingToSleep 
<*> <*> <*> <*> 
Dis-Feature : <*> 
<*> <*> <*> <*> 
resetPagerState 
begin 
isWiredHeadsetOn... 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> 
hw_set_colortemperature: start++ 
action:android.intent.action.SCREEN_ON, mPermissionType:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
cancel alarm. 
send data return = <*> 
onError(<*>) 
begin 
updateDimmedActivatedHideSensitive overlap:true 
PFW.HwPFWService:mBroadcastReceiver action = android.intent.action.SCREEN_ON 
removeNotificationChildren 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> <*> = <*> 
updateClipping isOverlap:false 
ash->screen unlock 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
back light level before map = <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
setAlarmsPending ... 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
addNotification key=<*>|com.android.incallui|<*>|null|<*> 
show_incallscreen <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
No peeking: unimportant notification: <*> 
Split enqueueing broadcast <*> <*> 
resetPagerState 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> <*> ms 
qsc_send_cmd finish 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> <*> delay to <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> mScrnOffAccTime = <*>, mScrnOffAccTime = <*>, mScrnOnAccTime = <*> 
process buffer and get message 
csr 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
setAlarmsPending ... 
handleProximitySensorEvent positive:false 
<*> <*> <*> 
setColorTemperatureAccordingToSetting 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
receive data len = <*> 
mIntentReceiver begin 
InCallActivity - <*> 
Reading a NULL string not supported here. 
<*> <*> <*> 
HDebug print <*> <*> <*> 
<*> <*> <*> <*> 
updateLightsLocked --> mBatteryLight.turnOff 
removeNotificationViews:<*>|com.android.incallui|<*>|null|<*> 
<*> <*> <*> <*> <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> <*> <*> <*> <*> <*> 
Returning system default Launcher 
create: <*> 
<*> <*> <*> <*> z_offset=<*>.<*> 
<*> <*> <*> <*> sample rate:<*>.<*> cur rpt rate:<*> max:<*>.<*> min:<*>.<*> 
LISTEN_CELL_LOCATION uid:<*> 
<*> <*> <*> <*> <*> 
HWCDisplay::SetPowerMode: display = <*>, mode = <*> 
<*> <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=NaN 
updateSlider2 seekBarProgress:<*> 
ProximitySensor - <*> <*> 
<*> <*> <*> <*> <*> 
onFinishedGoingToSleep(<*>) 
<*> <*> rt=<*>/<*> <*> <*> 
turn off notificationLight due to incall or screenon 
<*> <*> <*> <*> 
msg = <*> received 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 <*> <*> <*> activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> 
qsc_send_cmd finish 
bh1745-light <*> <*> <*> <*> ms 
<*> <*> <*> <*> 
send data return = <*> 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
I/LocTech-Label :: OSOBSERVER :: Data Items In 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|calculateAltitudeWithCache datas.size=<*> 
updateNotificationShade 
Change to single clock mode! 
write:userId=<*>,mPosBrightness =<*>.<*>,mOffsetBrightness_last=<*>.<*>,mIsUserChange=false,mDeltaNew=<*>.<*>,mStartLuxDefaultBrightness=<*>.52mLastLuxDefaultBrightness=<*>.<*>,mAmLux=<*>.<*> 
handleProximitySensorEvent positive:true 
enqueueNotificationInternal: n.getKey = <*> 
InCallPresenter - <*> <*> 
<*> <*> <*> <*> 
Releasing suspend blocker <*> 
0x0, 0x0, 0x0, 0x<*> 
<*> exit with code(<*>) 
begin 
ApStaDisabledState what=<*> 
fpc_tac_send_set_arbitrary_data_cmd:ok, response:<*> 
mActiveIface: rmnet_data<*> 
VolumeDialogController.Callbacks onScreenOff 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> = <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
updateChargingLocked: charging=false 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
notifyScreenTurnedOff 
<*> <*> <*> <*> <*> 
<*> read from <*> <*> 
<*> = false 
getTempInfo error: null, <*> 
Fingerprint RunningStateChanged. <*> 
CtrlSocket restoreScrOnStatus 
<*> <*> <*> <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
MobileData switch:true 
mIntentReceiver-ACTION_SCREEN_ON 
<*> <*> <*> <*> 
action:android.intent.action.PRECISE_DATA_CONNECTION_STATE_CHANGED, mPermissionType:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
AutoCleanReceiveServer:receive action:android.intent.action.SCREEN_ON 
getTypeIcon type:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ContentChange for slot: <*> 
<*> <*> mScrnOffAccTime = <*>, mScrnOffAccTime = <*>, mScrnOnAccTime = <*> 
<*> <*> <*> <*> <*> <*> 
Change to single clock mode! 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
read Events lux: <*>.<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
no net ctrl socket pending alarm! <*> <*> <*> 
no net ctrl socket pending alarm! <*> <*> <*> 
<*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
addFreezeProcess pkg:com.tencent.mm 
<*> <*> <*> <*> 
bh1745-light calling driver <*> <*> ms 
onSignal: mSubId=<*>,currDataSubID=<*> 
imeVis=false 
<*> <*> report_rate_f=<*>.000000Hz curr sample rate:<*>.<*> cur rpt rate:<*> max:<*>.<*> min:<*>.<*> 
Caller checkPermission fail 
qsc_send_cmd finish 
<*> <*> rt=<*>/<*> <*> <*> 
turn off notificationLight due to incall or screenon 
updateLightsLocked --> mBatteryLight.turnOff 
receive data len = <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
isCardAbsent slot:<*> slotState:<*> 
notifyListenerHuawei::origin typeIcon:<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
report state:<*> event type:<*> <*> <*> <*> <*> pid: <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
isWiredHeadsetOn... 
Acquiring suspend blocker <*> 
onScreenTurnedOff() 
onScreenTurnedOff() 
<*> <*> <*> 
onStartedWakingUp 
<*> <*> <*> <*> 
QSEECom_send_cmd return! 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
begin 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
Setting HAL <*> mode to true 
InCallActivity - <*> <*> <*> 
handleMessage(<*>) 
<*> exit with code(<*>) 
Create obj success use class <*> 
updateLightsLocked --> level:<*>, status:<*> 
ProximitySensor - <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
MemoryRecoveryDMEPlugin: interrupt 
NatTrafficNotifyService:delta byte = <*> no traffic delta = 0Traffic state is <*> 
Releasing suspend blocker "PowerManagerService.Broadcasts". 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> no net <*> 
mDateString is: <*>月<*>日星期六 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
csr 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> = true 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
Unfinished business... 
DisplayPowerState :OFF 
StatusBarNotifier - <*> <*> <*> <*> in the <*> <*> <*> <*> 
ProximitySensor - Proximity wake lock already acquired 
<*> <*> <*> ActivityRecord{b46dc67 u0 com.android.incallui/.InCallActivity <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateTint: tint=<*> 
No peeking: unimportant notification: <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> report_rate_f=<*>.000000Hz curr sample rate:<*>.<*> cur rpt rate:<*> max:<*>.<*> min:<*>.<*> 
isSimPinSecure mSimDatas is null or empty 
fpc_get_authenticator_id 
qsc_send_cmd finish 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> rt=<*>/<*> <*> <*> 
worker idle 
QSEECom_send_cmd return! 
qsc_decode end 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> 
<*> <*> is null 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 <*> <*> <*> activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
send: <*> 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
QSEECom_send_cmd return! 
begin 
onReceive, action:android.intent.action.SCREEN_ON 
<*> <*> rt=<*>/<*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> <*> <*> 
InCallPresenter - <*> 
<*> <*> <*> = <*> 
turn off notificationLight due to incall or screenon 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
read from oem info: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*>|calculateCaloriesWithCache datas.size=<*> 
msg = <*> received 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
setAlarmsPending ... 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Access denied finding property "persist.sys.smart_power" 
received cell-signal:<*> 
LightSensor, enable, <*>: en=<*> 
<*> <*> <*> <*> <*> <*> 
scheduleAlarmLocked(<*>, false) 
<*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Setting HAL interactive mode to <*> 
<*> <*> x_offset=<*>.<*>, y_offset=<*>.<*>, z_offset=<*>.<*> 
isSimPinSecure mSimDatas is null or empty 
checkNeedLivenessList:start 
receive data len = <*> 
begin 
begin 
<*> exit with code(<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
SND <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
setColorTemperatureAccordingToSetting 
receive data len = <*> 
workerFunction STATE_NAVIGATION 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
mKeyguardDelegate.ShowListener.onDrawn. 
<*> <*> <*> <*> <*> <*> 
HWCDisplay::SetPowerMode: display = <*>, mode = <*> 
StatusBarNotifier - <*> <*> <*> 
ProximitySensor - <*> <*> <*> <*> 
cancelNotificationLocked,remove =com.android.incallui 
Reading a NULL string not supported here. 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
read Events lux: <*>.<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> report_rate_f=<*>.000000Hz curr sample rate:<*>.<*> cur rpt rate:<*> max:<*>.<*> min:<*>.<*> 
<*> <*> <*> <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> no net <*> 
setAlarmsPending ... 
notifyListenerHuawei::origin typeIcon:<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
StatusBarNotifier - <*> = false 
LightSensor, enable, <*>: mEnabled=<*> 
<*> <*> <*> 
becomeInactiveIfAppropriateLocked() 
scheduleAlarmLocked(<*>, false) 
Create obj success use class android.app.HwCustNotificationImpl 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> 
Finished business... 
<*> <*> <*> <*> <*> <*> 
AwareMem_DMEServer: stop 
<*> <*> rt=<*>/<*> <*> <*> 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> = true 
updateLightsLocked --> mBatteryLight.turnOff 
<*> <*> <*> 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
<*> <*> <*> = <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
Acquiring suspend blocker "PowerManagerService.Broadcasts". 
<*> read from <*> <*> 
<*> <*> <*> 
receive data len = <*> 
<*> <*> <*> <*> } 
Fingerprint RunningStateChanged. <*> 
apply skiped :<*> 
workerFunction STATE_NAVIGATION 
bh1745-light calling driver <*> <*> ms 
<*> <*> <*> 
<*> <*> pid = <*> <*> = <*> <*> = <*> <*> = <*> 
<*> <*> <*> 
Calling fingersense_on_resume() 
Create obj success use class <*> 
Reading a NULL string not supported here. 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> <*> <*> <*> <*> = false, <*> = <*>, <*> = <*>, delta = <*>, mScrnOffAccTime = <*>, mScrnOnAccTime = <*> 
0x0, 0x0, 0x0, 0x<*> 
<*> <*> <*> <*> <*> 
shouldBlockLocation running ... 
Releasing suspend blocker "PowerManagerService.Broadcasts". 
Access denied finding property "persist.sys.smart_power" 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
scheduleLightAlarmLocked(<*>) 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 actions=<*> vis=PRIVATE publicVersion=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> <*> <*> <*> 
onNotificationExpansionChanged called 
mNotifyStateChangedReceiver::onReceive:action=InCallScreenIsForegroundActivity, mBackgroundState=false 
Setting HAL auto-suspend mode to true 
Finished business... 
<*> <*> <*> <*> 
mIntentReceiver begin 
updateLightsLocked --> level:<*>, status:<*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Cache monitor msg as screen_off 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> rt=<*>/<*> <*> <*> 
begin 
Fingerprint RunningStateChanged. <*> 
<*> off notificationLight 
audio_extn_set_anc_parameters: anc_enabled:<*> 
updateDisplayLocked: screenOn=true 
updateDisplayLocked: screenOn=true 
csr 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 actions=<*> vis=PRIVATE publicVersion=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
mAmbientLuxValid=true,mWakeupFromSleep= false 
<*> <*> <*> <*> <*> 
0x0, 0x0, 0x0, 0x<*> 
Create obj success use class android.app.HwCustNotificationImpl 
SmartHeartBeat:setAlarmsPending, pkgList=[] 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> change to <*> <*> 
received cell-signal:<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x10,uasummary=0x2,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[<*>.<*>/<*>, <*>.<*>/<*>] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
received cell-signal:<*> 
<*> <*> <*> ActivityRecord{b46dc67 u0 com.android.incallui/.InCallActivity <*> <*> <*> 
InCallActivity - <*> 
InCallPresenter - <*> state = <*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
<*> <*> report_rate_f=<*>.000000Hz curr sample rate:<*>.<*> cur rpt rate:<*> max:<*>.<*> min:<*>.<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> 
huawei_cust_set_parameters: exit with code(<*>) 
receive data len = <*> 
receive data len = <*> 
SND <*> <*> <*> <*> 
Error reading charge file 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> to true 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> test Type =<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> state = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 actions=<*> vis=PRIVATE publicVersion=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x0 color=0xff33b5e5 <*> 
setColorTemperature:<*> 
<*> <*> <*> <*> 
begin 
<*> <*> <*> <*> <*> 
begin 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> <*> = true 
<*> <*> <*> <*> is not <*> <*> 
huawei_cust_set_parameters: exit with code(<*>) 
<*> <*> <*> 
<*> = false 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> 
<*> <*> <*> <*> <*> <*> is <*> 
<*> -> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
Rac Change (PDC) data: [<*>, <*>] 
<*> <*> <*> 
<*> exit with code(<*>) 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> = false 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> = false 
ProximitySensor - <*> <*> <*> <*> 
<*> <*> <*> <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
audio_extn_get_parameters: returns 
Reading a NULL string not supported here. 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> state = <*> <*> <*> <*> <*> 
VolumeDialogController.Callbacks onStateChanged 
onReceive, action:android.intent.action.SCREEN_ON 
<*> <*> <*> <*> 
<*> <*> to true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> state is <*> <*> <*> <*> <*> <*> 中国移动 中国移动 <*> 中国移动 中国移动 <*> <*> <*> <*> not supported <*> <*> <*> <*> <*> <*> 
setSimCardReady <*> 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
isSecondaryUser() end 
<*> <*> <*> 
NormalTrafficAnalysis:alert byte = <*>, <*> <*> 
<*> <*> mScrnOffAccTime = <*>, mScrnOffAccTime = <*>, mScrnOnAccTime = <*> 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
<*> <*> <*> 
action:android.media.STREAM_DEVICES_CHANGED_ACTION, mPermissionType:<*> 
MagicLink2-BroadcastReceiver:====>ACTION_SCREEN_ON 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
InCallPresenter - <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ambient lux=<*>.<*>,timeStamp =<*> 
InCallPresenter - <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ProximitySensor - <*> <*> 
<*> <*> <*> 
ProximitySensor - <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
InCallPresenter - <*> <*> <*> <*> <*> <*> 
search 
<*> <*> <*> size is <*> 
InCallPresenter - <*> 
InCallPresenter - <*> state = <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
<*> <*> <*> <*> <*> <*> 中国移动 中国移动 <*> 中国移动 中国移动 <*> <*> <*> <*> not supported <*> <*> <*> <*> <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> = <*> 
<*> = <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> <*> = <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ImsSenderRxr : <*> = <*> status = <*> <*> = <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
ImsServiceSub : <*> 
<*> <*> <*> : <*> 
ImsServiceSub : <*> <*> = <*> <*> = <*> status = <*> <*> = <*> 
Create obj success use class <*> 
isCurrentBySim()=false 
Reading a NULL string not supported here. 
getOrInflateState subId:<*> 
<*> <*> = <*>, <*> <*> <*> 
<*> <*> does not <*> 
<*> <*> <*> <*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> :: Data <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
msg = <*> received 
NetworkAgent connected 
<*> <*> <*> u0 euid: <*> <*> euid: <*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
StartupResidentService:InnerHandler Message:<*> 
Create obj success use class <*> 
<*> <*> <*> <*> <*> <*> 
[SocketRead_<*>:<*>:<*>-<*>]isSupportCtrlSocketV2, ctrlSocket(android/null:<*>) 
preNetWorkType:<*>; currentNetWorkType:<*> 
StartupResidentService:InnerHandler Message:<*> 
<*> <*> <*> <*> <*> <*> 
Calling a method in the system process without a <*> <*> <*> <*> <*> <*> <*> 
<*> <*> is null <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
AutoMode=true,Target=<*>,Current=<*>,amount=<*>.<*>,duration=<*>.<*> 
updateSlider2 seekBarProgress:<*> 
action:com.example.logupload.progress, mPermissionType:<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
packageInstalled true! 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> is null <*> <*> <*> 
<*> <*> <*> <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
onNotificationExpansionChanged called 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
ambient lux=<*>.<*>,timeStamp =<*> 
obtain, mHwFlags=<*> 
Launcher onStart() 
shouldBlockLocation ret:false 
<*> <*> <*> <*> <*> <*> <*> 
ActivityThread,attachApplication 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
onEntryUpdated:<*>|com.tencent.mm|<*>|null|<*> 
onEntryAdded:<*>|com.tencent.mm|<*>|null|<*>, group=<*>|com.tencent.mm|<*>|null|<*> 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
shouldBlockLocation running ... 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
<*> <*> <*> <*> <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> is <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
cancelNotificationWithTag pid <*>,uid = <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> = <*> 
<*> <*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
getOrInflateState subId:<*> 
<*> = false, <*> = <*> 
fingersense_touch_up() finished 
is3GCalling is false,mCdmaSlot is -<*> 
[HttpClient.getDataWithRetryNoLogin] success 
[HttpClient.getDataWithRetryNoLogin] success 
isCurrentBySim()=false 
begin 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
fingersense_classify_touch() finished 
Calling fingersense_touch_up() 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*> <*> <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
c: true, w: false, t: false, l: false 
<*> <*> = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
fingersense_touch_up() finished 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
Calling fingersense_classify_touch() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
t:false, fl: false, p: <*>, ce: true, we: false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
fingersense_classify_touch() finished 
t:false, fl: false, p: <*>, ce: true, we: false 
fingersense_touch_up() finished 
Calling fingersense_touch_up() 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
Calling fingersense_classify_touch() 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Error reading charge file 
getTempInfo error: null, <*> 
cancelNotification,index:-<*> 
fingersense_touch_up() finished 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> = false 
received cell-signal:<*> 
m1: false 
<*> <*> <*> <*> <*> u0 euid: <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
Client requesting input be hidden, pid=<*> 
Calling fingersense_touch_up() 
cancelNotificationWithTag pid <*>,uid = <*> <*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
Received kernel message payload: event <*> 
<*> <*> <*> <*> <*> <*> <*> of 
at org.json.JSONTokener.syntaxError(JSONTokener.java:<*>) 
at com.huawei.systemmanager.rainbow.comm.request.AbsRequest.processRequest(AbsRequest.java:<*>) 
at android.app.ActivityThread.main(ActivityThread.java:<*>) 
at com.huawei.systemmanager.rainbow.comm.request.AbsServerRequest.processResponse(AbsServerRequest.java:<*>) 
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<*>) 
<*> <*> <*> 
isSpeakerphoneOn... 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
querySoundEffectsEnabled... 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
<*> <*> <*> = false 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:false isRoaming:false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*> 
getOrInflateState subId:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
isCurrentBySim()=false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
c: true, w: false, t: false, l: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
Calling fingersense_touch_up() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
fingersense_touch_up() finished 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
<*> <*> <*> <*> 
formatChinaDateTime equals. 
formatChinaDateTime equals. 
Change to single clock mode! 
isCardAbsent slot:<*> slotState:<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
not in link monitoring mode, ignore TCP result . 
is3GCalling is false,mCdmaSlot is -<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> <*> <*> <*> delay to H! 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
m1: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> <*> <*> <*> delay to H! 
t:false, fl: false, p: <*>, ce: true, we: false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
c: true, w: false, t: false, l: false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> <*> <*> = <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> <*> in the <*> <*> 
isCurrentBySim()=false 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
getOrInflateState subId:<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
isCurrentBySim()=false 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
getOrInflateState subId:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
mSimSubId:<*> onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
isCardAbsent slot:<*> slotState:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> 
chinaDateTime:晚上<*>:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
isCurrentBySim()=false 
onSignal: mSubId=<*>,currDataSubID=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
getOrInflateState subId:<*> 
Java_com_tencent_mm_plugin_imgenc_MMIMAGEENCJNI_free <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> 
updateTint: tint=<*> 
updateNotificationShade 
generateAddAnimation:null, false 
updateTint: tint=<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
updateNotificationShade 
removeNotificationChildren 
<*> <*> <*> 
ImsServiceSub : handleSsac voice = <*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> pid = <*> 
<*>|Enter setCurrentDevice(). 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
isCloneProcess = false 
transferRemoteInputFocus: <*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
onNotificationVisibilityChanged called 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
onProposedRotationChanged, rotation=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*> 
updateNotificationShade 
removeNotificationChildren 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
state.clipTopAmount:<*>, i:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
Split enqueueing broadcast <*> <*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
received cell-signal:<*> 
suspendAutohide 
onExpandingStarted 
onExpandingStarted 
<*> <*> <*> <*> <*> <*> 
updateClipping isOverlap:true 
transitionTo:mode=<*>, isEmuiStyle=false 
<*> <*> <*> 
setScrollingEnabled: false 
setProgress: <*> 
state.clipTopAmount:<*>, i:<*> 
updateClipping isOverlap:true 
updateDimmedActivatedHideSensitive overlap:true 
onExpandingStarted 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
<*> <*> <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> 
getRecentTasks: topActivity=ComponentInfo{com.huawei.intelligent/com.huawei.intelligent.main.TodoActivity} 
state.clipTopAmount:<*>, i:<*> 
state.clipTopAmount:<*>, i:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
updateClipping isOverlap:true 
<*> <*> = <*>.<*>, <*> = <*>.<*>, <*> = <*>.<*>, <*> <*> <*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*>.<*>, <*> = <*>.<*>, <*> = <*>.<*>, <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
com.qti.dpmserviceapp <*> 
com.android.bluetooth <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
start requestStepResult 
getSleepData false 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> is null <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> <*> is <*> <*> <*> is <*> 
<*> is null <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> is null <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
<*> <*> <*> <*> = <*>, <*> = false, <*> = false 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*> 
<*> <*> = <*> <*> = <*> 
<*> <*> <*> = false 
CommandQueue, setBarBackgroundColor 
<*> <*> <*> 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
<*> <*> = <*>.<*>, <*> = <*>.<*>, <*> = <*>.<*>, <*> = <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> : <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> 
Create obj success use class <*> 
Create obj success use class <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*>, <*> = false, <*> = false 
<*> <*> <*> <*> <*> : <*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
getTempInfo error: null, <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
onProposedRotationChanged, rotation=<*> 
ImsServiceSub : handleSsac voice = <*> 
isCurrentBySim()=false 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
doTemperatueWarning, health:<*> 
updateChargingLocked: charging=false 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> <*> <*> 
doTemperatueWarning, health:<*> 
Handle message: <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
handleBatteryUpdate 
<*> <*> <*> OK <*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, <*> <*> 
setAlarmsPending ... 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
RCV <- {<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
setUri uri=content://media/internal/audio/media/<*> 
checkTimeOver true 
<*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> u0 euid: <*> <*> euid: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
t:false, fl: false, p: <*>, ce: true, we: false 
Watch Thread{<*>} <*> <*> <*> <*> = <*> 
csr 
c: true, w: false, t: false, l: false 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
updateDimmedActivatedHideSensitive overlap:false 
mDateString is: <*>月<*>日星期六 
<*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
isCurrentBySim()=false 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> = false, <*> = false, <*> <*> <*> <*> <*> <*> <*> = false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
is3GCalling is false,mCdmaSlot is -<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*> <*> <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
DefaultState what=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
onDataActivity: direction=<*> 
back light level before map = <*> 
received cell-signal:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x4,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> : <*> false 
Dis-Feature : <*> 
<*> <*> <*> <*> <*> 
receive data len = <*> 
qsc_decode end 
onAcquired(<*>) 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
java.lang.Exception 
<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>, 
HWCDisplay::SetPowerMode: display = <*>, mode = <*> 
isSimPinSecure mSimDatas is null or empty 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> = <*> 
RCV <- {<*> <*> Tethering stats list completed} 
onDataActivity: direction=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
removeNotificationChildren 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
Apply <*> <*> <*> 
Apply <*> <*> <*> 
<*> <*> <*> <*> 
set notification panel padding = <*> 
Cache monitor msg as screen_off 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
poll before: g_monitor_fd =<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
mVSimCurCardType is -<*> 
received cell-signal:<*> 
<*> is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> is <*> 
Cache monitor msg as screen_off 
sending broadcast to Pid = <*>, Uid = <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
m1: false 
HsmPackageManager:init locale:zh_CN 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
onDataActivity: direction=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
######### CMD_QUERY_PKTS ######## 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
<*> <*> <*> 
DefaultState what=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
m1: false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*> <*> <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
<*> <*> <*> <*> 
<*> <*> <*> <*> java.net.SocketException: Socket is closed 
ImsSenderRxr : <*> data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
set notification panel padding = <*> 
updateClipping isOverlap:false 
isCurrentBySim()=false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
onSignal: mSubId=<*>,currDataSubID=<*> 
doTemperatueWarning, health:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
getStatic,count:<*>,work status:false 
isWiredHeadsetOn... 
<*> <*> <*> <*> <*> in the <*> <*> <*> <*> <*> in the <*> <*> 
hw_set_colortemperature: end-- 
handleNotifyScreenTurningOn 
send data return = <*> 
notifyScreenTurnedOn 
qsc_send_cmd finish 
onAuthenticated <*> 
<*> <*> <*> <*> <*> 
<*> result = <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
updateNotificationShade 
begin 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
collapsePanel<*> 
Split enqueueing broadcast <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> need to <*> <*> <*> = <*> <*> <*> = <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> test Type =<*> 
receive data len = <*> 
qsc_send_cmd finish 
ImsSenderRxr : <*> data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
<*> <*> <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
Model onReceive user=UserHandle{<*>} 
receive data len = <*> 
<*> <*> <*> <*> <*> 
Calling a method in the system process without a <*> <*> <*> <*> <*> <*> <*> 
Sending non-protected broadcast <*> from system <*> <*> <*> 
[LogSendProgressReceiver.onReceive]Start! 
<*> <*> <*> 
read Events lux: <*>.<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
updateLightsLocked --> <*> <*> <*> <*> 
Apply window <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
notifyUiVisibilityChanged:vis=0xc0000600, SystemUiVisibility=0xc<*> 
suspendAutohide 
updateDimmedActivatedHideSensitive overlap:false 
updateClipping isOverlap:false 
updateDimmedActivatedHideSensitive overlap:false 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
[FeedbackService.resumeIssueMaker.run] End 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> = <*>, <*> <*> <*> <*> = false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateClipping isOverlap:false 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> = <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
c: true, w: false, t: false, l: false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> <*> typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
read Events lux: <*>.<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
received cell-signal:<*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
not in link monitoring mode, ignore TCP result . 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
AutoMode=true,Target=<*>,Current=<*>,amount=<*>.<*>,duration=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
isCurrentBySim()=false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
<*> <*> <*> <*> <*> is <*> 
<*> <*> <*> <*> <*> <*> 
FingerprintService authenticate 
startAuthentication(com.android.systemui) 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
handleNotifyScreenTurnedOff 
Animating brightness: target=<*>, rate=<*> 
Reading a NULL string not supported here. 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
<*> <*> rt=<*>/<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
CtrlSocket Receiver,disable: <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> : <*> false 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
updateLowPowerMode,isPowerSaveMode:falseisInteractive:false 
is3GCalling is false,mCdmaSlot is -<*> 
send: <*> 
MagicLink2-BroadcastReceiver:====>ACTION_SCREEN_OFF 
<*> <*> type = <*> 
Releasing suspend blocker "PowerManagerService.Broadcasts". 
OverscanTimeout run 
<*> <*> <*> --> <*> <*> 
collapseAllGroups: 
applyIconTint ignore 
<*> <*> <*> <*> <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
received cell-signal:<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
received cell-signal:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
Error reading charge file 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
cancelNotification,index:-<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
handle_exception_events enter 
<*> <*> <*> <*> <*> 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
<*> <*> <*> to uc.huawei.com:<*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
[SocketRead_<*>:<*>:<*>-<*>]ctrlSocket success(android/null:<*>) 
hideTraffic 
<*> <*> <*> <*> <*> <*> 
isMusicActive... 
<*> <*> <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> 
<*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Watch Thread{<*>} <*> <*> <*> <*> = <*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =time_tick 
<*> <*> <*> <*> 
EventCenter Get <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
<*> <*> <*> <*> <*> <*> <*> 
received cell-signal:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
c: true, w: false, t: false, l: false 
received cell-signal:<*> 
not in link monitoring mode, ignore TCP result . 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
<*> <*> <*> <*> <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
m1: false 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: <*> <*> <*> id = <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
Launcher.Folder childCount: <*> 
<*> <*> <*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
ImsServiceSubHandler : Message received: what = <*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
c: true, w: false, t: false, l: false 
c: true, w: false, t: false, l: false 
Watch Thread{<*>} <*> <*> <*> <*> = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
received cell-signal:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Launcher.Folder childCount: <*> 
<*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
c: true, w: false, t: false, l: false 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
poll before: g_monitor_fd =<*> 
isMusicActive... 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
m1: false 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
csr 
<*> <*> <*> <*> <*> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
getTempInfo error: null, <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> change to <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
queryIntentActivitiesAsUser size <*> <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> ==================== TCP CLIENT <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> = false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
isWiredHeadsetOn... 
received cell-signal:<*> 
<*> <*> <*> <*> events in the past <*> <*> <*> events in the past <*> 
c: true, w: false, t: false, l: false 
received cell-signal:<*> 
<*> <*> <*> <*> <*> <*> 
isMusicActive... 
poll before: g_monitor_fd =<*> 
getStatic,count:<*>,work status:false 
is3GCalling is false,mCdmaSlot is -<*> 
poll before: g_monitor_fd =<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> mode to <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
Launcher.Folder childCount: <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateClipping isOverlap:false 
c: true, w: false, t: false, l: false 
isMusicActive... 
isWiredHeadsetOn... 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
c: true, w: false, t: false, l: false 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> u0 euid: <*> <*> euid: <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*>|logicalDealBroadcastEvent : Intent { <*> <*> (has extras) } 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
isCurrentBySim()=false 
send_cmd_kernel: cmd=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
refreshBatteryInfo: null 
<*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
isCurrentBySim()=false 
<*> <*> <*> 
not 3G net type. do nothing. 
Received kernel message payload: event <*> 
Sending non-protected broadcast <*> from system <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
at com.huawei.android.bastet.HwBastet.<init>(HwBastet.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
ImsServiceSubHandler : Message received: what = <*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
is3GCalling is false,mCdmaSlot is -<*> 
isCardAbsent slot:<*> slotState:<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
isMusicActive... 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
isMusicActive... 
onDataActivity: direction=<*> 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to <*> <*> <*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
getTempInfo error: null, <*> 
mSendService start 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
onDataActivity: direction=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
received cell-signal:<*> 
<*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
csr 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
poll before: g_monitor_fd =<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
handle_exception_events enter 
received cell-signal:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
isMusicActive... 
EventHub monitor: no key events in the past <*> <*> <*> events in the past <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> temp_old :<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> 
isMusicActive... 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
onSignal: mSubId=<*>,currDataSubID=<*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
set notification panel padding = <*> 
PowerStatsHelper:minAveragePowerForCpu= <*>.<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
isMusicActive... 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> 
received cell-signal:<*> 
m1: false 
Received kernel message payload: event <*> 
wifiSleepPolicy:<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Error reading charge file 
<*> reason = <*> 
<*> <*> <*> 
updateClipping isOverlap:false 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
<*> <*> <*> <*> java.net.SocketException: Socket is closed 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch delay to <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<*> <*> <*> <*> <*> <*> <*> <*> 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
isMusicActive... 
<*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
received cell-signal:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
received cell-signal:<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
t:false, fl: false, p: <*>, ce: true, we: false 
set notification panel padding = <*> 
hideTraffic 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
isCurrentBySim()=false 
<*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
######### CMD_QUERY_PKTS ######## 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
######### CMD_QUERY_PKTS ######## 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
csr 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
wifiSleepPolicy:<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> <*> <*> <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
ImsServiceSubHandler : Message received: what = <*> 
isCurrentBySim()=false 
poll before: g_monitor_fd =<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
c: true, w: false, t: false, l: false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
mVSimCurCardType is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
getStatic,count:<*>,work status:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
becomeActiveLocked, reason = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> <*> --> <*> 
<*> <*> <*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
onStartedWakingUp 
<*> <*> <*> u0 euid: <*> <*> euid: <*> 
remove(null) changed bounds; rebatching 
deleteOverTimeLog 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
cancelNotificationWithTag pid <*>,uid = <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> action = android.intent.action.SCREEN_ON 
<*>|logicalDealBroadcastEvent : Intent { <*> <*> <*> 
updateTint: tint=<*> 
<*> <*> <*> <*> 
set notification panel padding = <*> 
Releasing suspend blocker "PowerManagerService.Broadcasts". 
<*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
not in link monitoring mode, ignore TCP result . 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
read Events lux: <*>.<*> 
<*> <*> = false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
not 3G net type. do nothing. 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> temp_new :<*> temp_old :<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
getTempInfo error: null, <*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = <*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> u0 euid: <*> <*> euid: <*> 
AutoCleanReceiveServer:receive action:android.intent.action.ACTION_POWER_CONNECTED 
process buffer and get message 
<*> <*> <*> 
kWhatSetDataSource 
MediaExtractor::CreateFromService (null) 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
platform_set_channel_map channel_count:<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
notifyUiVisibilityChanged:vis=0x8608, SystemUiVisibility=0x<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> due to <*> <*> <*> <*> 
<*> <*> <*> 
DisplayPowerController updatePowerState <*> <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
showPrimarySecurityScreen(turningOff=false) 
resetPagerState 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
LightSensor, enable, <*>: <*> 
C onScreenOff 
received cell-signal:<*> 
set notification panel padding = <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
onSignal: mSubId=<*>,currDataSubID=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
Cache monitor msg as screen_off 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
c: true, w: false, t: false, l: false 
poll before: g_monitor_fd =<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
ImsServiceSubHandler : Message received: what = <*> 
mVSimCurCardType is -<*> 
received cell-signal:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
t:false, fl: false, p: <*>, ce: true, we: false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
poll before: g_monitor_fd =<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
received cell-signal:<*> 
m1: false 
becomeActiveLocked, reason = <*> 
<*> <*> <*> <*> <*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
MSG_QUERY_TCP_INFO called,count:<*> 
csr 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> => [END] <*> <*> 
Launcher.Folder childCount: <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
<*> <*> <*> <*> <*> <*> 
csr 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
m1: false 
report state:<*> event type:<*> pid:<*> uid:<*> <*> <*> pid: <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*> <*> <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
isWiredHeadsetOn... 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
mDateString is: <*>月<*>日星期六 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
m1: false 
onDataActivity: direction=<*> 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> action = <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleDreamLocked 
<*> <*> <*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = <*> <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
not in link monitoring mode, ignore TCP result . 
isMusicActive... 
isWiredHeadsetOn... 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> <*> 
<*> TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is closed 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> third party <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> mode to <*> 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
<*> TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<*> <*> <*> <*> <*> 
monitor check touch devices 
getTempInfo error: null, <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
no controller energy info supplied 
isCurrentBySim()=false 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
received cell-signal:<*> 
m1: false 
<*> <*> <*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
received cell-signal:<*> 
m1: false 
<*> <*> <*> 
getTempInfo error: null, <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
getKickTimerByUserType: <*> 
formatChinaDateTime equals. 
formatChinaDateTime, change to China normalTime:晚上<*>:<*> 
ImsServiceSub : handleSsac voice = <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
</script> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
poll before: g_monitor_fd =<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
onSignal: mSubId=<*>,currDataSubID=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
######### CMD_QUERY_PKTS ######## 
poll before: g_monitor_fd =<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
m1: false 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
getOrInflateState subId:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
isWiredHeadsetOn... 
getOrInflateState subId:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
isWiredHeadsetOn... 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
received cell-signal:<*> 
formatChinaDateTime, change to China normalTime:晚上<*>:<*> 
ImsServiceSub : handleSsac voice = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> not in <*> <*> 
<*> <*> <*> <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
ImsServiceSubHandler : Message received: what = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
getOrInflateState subId:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
received cell-signal:<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
handle_exception_events enter 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
handleDreamLocked 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
<*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
c: true, w: false, t: false, l: false 
chinaDateTime:晚上<*>:<*> 
[SocketRead_<*>:<*>:<*>-<*>]isSupportCtrlSocketV2, ctrlSocket(android/null:<*>) 
sending broadcast to Pid = <*>, Uid = <*> 
set notification panel padding = <*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
isMusicActive... 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
send_cmd_kernel: cmd=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
getOrInflateState subId:<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
isMusicActive... 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
received cell-signal:<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
formatChinaDateTime equals. 
begin of formatChinaDateRange <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
send: <*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
create: <*> 
send: <*> 
no controller energy info supplied 
send: <*> 
handleDreamLocked 
getStatic,count:<*>,work status:false 
received cell-signal:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
c: true, w: false, t: false, l: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
t:false, fl: false, p: <*>, ce: true, we: false 
getStatic,count:<*>,work status:false 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
handleDreamLocked 
<*> <*> <*> 
<*> <*> <*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isMusicActive... 
######### CMD_QUERY_PKTS ######## 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
t:false, fl: false, p: <*>, ce: true, we: false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
hw_get_smart_display_supported: end-- 
bh1745-light calling driver <*> 
LightSensor, enable, <*>: flags=<*> 
set notification panel padding = <*> 
<*> <*> <*> <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
setBackgroundAlpha:alpha=<*>.<*> 
apply skiped :<*> 
<*> <*> <*> <*> <*> <*> (has extras) } 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> = true <*> = true 
<*> <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
RCV <- {<*> <*> Tethering stats list completed} 
<*> <*> <*> <*> 
[ReceiverUtils.reportVersionInfo] 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
<*> <*> <*> 
<*> <*> <*> <*> = false 
updateClipping isOverlap:false 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> id is <*> id is <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mActiveIface: null 
send data return = <*> 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
<*> TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is closed 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> to uc.huawei.com:<*> 
mDateString is: <*>月<*>日星期六 
<*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
begin 
out_standby: exit 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
querySoundEffectsEnabled... 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
search 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
isCurrentBySim()=false 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
JNI_OnLoad 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> = false 
Split enqueueing broadcast <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
<*> <*> <*> 
showWindow: showing! 
fingersense_classify_touch() finished 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
fingersense_classify_touch() finished 
Calling fingersense_touch_up() 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Calling fingersense_classify_touch() 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
fingersense_classify_touch() finished 
Calling fingersense_classify_touch() 
c: true, w: false, t: false, l: false 
isCurrentBySim()=false 
Calling fingersense_touch_up() 
Split enqueueing broadcast <*> <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
MyOrientationListener: updateRotation. 
<*> temp_new :<*> temp_old :<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
m1: false 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
csr 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
isSimPinSecure mSimDatas is null or empty 
isSimPinSecure mSimDatas is null or empty 
qsc_decode end 
qsc_decode end 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
becomeInactiveIfAppropriateLocked() 
at com.huawei.keyguard.support.magazine.MagazineWallpaper$<*>.onMagazinePicLoaded(MagazineWallpaper.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> : <*> false 
mTiffStream skip = <*> 
<*> <*> is null <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
<*> <*> <*> = false 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
updateLowPowerMode,isPowerSaveMode:falseisInteractive:false 
disableGps:false isEnabled()=true 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
NatTrafficNotifyService:delta byte = <*> no traffic delta = 0Traffic state is <*> 
handle_exception_events enter 
msg = <*> received 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> <*> <*> <*> <*> <*> <*> 
Reset 
updateNotificationShade 
showPrimarySecurityScreen(turningOff=false) 
<*> <*> <*> 
setKeyguardWallpaperAVGColor:<*> 
Handle message: <*> 
<*> <*> <*> <*> <*> 
set notification panel padding = <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
Error reading charge file 
<*> <*> <*> 
doTemperatueWarning, health:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> <*> (has extras) } on bgkeyapp queue 
received cell-signal:<*> 
<*> <*> <*> <*> <*> report_threshold:<*> 
send_cmd_kernel: cmd=<*> 
poll before: g_monitor_fd =<*> 
becomeActiveLocked, reason = <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
cancelNotificationWithTag pid <*>,uid = <*>,tag = <*> <*> <*> 
hideTraffic 
updateClipping isOverlap:false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
received cell-signal:<*> 
not in link monitoring mode, ignore TCP result . 
isMusicActive... 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
queryIntentActivitiesAsUser size <*> <*> <*> 
<*> <*> : <*> 
received cell-signal:<*> 
csr 
<*> <*> <*> <*> <*> <*> <*> 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
SND -> <*> <*> <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
RCV <- {<*> <*> Tethering stats list completed} 
<*> <*> <*> <*> 
chinaDateTime:半夜<*>:<*> 
formatChinaDateTime, change to <*> <*> 
hideTraffic 
mDateString is: <*>月<*>日星期六 
<*> <*> <*> <*> 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Launcher.Folder childCount: <*> 
poll before: g_monitor_fd =<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> <*> state = <*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
monitor check touch devices 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
msg = <*> received 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
Received kernel message payload: event <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
received cell-signal:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
received cell-signal:<*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
set notification panel padding = <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
process buffer and get message 
send: <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
send_cmd_kernel: cmd=<*> 
<*> <*> <*> <*> <*> <*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
at android.os.Looper.loop(Looper.java:<*>) 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
InputDispatcher::monitor frozen check! 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> report_threshold:<*> 
received cell-signal:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
getOrInflateState subId:<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
setColorTemperature:<*> 
<*> <*> <*> <*> 
ambient lux=<*>.<*>,timeStamp =<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
setColorTemperatureAccordingToSetting 
setColorTemperature:<*> 
hw_set_colortemperature: start++ 
<*> <*> <*> <*> <*> <*> <*> 
onShowStatusChange show:false 
receive data len = <*> 
Apply window <*> <*> 
updateQsState:false 
refreshState=sound, RingModeState[,icon=com.android.systemui.qs.QSTile$DrawableIcon@8fb5eb0,label=响铃,labelTint=<*>,textChangedDelay=<*>,contentDescription=响铃,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=true,mode=<*>] 
refreshState=location, BooleanState[,icon=ResourceIcon[resId=0x7f020218],label=位置信息,labelTint=<*>,textChangedDelay=<*>,contentDescription=位置报告功能开启。,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=true] 
<*> <*> <*> <*> <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
RCV <- {<*> <*> Tethering stats list completed} 
closeQs 
resumeSuspendedAutohide 
ACDB -> <*> <*> <*> <*> 
ACDB -> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> is <*> 
<*> <*> <*> target=com.android.internal.util.StateMachine$SmHandler } 
<*> <*> rt=<*>/<*> <*> <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
<*> <*> <*> <*> <*> <*> 
<*> off notificationLight 
ApStaDisabledState what=<*> 
<*> <*> does not <*> 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
<*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
<*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*>| <*> <*> <*> 
<*> <*> <*> of type <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Calling fingersense_classify_touch() 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
read Events lux: <*>.<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
fingersense_classify_touch() finished 
onSignal: mSubId=<*>,currDataSubID=<*> 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
getTempInfo error: null, <*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
not 3G net type. do nothing. 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
fingersense_touch_up() finished 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
c: true, w: false, t: false, l: false 
Calling fingersense_touch_up() 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
<*> <*> <*> = false 
suspendAutohide 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> reason = <*> 
<*> <*> = <*>.<*>, <*> = <*>.<*>, <*> = <*>.<*>, <*> = <*>.<*> 
<*> <*> <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
resumeSuspendedAutohide 
received cell-signal:<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
Client requesting input be hidden, pid=<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
moveTaskToTop mTaskChanged:true 
Invalid profile no. <*>, total profiles <*> only 
<*> <*> <*> 
<*> <*> = <*> <*> = <*> 
Launcher doResumeWork() 
<*> <*> <*> <*> <*> <*> ms 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
setBackgroundColor:new=<*>, old=<*> 
scheduleCheckFreezeScreen sendMessageDelayed 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
onDataActivity: direction=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
getOrInflateState subId:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
sending broadcast to Pid = <*>, Uid = <*> 
<*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
received cell-signal:<*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mThermalService is NULL! 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> failed to <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
fingersense_classify_touch() finished 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
Handle message: <*> 
<*> <*> <*>, uid: <*>, pid: <*> 
fingersense_classify_touch() finished 
fingersense_touch_up() finished 
mSimSubId:<*> onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
received cell-signal:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
fingersense_touch_up() finished 
<*> <*> <*> <*> <*> <*> <*> 
fingersense_classify_touch() finished 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*> <*> <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
ImsServiceSubHandler : Message received: what = <*> 
is3GCalling is false,mCdmaSlot is -<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
c: true, w: false, t: false, l: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
c: true, w: false, t: false, l: false 
fingersense_touch_up() finished 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
isCurrentBySim()=false 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
MediaPlayerService::getOMX 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> <*> type = <*> 
updateTint: tint=<*> 
<*> <*> <*> 
onHeadsUpStateChanged:<*>|com.tencent.mm|<*>|null|<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
<*> <*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
collapsePanel<*> 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Apply window <*> <*> 
<*> <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCurrentBySim()=false 
<*> <*> = <*>.<*>, <*> = <*>.<*>, <*> = <*>.<*>, <*> = <*>.<*> 
search 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> <*> (has extras) } 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> = false, <*> = <*> 
Launcher.Folder childCount: <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> <*> (has extras) } on bgkeyapp queue 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCardAbsent slot:<*> slotState:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Access denied finding property "persist.sys.smart_power" 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
is3GCalling is false,mCdmaSlot is -<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
fingersense_classify_touch() finished 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
fingersense_touch_up() finished 
fingersense_touch_up() finished 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
is3GCalling is false,mCdmaSlot is -<*> 
c: true, w: false, t: false, l: false 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
release:lock=<*>, flg=0x0, <*> <*> <*> uid=<*>, pid=<*> 
send_cmd_kernel: cmd=<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
not 3G net type. do nothing. 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
is3GCalling is false,mCdmaSlot is -<*> 
action:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, mPermissionType:<*> 
isCardAbsent slot:<*> slotState:<*> 
EventHub monitor: no key events in the past <*> 
is3GCalling is false,mCdmaSlot is -<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCardAbsent slot:<*> slotState:<*> 
<*> <*> <*> <*> <*> <*> <*> 
fingersense_touch_up() finished 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
received cell-signal:<*> 
csr 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
showSoftInput() 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
onDataActivity: direction=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
fingersense_touch_up() finished 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
<*> <*> <*> <*> <*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
received cell-signal:<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
monitor check touch devices 
fingersense_classify_touch() finished 
Calling fingersense_touch_up() 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
fingersense_classify_touch() finished 
poll before: g_monitor_fd =<*> 
fingersense_touch_up() finished 
Calling fingersense_touch_up() 
fingersense_touch_up() finished 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
Calling fingersense_classify_touch() 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
c: true, w: false, t: false, l: false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
Handle message: <*> 
fingersense_touch_up() finished 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
------------startInput-------------- 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
not 3G net type. do nothing. 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
at java.io.FileInputStream.open(Native Method) 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
MSG_QUERY_TCP_INFO called,count:<*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Calling fingersense_classify_touch() 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
mVSimCurCardType is -<*> 
received cell-signal:<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
not 3G net type. do nothing. 
isCardAbsent slot:<*> slotState:<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Calling fingersense_touch_up() 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Calling fingersense_classify_touch() 
Calling fingersense_touch_up() 
fingersense_touch_up() finished 
Calling fingersense_touch_up() 
fingersense_classify_touch() finished 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
mVSimCurCardType is -<*> 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> <*> <*> <*> 
fingersense_touch_up() finished 
fingersense_classify_touch() finished 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
######### CMD_QUERY_PKTS ######## 
ImsServiceSubHandler : Message received: what = <*> 
onDataActivity: direction=<*> 
fingersense_classify_touch() finished 
fingersense_touch_up() finished 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
fingersense_classify_touch() finished 
Calling fingersense_touch_up() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
fingersense_classify_touch() finished 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isBluetoothScoOn... 
Client requesting input be hidden, pid=<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
received cell-signal:<*> 
c: true, w: false, t: false, l: false 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
EventHub monitor: no key events in the past <*> 
<*> <*> <*> 
Unfinished business... 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> <*> action = <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Sending non-protected broadcast <*> from system <*> <*> <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> change to <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> third party <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: <*> <*> <*> id = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> id is <*> id is <*> 
isSimPinSecure mSimDatas is null or empty 
begin 
fpc_tac_begin_identify---need_liveness_authentication: <*> 
qsc_decode end 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> 
DisplayPowerState :OFF 
Reading a NULL string not supported here. 
<*> <*> <*> <*> : <*> false 
audio_extn_set_anc_parameters: anc_enabled:<*> 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
onReceive, action:android.intent.action.SCREEN_OFF 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> to uc.huawei.com:<*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> = <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateNotificationShade 
<*> <*> <*> 
<*> = true 
isSimPinSecure mSimDatas is null or empty 
<*> <*> <*> <*> 
set notification panel padding = <*> 
isCloneProcess = false 
onShowStatusChange show:false 
<*> <*> <*> <*> <*> <*> <*> type <*> when <*> <*> 
[ReceiverDispatcher-<*>]resetBastet(android/null:<*>) 
<*> <*> <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
received cell-signal:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
isWiredHeadsetOn... 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
onSignal: mSubId=<*>,currDataSubID=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
send_cmd_kernel: cmd=<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
<*> <*> <*> <*> <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
updateChargingLocked: charging=true 
DefaultState what=<*> 
updateDimmedActivatedHideSensitive overlap:false 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> to uc.huawei.com:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> id = <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> not supported <*> 
Acquiring suspend blocker <*> 
fingersense_on_resume() finished 
<*> <*> <*> <*> 
<*> <*> <*> status = <*>, id = <*> 
onAcquired <*> 
KGSvcFp onAuthenticationAcquired.<*> 
QSEECom_send_cmd return! 
<*> <*> <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, <*> <*> screenAutoBrightness=<*>, userId=<*> 
KGSvcCall onScreenTurnedOn. 
<*> <*> <*> 
begin 
<*> <*> <*> <*> 
qsc_send_cmd finish 
onAcquired(<*>) 
<*> <*> <*> 
<*> <*> <*> <*> <*> : <*> 
qsc_send_cmd finish 
FpPerformance onFingerAuthenticated! 
<*> <*> <*> = <*> 
hideKeyguard:false 
send data return = <*> 
send data return = <*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
Apply window Height <*> 
<*> <*> <*> 
Invalid profile no. <*>, total profiles <*> only 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> 
enable_audio_route: exit 
[UserPresentReceiver.onReceive]Start! 
[LoginActivity.isLoggedIn]isLoggedIn:true 
<*> <*> <*> 
<*> <*> <*> <*> = false 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =time_tick 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
WatchThread{<*>} TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> does not <*> 
<*> <*> <*> 
<*> <*> = <*> 
QSEECom_send_cmd return! 
send data return = <*> 
begin 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
shouldBlockLocation running ... 
<*> TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is closed 
<*> <*> <*> <*> to uc.huawei.com:<*> 
<*> <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
formatChinaDateTime equals. 
<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> is not <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
AFTER CALLBACK 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ambient lux=<*>.<*>,timeStamp =<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
getOrInflateState subId:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> <*> <*> 
<*> temp_new :<*> temp_old :<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
isCurrentBySim()=false 
<*> <*> <*> <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
<*> = <*> = <*> 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Client requesting input be <*> <*> 
Calling fingersense_touch_up() 
Calling fingersense_classify_touch() 
fingersense_classify_touch() finished 
fingersense_touch_up() finished 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
bh1745-light calling driver setDelay <*> ms 
MSG_QUERY_TCP_INFO called,count:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Calling fingersense_classify_touch() 
Calling fingersense_classify_touch() 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
isCurrentBySim()=false 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
isCurrentBySim()=false 
not 3G net type. do nothing. 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
mVSimCurCardType is -<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Calling fingersense_classify_touch() 
not 3G net type. do nothing. 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> 
c: true, w: false, t: false, l: false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
Calling fingersense_touch_up() 
is3GCalling is false,mCdmaSlot is -<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
fingersense_touch_up() finished 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
Calling fingersense_touch_up() 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onDataActivity: direction=<*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
is3GCalling is false,mCdmaSlot is -<*> 
fingersense_classify_touch() finished 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
received cell-signal:<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Calling fingersense_classify_touch() 
<*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> mode to <*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> 
fingersense_touch_up() finished 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> is not <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to <*> <*> <*> 
Calling fingersense_classify_touch() 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
fingersense_classify_touch() finished 
MSG_QUERY_TCP_INFO called,count:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
fingersense_classify_touch() finished 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Client requesting input be <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
fingersense_touch_up() finished 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
c: true, w: false, t: false, l: false 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
fingersense_classify_touch() finished 
<*> <*> <*> <*> <*> <*> <*> 
received cell-signal:<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
<*> <*> <*> <*> <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
cancelNotification,index:-<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
action:com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver, mPermissionType:<*> 
received cell-signal:<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Received kernel message payload: event <*> 
Client requesting input be hidden, pid=<*> 
begin 
fpc_tac_send_set_arbitrary_data_cmd:ok, response:<*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
getMode... 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper$<*>.onMagazinePicLoaded(KeyguardWallpaper.java:<*>) 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
<*> <*> <*> <*> 
mTiffStream skip = <*> 
<*> <*> <*> 
onDataActivity: direction=<*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> is not <*> 
audio_extn_get_parameters: returns 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
Apply window Height <*> 
apply skiped :<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateClipping isOverlap:true 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
Apply window Height <*> 
<*> <*> <*> <*> <*> <*> <*> 
Apply window Height <*> 
set notification panel padding = <*> 
notifyUiVisibilityChanged:vis=0x8608, SystemUiVisibility=0x<*> 
Provider.call: getPrefString 
<*> <*> <*> <*> <*> 
updateClipping isOverlap:false 
getOrInflateState subId:<*> 
isDisplayFeatureSupported feature:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
qsc_decode end 
Apply window Height MATCH_PARENT 
<*> <*> <*> = <*> 
removeSensor,mHandles:{} 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
<*> <*> <*> <*> false 
send data return = <*> 
QSEECom_send_cmd return! 
receive data len = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> Intent { <*> <*> <*> <*> <*> <*> <*> <*> <*> due to <*> <*> <*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> <*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateNotificationShade 
<*> <*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
<*>|Enter getFirstActiveDeviceInfo(). 
<*>|Enter stopReconnectBLE(). 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> = <*> <*> 
get_spk_pa_type: pa is max<*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
receive data len = <*> 
QSEECom_send_cmd return! 
updateLowPowerMode,isPowerSaveMode:falseisInteractive:true 
mSimSubId:<*> onDataActivity: direction=<*> 
cancelNotificationLocked,remove =com.tencent.mm 
onHeadsUpStateChanged:<*>|com.tencent.mm|<*>|null|<*> 
removeNotificationViews:<*>|com.tencent.mm|<*>|null|<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
updateClipping isOverlap:true 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
qsc_send_cmd finish 
send: <*> 
<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
LISTEN_CELL_LOCATION uid:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
applyInPlace=true shouldPeek=false alertAgain=true 
qsc_decode end 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
workerFunction STATE_NAVIGATION 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
NatTrafficNotifyService:delta byte = <*> no traffic delta = 0Traffic state is <*> 
<*> <*> <*> <*> <*> to uc.huawei.com:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
<*> <*> <*> 
CloudRecordGetCfgInfoRspNotify leave 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
m1: false 
<*> <*> <*> 
csr 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*> 
<*> connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
fingersense_classify_touch() finished 
fingersense_touch_up() finished 
getRingerMode... 
formatChinaDateTime, change to <*> <*> 
<*> <*> <*> <*> <*> 
fingersense_touch_up() finished 
fingersense_classify_touch() finished 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Calling fingersense_classify_touch() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCardAbsent slot:<*> slotState:<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
poll before: g_monitor_fd =<*> 
not 3G net type. do nothing. 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Calling fingersense_classify_touch() 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Calling fingersense_classify_touch() 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
m1: false 
Calling fingersense_classify_touch() 
Calling fingersense_classify_touch() 
Calling fingersense_classify_touch() 
Received kernel message payload: event <*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Calling fingersense_classify_touch() 
fingersense_touch_up() finished 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
action:null, mPermissionType:<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
Calling fingersense_touch_up() 
fingersense_classify_touch() finished 
fingersense_touch_up() finished 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Calling fingersense_touch_up() 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
csr 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
send_cmd_kernel: cmd=<*> 
Calling fingersense_touch_up() 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*> <*> <*> shut down now connect 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
<*> <*> <*> 
fingersense_touch_up() finished 
showSoftInput() 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
######### CMD_QUERY_PKTS ######## 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
Calling fingersense_touch_up() 
isCurrentBySim()=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
m1: false 
onDataActivity: direction=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:false isRoaming:false 
not 3G net type. do nothing. 
Calling fingersense_classify_touch() 
fingersense_classify_touch() finished 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
MSG_QUERY_TCP_INFO called,count:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> is <*> 
Calling fingersense_classify_touch() 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
is3GCalling is false,mCdmaSlot is -<*> 
fingersense_classify_touch() finished 
<*> <*> <*> <*> <*> <*> <*> 
Calling fingersense_touch_up() 
<*> <*> <*> <*> 
fingersense_classify_touch() finished 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> 
c: true, w: false, t: false, l: false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
c: true, w: false, t: false, l: false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Finished business... 
<*> <*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> : <*> 
mTiffStream skip = <*> 
send data return = <*> 
receive data len = <*> 
DisplayPowerState :OFF 
<*> <*> <*> <*> <*> <*> 
onFinishedGoingToSleep(<*>) 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
formatChinaDateTime, change to <*> <*> 
removeNotificationChildren 
set notification panel padding = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
getTempInfo error: null, <*> 
send_cmd_kernel: cmd=<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> <*> (has extras) } on bgkeyapp queue 
<*> <*> <*> <*> <*> report_threshold:<*> 
<*> <*> <*> line <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> <*> 
isCurrentBySim()=false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> third party <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
WatchThread{<*>} TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
<*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
at android.os.Handler.handleCallback(Handler.java:<*>) 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
m1: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
t:false, fl: false, p: <*>, ce: true, we: false 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
setColorTemperatureAccordingToSetting 
setColorTemperatureAccordingToSetting 
<*> <*> <*> <*> <*> 
receive data len = <*> 
QSEECom_send_cmd return! 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
action:android.intent.action.USER_PRESENT, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> <*> 
Invalid profile no. <*>, total profiles <*> only 
action:android.intent.action.SCREEN_ON, mPermissionType:<*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> <*> 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
instantCollapse 
collapsePanel<*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
[PollingService.onStartCommand]Start 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
receive data len = <*> 
sendScreenOnEvent enter. 
RCV <- {<*> <*> Tethering stats list completed} 
updateLowPowerMode,isPowerSaveMode:falseisInteractive:true 
left handleScrnOnOffTimeStats, mScrnOffAccTime = <*>, mScrnOffAccTime = <*>, mScrnOnAccTime = <*> 
connect :true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> mode to <*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
<*> <*> <*> <*> <*> to uc.huawei.com:<*> 
removeNotificationChildren 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
qsc_decode end 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> java.net.SocketException: Socket <*> 
<*> <*> : <*> 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
begin 
<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> of type <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
onDataActivity: direction=<*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> <*> <*> <*> does not <*> 
c: true, w: false, t: false, l: false 
<*> 2DSDR: <*> <*> <*> <*> SDR <*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
fingersense_touch_up() finished 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
isCurrentBySim()=false 
Calling fingersense_touch_up() 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> = false 
<*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
getOrInflateState subId:<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
isCurrentBySim()=false 
fingersense_classify_touch() finished 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
not 3G net type. do nothing. 
fingersense_classify_touch() finished 
Calling fingersense_touch_up() 
updateClipping isOverlap:false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
fingersense_touch_up() finished 
Calling fingersense_classify_touch() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> <*> typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> <*> typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
do not support AFT because of no config 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
csr 
c: true, w: false, t: false, l: false 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
BluetoothManagerService:Message: <*> 
MagicLink2-BroadcastSender:====>sendStateChangeBroadcast <*> 
<*> <*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
ImsServiceSubHandler : Message received: what = <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> <*> typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
fingersense_touch_up() finished 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
<*> <*> <*> <*> <*> 
fingersense_classify_touch() finished 
showCurrentInputLocked: mCurToken=android.os.Binder@cb2bac<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
showSoftInput() 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
ImsServiceSub : handleSsac voice = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onDataActivity: direction=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> <*> typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
MyOrientationListener: updateRotation. 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
<*> <*> <*> 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
getOrInflateState subId:<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Calling fingersense_touch_up() 
fingersense_classify_touch() finished 
t:false, fl: false, p: <*>, ce: true, we: false 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
showNotificationAll 
csr 
send_cmd_kernel: cmd=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> 
Received kernel message payload: event <*> 
<*> <*> <*> 
Unfinished business... 
getNextIndex: <*>; from <*> to <*>; size: <*> 
mTiffStream skip = <*> 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
FingerprintService authenticate 
fpc_get_authenticator_id 
QSEECom_send_cmd return! 
getTempInfo error: null, <*> 
Client requesting input be hidden, pid=<*> 
<*> <*> <*> 
at com.huawei.keyguard.util.BitmapUtils.getColorInfo(BitmapUtils.java:<*>) 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper.-wrap4(KeyguardWallpaper.java) 
at com.huawei.keyguard.support.magazine.MagazineWallpaper$<*>.onMagazinePicLoaded(MagazineWallpaper.java:<*>) 
Setting HAL interactive mode to <*> 
DisplayPowerController updatePowerState <*> <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
notifyFinishedGoingToSleep 
<*> <*> <*> <*> == <*> 
updateLightsLocked --> <*> <*> <*> 
handle_exception_events enter 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
suspendAutohide 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
setIsExpanded: true 
action:com.android.systemui.statusbar.visible.change, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
notifyUiVisibilityChanged:vis=0x8608, SystemUiVisibility=0x<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
send_cmd_kernel: cmd=<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
is3GCalling is false,mCdmaSlot is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
received cell-signal:<*> 
received cell-signal:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> is not <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
######### CMD_QUERY_PKTS ######## 
<*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
received cell-signal:<*> 
csr 
csr 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
RCV <- {<*> IfaceClass idle <*> <*>} 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
at java.io.FileInputStream.open(Native Method) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
onShowStatusChange show:false 
c: true, w: false, t: false, l: false 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
received cell-signal:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
Received kernel message payload: event <*> 
is3GCalling is false,mCdmaSlot is -<*> 
acquire lock=<*>, flags=0x1, <*> <*> <*> uid=<*>, pid=<*> 
<*> <*> <*>, uid: <*>, pid: <*> 
Pid:<*> MediaPlayer::start 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ACDB -> <*> 
sendMessage <*> 
isCloneProcess = false 
set notification panel padding = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> of type <*> <*> <*> <*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> 
Acquiring suspend blocker <*> 
<*> calling driver setDelay <*> ms 
Animating brightness: target=<*>, rate=<*> 
Animating brightness: target=<*>, rate=<*> 
begin 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
begin 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
Display ready! 
<*> <*> <*> 
platform_set_parameters: <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ACDB -> <*> 
<*> <*> <*> 
onReceive, action:android.intent.action.USER_PRESENT 
<*>|Enter stopReconnectBLE(). 
<*> TcpSocket.close(TcpSocket.java:<*>) shutdown <*> java.net.SocketException: Socket is closed 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
showNotificationAll 
transitionTo:mode=<*>, isEmuiStyle=false 
<*> <*> is abandoned for <*> <*> <*> 
stopFilter m_filterIsStarted:false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
onReceive, action:android.intent.action.SCREEN_ON 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
handledataswitchchanged 
<*>|calculateAltitudeWithCache datas.size=<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
cancelNotificationWithTag pid <*>,uid = <*>,tag = <*> <*> <*> 
send data return = <*> 
qsc_decode end 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
showNotificationAll 
transferRemoteInputFocus: <*> 
<*> <*> Connect to <*> <*> <*> <*> <*> = <*> 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
<*> <*> <*> = <*> <*> = <*> <*> = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> pid: <*>, <*> <*> 
Access denied finding property "persist.sys.smart_power" 
Launcher.LauncherProvider launcher call - <*> <*> <*> <*> <*> pid =<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
<*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
<*> <*> = <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
m1: false 
<*> <*> line <*> <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
[pa_<*>] temp_new :<*> temp_old :<*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
getOrInflateState subId:<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
Calling fingersense_classify_touch() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
isCurrentBySim()=false 
fingersense_touch_up() finished 
Calling fingersense_touch_up() 
fingersense_touch_up() finished 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Calling fingersense_touch_up() 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
fingersense_touch_up() finished 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
c: true, w: false, t: false, l: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Error reading charge file 
RCV <- {<*> IfaceClass idle <*> <*>} 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
begin of formatChinaDateRange <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
bright trace:<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
<*> <*> <*> <*> <*> 
<*> <*> = <*>.<*>, <*> = <*>.<*>, <*> = <*>.<*>, <*> = <*>.<*> 
receive data len = <*> 
qsc_send_cmd finish 
isBluetoothScoOn... 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
sendMessage <*> <*> <*> <*> <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
<*> <*> <*> line <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
disableGps:false isEnabled()=true 
send: <*> 
<*> <*> <*> = false 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCurrentBySim()=false 
t:false, fl: false, p: <*>, ce: true, we: false 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> <*> <*> <*> type <*> when <*> <*> 
handleShow 
<*> <*> id = <*> <*> <*> <*> <*> 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
mThermalService is NULL! 
onShowStatusChange show:false 
isMusicActive... 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> 
Cache monitor msg as screen_off 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set <*> <*> <*> <*> 
Launcher.Folder childCount: <*> 
<*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<*> <*> <*> = false 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
csr 
isWiredHeadsetOn... 
######### CMD_QUERY_PKTS ######## 
csr 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
<*> <*> <*> line <*> 
getStatic,count:<*>,work status:false 
isMusicActive... 
isWiredHeadsetOn... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
process buffer and get message 
m1: false 
mThermalService is NULL! 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> <*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
mVSimCurCardType is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
Launcher.Folder childCount: <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> Connect to <*> <*> <*> <*> <*> 
<*> <*> <*> Intent { <*> <*> (has extras) } <*> <*> <*> <*> <*> <*> due to <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> <*> 
<*> <*> <*>, <*>), <*> <*> <*> 
<*> <*> = <*> 
<*> <*> = <*>, <*> = <*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
<*> <*> <*> = <*> 
ACDB -> <*> <*> = <*>, <*> = <*>, <*> id = <*> <*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> <*> <*> 
onAcquired <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
begin 
onAcquired <*> 
begin 
<*> state is <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
restoreBackgroundColor:new=<*>, old=<*> 
generateAddAnimation:null, false 
qsc_decode end 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateClipping isOverlap:true 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
back light level before map = <*> 
<*> <*> <*> <*> <*> <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
Final value: x_offset=<*>.<*>, y_offset=<*>.<*>, z_offset=<*>.<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
Apply window Height <*> 
Dis-Feature : <*> 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
CtrlSocket Receiver,disable: <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> ==================== TCP CLIENT <*> <*> 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
updateSlider2 seekBarProgress:<*> 
mIntentReceiver begin 
<*> <*> <*> 
huawei_audio huawei_choose_HandsFree_device_incall_forHWtest: test Type =<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> 
receive data len = <*> 
WatchThread{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown <*> java.net.SocketException: Socket is closed 
<*> <*> <*> <*> <*> java.net.SocketException: Socket <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
formatChinaDateTime, change to China <*> 
<*> pid: <*>, <*> <*> 
Change to single clock mode! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Received kernel message payload: event <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Calling fingersense_classify_touch() 
RCV <- {<*> IfaceClass idle <*> <*>} 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Calling fingersense_touch_up() 
isCurrentBySim()=false 
<*> <*> line <*> <*> 
Calling fingersense_classify_touch() 
fingersense_classify_touch() finished 
isCurrentBySim()=false 
Calling fingersense_touch_up() 
fingersense_touch_up() finished 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
not in link monitoring mode, ignore TCP result . 
APS: 2DSDR: <*> <*> <*> <*> SDR ratio 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
<*> <*> <*> 
<*> <*> is null 
t:false, fl: false, p: <*>, ce: true, we: false 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
<*> <*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
fingersense_touch_up() finished 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
isCurrentBySim()=false 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
showCurrentInputLocked: mCurToken=android.os.Binder@cb2bac<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
chinaDateTime:半夜<*>:<*> 
received broadcast android.intent.action.TIME_TICK 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> <*> <*> <*> <*> <*> <*> to <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Caller checkPermission fail 
<*> <*> size is <*> 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
Dis-Feature : <*> 
begin 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
<*> <*> <*> <*> <*> 
at com.huawei.keyguard.support.magazine.MagazineWallpaper$<*>.onMagazinePicLoaded(MagazineWallpaper.java:<*>) 
at com.huawei.keyguard.util.BitmapUtils.getSuggestColorInfo(BitmapUtils.java:<*>) 
onDataActivity: direction=<*> 
updateDisplayLocked: screenOn=false 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> <*> : <*> false 
getNextIndex: <*>; from <*> to <*>; size: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
t:false, fl: false, p: <*>, ce: true, we: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isMusicActive... 
MSG_QUERY_TCP_INFO called,count:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
showNotificationAll 
transitionTo:mode=<*>, isEmuiStyle=false 
enter keyguard:<*> 
release:lock=<*>, flg=0x0, <*> <*> <*> ws=null, uid=<*>, pid=<*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
resetCommute 
setTracingEnabled:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
received cell-signal:<*> 
csr 
received cell-signal:<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
onAcquired <*> 
<*> <*> <*> <*> <*> not supported <*> 
Animating brightness: target=<*>, rate=<*> 
QSEECom_send_cmd return! 
qsc_send_cmd finish 
apply skiped :<*> 
Apply window Height MATCH_PARENT 
generateAddAnimation:null, false 
qsc_send_cmd finish 
<*> <*> <*> <*> <*> ms 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
<*> <*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> = <*> 
ACDB -> <*> 
qsc_decode end 
mIntentReceiver begin 
setScrollingEnabled: true 
collapsePanel<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[StartupguideUtils.isBeta]is beta=false 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
<*> <*> <*> <*> <*> <*> <*> <*> <*> to uc.huawei.com:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
receive data len = <*> 
NormalTrafficAnalysis:alert byte = <*> <*> <*> byte = <*> 
monitor check touch devices 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
sendEvent:action=<*>, flag=<*> 
<*> <*> <*> <*> <*> <*> 
send: <*> 
mSendService start 
getOrInflateState subId:<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
not 3G net type. do nothing. 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
is3GCalling is false,mCdmaSlot is -<*> 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
APS: 2DSDR: <*> SDR ratio = <*>.<*>, <*> height = <*>, <*> <*> height = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
c: true, w: false, t: false, l: false 
mVSimCurCardType is -<*> 
Moving <*> <*> <*> <*> <*> <*> <*> <*> <*> 
playingUids: 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
refreshBatteryInfo: null 
<*>|getTodayTotalSteps <*> 
disableEffects=null canInterrupt=false once update: false 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
Sending non-protected broadcast <*> from system <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
getCSubChrVolteStatisticCategory enter. 
<*> <*> <*> <*> <*> is not in the <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> : <*> 
<*> <*> <*> 
msg = <*> received 
at android.os.HandlerThread.run(HandlerThread.java:<*>) 
<*> <*> <*> <*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
formatChinaDateTime, change to China <*> 
formatChinaDateTime equals. 
mDateString is: <*>月<*>日星期六 
<*> <*> <*> <*> = <*> 
msg = <*> received 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
<*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> <*> : <*> false 
authenticate(sid=<*>, gid=<*>) 
receive data len = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> 
begin 
receive data len = <*> 
qsc_decode end 
KGSvcFp onAuthenticationAcquired.<*> 
QSEECom_send_cmd return! 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper.-wrap4(KeyguardWallpaper.java) 
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<*>) 
java.lang.Exception 
at com.huawei.keyguard.support.magazine.MagazineWallpaper$BgPicLoader$<*>.run(MagazineWallpaper.java:<*>) 
onScreenTurnedOff() 
Reading a NULL string not supported here. 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.SCREEN_OFF, mPermissionType:<*> 
isSimPinSecure mSimDatas is null or empty 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> : <*> false 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> action = <*> 
AutoCleanService:onCreate, registerReceiver 
<*> <*> <*> <*> <*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
updateTint: tint=<*> 
ACDB -> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
generateAddAnimation:null, false 
getStatic,count:<*>,work status:false 
AllIdleAppsList updatePackage isCloneApp = false 
<*> <*> <*> <*> 
Pid:<*> deleteTrackName(<*>) 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> action = <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Dis-Feature : <*> 
sendImmediateMessage <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
setIsExpanded: true 
Apply window <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> 
isMusicActive... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
isCurrentBySim()=false 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
onDataActivity: direction=<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
removeNotificationChildren 
updateClipping isOverlap:false 
EventHub monitor: no key events in the past <*> <*> <*> events in the past <*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> = <*> 
<*> <*> <*> 
setColorTemperatureAccordingToSetting new. 
LightSensor, enable, <*>: en=<*> 
qsc_decode end 
<*> <*> <*> 
onNotificationExpansionChanged called 
isCloneProcess = false 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> 
huawei_cust_set_parameters: exit with code(<*>) 
<*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
restoreBackgroundColor:new=<*>, old=<*> 
collapsePanel<*> 
ACDB -> <*> 
ACDB -> <*> <*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
send data return = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
updateNotificationShade 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> pid = <*> <*> = <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
qsc_send_cmd finish 
<*> <*> <*> <*> <*> 
<*> is null 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
qsc_send_cmd finish 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> pid:<*> uid:<*> 
StartupResidentService:InnerHandler Message:<*> 
ambient lux=<*>.<*>,timeStamp =<*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> uid: <*>, pid: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
updateLightsLocked --> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
suspendAutohide 
transitionTo:mode=<*>, isEmuiStyle=false 
Apply window Height MATCH_PARENT 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null <*> <*> <*> <*> <*> <*> 
load icon <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
is3GCalling is false,mCdmaSlot is -<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
Calling fingersense_classify_touch() 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
ImsServiceSubHandler : Message received: what = <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
getOrInflateState subId:<*> 
showCurrentInputLocked: mCurToken=android.os.Binder@cb2bac<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
begin of formatChinaDateRange <*> 
fingersense_touch_up() finished 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
fingersense_classify_touch() finished 
isCardAbsent slot:<*> slotState:<*> 
fingersense_touch_up() finished 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
fingersense_classify_touch() finished 
Calling fingersense_classify_touch() 
is3GCalling is false,mCdmaSlot is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Calling fingersense_touch_up() 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
mVSimCurCardType is -<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
action:null, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
m1: false 
Calling fingersense_classify_touch() 
Calling fingersense_touch_up() 
fingersense_classify_touch() finished 
onDataActivity: direction=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
mVSimCurCardType is -<*> 
fingersense_classify_touch() finished 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
Access denied finding property "persist.sys.smart_power" 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
send_cmd_kernel: cmd=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Calling fingersense_classify_touch() 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onSignal: mSubId=<*>,currDataSubID=<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
<*>| ## MSG_DEAL_SYSTEM_EVENT android.intent.action.TIME_TICK 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
sending broadcast to Pid = <*>, Uid = <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
csr 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver, mPermissionType:<*> 
Calling fingersense_classify_touch() 
######### CMD_QUERY_PKTS ######## 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Calling fingersense_touch_up() 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
mVSimCurCardType is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> id = <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
<*> <*> Connect to <*> <*> <*> <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> ==================== TCP CLIENT <*> <*> 
<*> <*> <*> <*> <*> to uc.huawei.com:<*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> <*> 
<*> <*> : <*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
fingersense_classify_touch() finished 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
fingersense_touch_up() finished 
mSimSubId:<*> onDataActivity: direction=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
fingersense_classify_touch() finished 
Calling fingersense_classify_touch() 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Calling fingersense_touch_up() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
m1: false 
Calling fingersense_classify_touch() 
Received kernel message payload: event <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
msg = <*> received 
Calling fingersense_classify_touch() 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
chinaDateTime:半夜<*>:<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
fingersense_touch_up() finished 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
mSimSubId:<*> onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> <*> <*> 
updateTint: tint=<*> 
Received kernel message payload: event <*> 
getStatic,count:<*>,work status:false 
<*> <*> <*> <*> state = <*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mTiffStream skip = <*> 
receive data len = <*> 
receive data len = <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sendMessage <*> <*> <*> <*> <*> 
<*> <*> <*> status = <*>, id = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
getTempInfo error: null, <*> 
showPrimarySecurityScreen(turningOff=false) 
updateNotificationShade 
showNotificationAll 
hideTraffic 
setScrollingEnabled: false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
applyIconTint ignore 
hideTraffic 
setBackgroundColor:new=<*>, old=<*> 
<*> <*> <*> 
Dis-Feature : <*> 
<*> <*> <*> <*> <*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: <*> <*> <*> id = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
DisplayPowerState :ON 
notifyScreenOn 
<*> <*> <*> is <*> 
<*> <*> <*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
receive data len = <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
begin 
getNextIndex: <*>; from <*> to <*>; size: <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
APS brightness=<*>.<*>,ConvertToPercentage=NaN 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> is not <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> 
receive data len = <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> <*> <*> <*> 
Apply window Height MATCH_PARENT 
<*> <*> <*> <*> 
handleKeyguardDone 
exit keyguard:<*> 
receive data len = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
Apply window Height MATCH_PARENT 
<*> <*> <*> <*> <*> <*> <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
apply skiped :<*> 
<*> <*> <*> <*> <*> 
onStartedWakingUp 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
CollectorManager--isCollectorEnabled--getBoolean: false 
<*> <*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> 
ACDB -> <*> 
ACDB -> <*> 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
resetPagerState 
showNotificationAll 
<*> <*> <*> <*> <*> <*> 
<*> action = android.intent.action.SCREEN_ON 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
begin 
Get no-perm <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> ms 
receive data len = <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> <*> is abandoned for memory <*> 
ambient lux=<*>.<*>,timeStamp =<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
m1: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
<*> <*> <*> <*> <*> <*> 
poll before: g_monitor_fd =<*> 
isBluetoothScoOn... 
<*> <*> <*> <*> 
<*> Speaker protection disabled 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ACDB -> <*> <*> 
suspendAutohide 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
<*> <*> <*> <*> 
chinaDateTime:半夜<*>:<*> 
updateClipping isOverlap:true 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> = <*> 
m1: false 
isCurrentBySim()=false 
cancelNotificationLocked:<*>|com.tencent.mm|<*>|null|<*> 
<*> <*> <*> <*> == null?true 
makeExpandedInvisible: mExpandedVisible=true 
<*> <*> <*> <*> <*> <*> <*> 
Launcher.LauncherProvider launcher call - <*> <*> <*> <*> <*> pid =<*> 
queryIntentActivitiesAsUser size <*> <*> <*> 
setTracingEnabled:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
is3GCalling is false,mCdmaSlot is -<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
fingersense_classify_touch() finished 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
mVSimCurCardType is -<*> 
fingersense_classify_touch() finished 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
<*> <*> <*> <*> <*> u0 euid: <*> <*> 
c: true, w: false, t: false, l: false 
Calling fingersense_touch_up() 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
fingersense_touch_up() finished 
m1: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:true isRoaming:false 
isCurrentBySim()=false 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
poll before: g_monitor_fd =<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
begin 
send data return = <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
LightSensor, enable, <*>: en=<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
updateDisplayLocked: screenOn=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PowerManagerNotifier <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
DefaultState what=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> screen off <*> <*> <*> 
<*> <*> <*> = false 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
m1: false 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
Launcher.LauncherProvider queried count: <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
handleShow 
updateNotificationShade 
showNotificationAll 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
resetPagerState 
updateClipping isOverlap:false 
<*> <*> <*> <*> 
<*> <*> <*> 
EventHub monitor: no key events in the past <*> <*> <*> events in the past <*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
c: true, w: false, t: false, l: false 
poll before: g_monitor_fd =<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
<*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
mThermalService is NULL! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
isMusicActive... 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
<*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
<*> <*> <*> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> report_threshold:<*> 
getStatic,count:<*>,work status:false 
handle_exception_events enter 
send: <*> 
<*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> 
<*> <*> ==================== TCP CLIENT <*> <*> <*> 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
ImsServiceSub : handleSsac voice = <*> 
onDataActivity: direction=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mThermalService is NULL! 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
Received kernel message payload: event <*> 
m1: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
######### CMD_QUERY_PKTS ######## 
t:false, fl: false, p: <*>, ce: true, we: false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
isMusicActive... 
onSignal: mSubId=<*>,currDataSubID=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> change to <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> ==================== TCP CLIENT <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> <*> <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
c: true, w: false, t: false, l: false 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
received cell-signal:<*> 
received cell-signal:<*> 
<*> <*> <*> <*> <*> report_threshold:<*> 
poll before: g_monitor_fd =<*> 
csr 
<*> <*> <*> line <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
delay_us exceeds max timeout: <*> us 
csr 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
isMusicActive... 
<*> TcpClientThread.connectSocket(TcpClientThread.java:<*>) <*> <*> <*> <*> <*> 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to ip address <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> Connect to server <*> <*> <*> <*> = <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
onSignal: mSubId=<*>,currDataSubID=<*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
hw_set_colortemperature: end-- 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
<*> <*> <*> <*> <*> <*> <*> <*> 
QSEECom_send_cmd return! 
receive data len = <*> 
showTraffic 
<*> <*> <*> <*> <*> <*> (has extras) } 
qsc_decode end 
isMobileDataEnable::dateEnable=true, cotrollerEnable=true 
updateClipping isOverlap:true 
read Events lux: <*>.<*> 
setLift <*>.<*> 
Acquiring suspend blocker "PowerManagerService.Broadcasts". 
PowerManagerNotifier <*> <*> <*> 
Finished business... 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> exit with code(<*>) 
<*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
Apply window Height <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
send data return = <*> 
<*> <*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
<*> <*> state = <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> rt=<*>/<*> <*> <*> 
handledataswitchchanged 
receive data len = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
is3GCalling is false,mCdmaSlot is -<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> pid:<*> uid:<*> 
begin 
send data return = <*> 
<*> <*> is abandoned for memory <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
isCurrentBySim()=false 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
Client requesting input be hidden, pid=<*> 
Launcher.LauncherProvider launcher call - <*> <*> <*> <*> <*> pid =<*> 
csr 
m1: false 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
c: true, w: false, t: false, l: false 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
action:com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver, mPermissionType:<*> 
c: true, w: false, t: false, l: false 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
read Events lux: <*>.<*> 
<*>|uploadStaticsToDB success 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
MSG_QUERY_TCP_INFO called,count:<*> 
csr 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
<*> <*> = <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
mTiffStream skip = <*> 
<*> <*> is null <*> 
qsc_decode end 
qsc_decode end 
DisplayPowerController updatePowerState <*> <*> useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.Broadcasts". 
<*> <*> <*> <*> <*> 
NormalTrafficAnalysis:alert byte = <*> <*> <*> byte = <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
OverscanTimeout run 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
isSimPinSecure mSimDatas is null or empty 
setBarState:<*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
action:com.android.systemui.statusbar.visible.change, mPermissionType:<*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getOrInflateState subId:<*> 
m1: false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> id is <*> 
isCurrentBySim()=false 
setTracingEnabled:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
csr 
m1: false 
Received kernel message payload: event <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
isMusicActive... 
<*> <*> <*> line <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> line <*> <*> 
not in link monitoring mode, ignore TCP result . 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
mVSimCurCardType is -<*> 
<*> <*> <*> 
isMusicActive... 
onShowStatusChange show:false 
CtrlSocket processCtrlSocket pid = <*> cmd = <*> param = <*> ret = <*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
not in link monitoring mode, ignore TCP result . 
at com.huawei.android.bastet.HwBastet.<init>(HwBastet.java:<*>) 
<*> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
######### CMD_QUERY_PKTS ######## 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
send_cmd_kernel: cmd=<*> 
getStatic,count:<*>,work status:false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
Launcher.Folder childCount: <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) <*> <*> <*> 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) <*> <*> <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
<*> <*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
t:false, fl: false, p: <*>, ce: true, we: false 
isWiredHeadsetOn... 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
getStatic,count:<*>,work status:false 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
EventHub monitor: no key events in the past <*> <*> <*> events in the past <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> line <*> <*> 
m1: false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
csr 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> = <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
mVSimCurCardType is -<*> 
mVSimCurCardType is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
onReceive intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
<*> <*> is null 
isCurrentBySim()=false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
isMusicActive... 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
getOrInflateState subId:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
delay_us exceeds max timeout: <*> us 
isWiredHeadsetOn... 
ImsServiceSub : handleSsac voice = <*> 
onDataActivity: direction=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
received broadcast android.intent.action.TIME_TICK 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
no controller energy info supplied 
<*> <*> <*> <*> <*> = <*> 
failed to <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
<*> <*> <*> <*> <*> 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
RCV <- {<*> IfaceClass idle <*> <*>} 
c: true, w: false, t: false, l: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
m1: false 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
c: true, w: false, t: false, l: false 
t:false, fl: false, p: <*>, ce: true, we: false 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
<*> <*> <*> <*> <*> <*> 
Action: BatChange 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
c: true, w: false, t: false, l: false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> id is [<*>]! 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) changed bounds; rebatching 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) connected 
<*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> <*> <*> <*> size is <*> <*> <*> <*> size is <*> 
updateLightsLocked --> level:<*>, status:<*> 
begin of formatChinaDateRange <*> 
received broadcast android.intent.action.TIME_TICK 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
t:false, fl: false, p: <*>, ce: true, we: false 
getTempInfo error: null, <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
ImsServiceSub : handleSsac voice = <*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
delay_us exceeds max timeout: <*> us 
isMusicActive... 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<*> <*> <*> <*> <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> <*> <*> <*> 
c: true, w: false, t: false, l: false 
delay_us exceeds max timeout: <*> us 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Report temperature: [ap] temp :<*> report_threshold:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
poll before: g_monitor_fd =<*> 
getStatic,count:<*>,work status:false 
isWiredHeadsetOn... 
t:false, fl: false, p: <*>, ce: true, we: false 
EventHub monitor: no key events in the past <*> <*> <*> events in the past <*> 
getTempInfo error: null, <*> 
handle_exception_events enter 
c: true, w: false, t: false, l: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch delay to <*> 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
queryIntentActivitiesAsUser size <*> <*> <*> 
queryIntentActivitiesAsUser size <*> <*> <*> 
<*> <*> <*> 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) <*> <*> <*> <*> <*> <*> <*> to uc.huawei.com:<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<*> <*> <*> <*> 
<*> updatePackage <*> <*> <*> <*> size is <*> <*> <*> <*> size is <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
InputDispatcher::monitor frozen check! 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
InputDispatcher::monitor frozen check! 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
t:false, fl: false, p: <*>, ce: true, we: false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: <*> <*> <*> id = <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
<*> r: <*> u0 euid: <*> <*> euid: <*> 
hideTraffic 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> : <*> 
isWiredHeadsetOn... 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
<*> int <*> line <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
received cell-signal:<*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
poll before: g_monitor_fd =<*> 
getStatic,count:<*>,work status:false 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
mSimSubId:<*> onDataActivity: direction=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> id is [<*>]! 
m1: false 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) <*> <*> <*> 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) <*> <*> <*> <*> <*> <*> <*> to <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
<*> <*> <*> <*> <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
isCurrentBySim()=false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> is <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
isCurrentBySim()=false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
updateDimmedActivatedHideSensitive overlap:false 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
m1: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
csr 
m1: false 
Report temperature: [ap] temp :<*> report_threshold:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
not in link monitoring mode, ignore TCP result . 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
updateChargingLocked: charging=true 
DefaultState what=<*> 
getTempInfo error: null, <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
not in link monitoring mode, ignore TCP result . 
c: true, w: false, t: false, l: false 
csr 
c: true, w: false, t: false, l: false 
getTempInfo error: null, <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
<*> <*> <*> <*> <*> = <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
is3GCalling is false,mCdmaSlot is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
RCV <- {<*> IfaceClass idle <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
Rac Change (PDC) data: [<*>, <*>] 
<*> <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
poll before: g_monitor_fd =<*> 
received cell-signal:<*> 
m1: false 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
isCurrentBySim()=false 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
hideTraffic 
kWhatSetAudioSink 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> <*> 
updateTint: tint=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*>, <*>), <*> <*> <*> 
<*> <*> <*> of type <*> <*> <*> <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
csr 
shouldBlockLocation running ... 
csr 
<*> <*> <*> 
setColorTemperature:<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, <*> <*> screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> 
<*> <*> <*> 
QSEECom_send_cmd return! 
ambient lux=<*>.<*>,timeStamp =<*> 
<*> <*> = true <*> = false 
PowerManagerNotifier onWakefulnessChangeStarted: wakefulness=<*>, <*> <*> <*> <*> 
isDisplayFeatureSupported feature:<*> 
onAcquired <*> 
begin 
handleANRFilterFIFO,uid = <*> = <*> 
KGSvcFp onAuthenticationAcquired.<*> 
onAcquired <*> 
qsc_send_cmd finish 
<*> <*> <*> ms <*> <*> <*> <*> <*> <*> <*> <*> 
qsc_decode end 
begin 
onAcquired <*> 
KGSvcFp onAuthenticationAcquired.<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
onAcquired <*> 
onAuthenticated <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isSimPinSecure mSimDatas is null or empty 
refreshState=flashlight, BooleanState[,icon=ResourceIcon[resId=0x7f020212],label=手电筒,labelTint=<*>,textChangedDelay=<*>,contentDescription=手电筒,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false] 
Handle message: <*> 
<*> <*> <*> <*> 
apply skiped :<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
release:lock=<*>, flg=0x0, <*> <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Caller checkPermission fail 
onStartedWakingUp 
closeQs 
<*> <*> <*> <*> <*> <*> is <*> 
ACDB -> <*> <*> <*> <*> 
[ReceiverUtils.resumeLogUpload]resumeSendNow 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> Connect to server address = [uc.huawei.com,] port = <*> 
<*> = <*> 
stopFilter m_filterIsStarted:false 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> does not <*> 
<*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
WatchThread{<*>} TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
<*> <*> <*> <*> 
begin 
<*> <*> <*> <*> <*> 
[UploadRequest.isTaskProcessing] lstUploadInfo.size()=<*> 
[RouteService.onStartCommand] 
<*> <*> <*> <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
ambient lux=<*>.<*>,timeStamp =<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
------------startInput-------------- 
No config <*> <*> <*> 
cancelNotificationLocked:<*>|com.tencent.mm|<*>|null|<*> 
<*> <*> <*> <*> 
send data return = <*> 
receive data len = <*> 
qsc_send_cmd finish 
begin 
QSEECom_send_cmd return! 
send data return = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
QSEECom_send_cmd return! 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*>|onStandStepChanged <*> 
Calling fingersense_touch_up() 
showSoftInput() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
poll before: g_monitor_fd =<*> 
isCurrentBySim()=false 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
getOrInflateState subId:<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onDataActivity: direction=<*> 
<*> <*> is abandoned for <*> <*> <*> <*> 
isCurrentBySim()=false 
not 3G net type. do nothing. 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
EventCenter Get <*> 
<*>|logicalDealBroadcastEvent : Intent { <*> <*> (has extras) } 
mVSimCurCardType is -<*> 
mVSimCurCardType is -<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
fingersense_classify_touch() finished 
Calling fingersense_touch_up() 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
getOrInflateState subId:<*> 
MagicLink2-BroadcastReceiver:====>WIFI_STATE_CHANGED_ACTION 
MagicLink-BtAndWifiWrapper:==>UNHANDLE MSG:<*> 
<*> <*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
isCurrentBySim()=false 
fingersense_classify_touch() finished 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Calling fingersense_touch_up() 
<*> <*> <*> <*> <*> <*> <*> 
<*> pid = <*>, <*> = <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
######### CMD_QUERY_PKTS ######## 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
I/===> int ulp_dr_stop_engine() line <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
onSignal: mSubId=<*>,currDataSubID=<*> 
isCurrentBySim()=false 
showSoftInput() 
Calling fingersense_touch_up() 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
RCV <- {<*> IfaceClass idle <*> <*>} 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
onSignal: mSubId=<*>,currDataSubID=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Calling fingersense_classify_touch() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
formatChinaDateTime equals. 
<*>|logicalDealBroadcastEvent : Intent { <*> <*> (has extras) } 
Calling fingersense_classify_touch() 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
getOrInflateState subId:<*> 
ImsServiceSubHandler : Message received: what = <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getOrInflateState subId:<*> 
sending broadcast to Pid = <*>, Uid = <*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> <*> (has extras) } on bgkeyapp queue 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
m1: false 
isCardAbsent slot:<*> slotState:<*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
action:com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver, mPermissionType:<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
getStatic,count:<*>,work status:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x2,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
getNextIndex: <*>; from <*> to <*>; size: <*> 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
fingerprintd 
getMode... 
qsc_send_cmd finish 
DisplayPowerStatesetColorFadeLevel: level=<*>.3857098E-<*> 
<*> <*> <*> 
<*> <*> <*> <*> is <*> 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
mode <*> <*> <*> 
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<*>) 
handleNotifyFinishedGoingToSleep 
isSimPinSecure mSimDatas is null or empty 
mTiffStream skip = <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
<*> <*> <*> <*> 
NatTrafficNotifyService:delta byte = <*> no traffic delta = 0Traffic state is <*> 
<*> mBroadcastReceiver <*> 
<*> temp_new :<*> temp_old :<*> 
showNotificationAll 
setBackgroundColor:new=<*>, old=<*> 
<*> <*> <*> <*> <*> 
showSecurityScreen(PIN) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
getStatic,count:<*>,work status:false 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
csr 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
wifiSleepPolicy:<*> 
<*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
<*> <*> = <*> 
<*> <*> <*> <*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
handleTimeUpdate 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
isCurrentBySim()=false 
[SocketRead_<*>:<*>:<*>-<*>]conetEntity.channelType:ChannelType_Secure(android/null:<*>) 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
m1: false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
received cell-signal:<*> 
c: true, w: false, t: false, l: false 
delay_us exceeds max timeout: <*> us 
MSG_QUERY_TCP_INFO called,count:<*> 
Received kernel message payload: event <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
isCardAbsent slot:<*> slotState:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
######### CMD_QUERY_PKTS ######## 
m1: false 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Sending non-protected broadcast <*> from system <*> <*> <*> <*> 
formatChinaDateTime equals. 
onShowStatusChange show:false 
Access denied finding property <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
isMusicActive... 
Report temperature: <*> temp :<*> report_threshold:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
poll before: g_monitor_fd =<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
csr 
getStatic,count:<*>,work status:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
queryIntentActivitiesAsUser size results:<*>, for <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) Login_By_Step-> at <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
csr 
onSignal: mSubId=<*>,currDataSubID=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
no controller energy info supplied 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
m1: false 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
m1: false 
isCardAbsent slot:<*> slotState:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> timer.timers{<*>} <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> <*> 
tcp.recv{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is closed 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
Received kernel message payload: event <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
[StoreProgressUtils.startUploadPollingTask] 
mDateString is: <*>月<*>日星期六 
queryIntentActivitiesAsUser size results:<*>, for package:com.huawei.espacev<*> 
Heartbeat timer.timers{<*>} <*> <*> <*> <*> 
isMusicActive... 
not in link monitoring mode, ignore TCP result . 
received cell-signal:<*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> 
isMusicActive... 
onDataActivity: direction=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
delay_us exceeds max timeout: <*> us 
chinaDateTime:半夜<*>:<*> 
<*>| ## MSG_DEAL_SYSTEM_EVENT android.intent.action.TIME_TICK 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Sending non-protected broadcast <*> from system <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
getStatic,count:<*>,work status:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
not in link monitoring mode, ignore TCP result . 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
MSG_QUERY_TCP_INFO called,count:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
c: true, w: false, t: false, l: false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
onDataActivity: direction=<*> 
tcp.recv{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is closed 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
pool-<*>-thread-<*>{<*>} BaseBroadcast.sendBroadcast(BaseBroadcast.java:<*>) no <*> <*> <*> 
CallObjectMethod strat 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
AllIdleAppsList updatePackage isCloneApp = false 
c: true, w: false, t: false, l: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
c: true, w: false, t: false, l: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
received cell-signal:<*> 
EventHub monitor: no key events in the past <*> <*> <*> events in the past <*> 
csr 
not in link monitoring mode, ignore TCP result . 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
I/===> int <*> line <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
isWiredHeadsetOn... 
getStatic,count:<*>,work status:false 
m1: false 
Received kernel message payload: event <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
isCurrentBySim()=false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
GetAddrInfoHandler addr: uc.huawei.com {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> 
<*> <*> Connect to <*> <*> <*> <*> <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<*> <*> <*> <*> <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
######### CMD_QUERY_PKTS ######## 
load icon <*> <*> <*> <*> <*> <*> 
InputDispatcher::monitor frozen check! 
mSimSubId:<*> onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
EventHub monitor: no key events in the past <*> <*> <*> events in the past <*> 
getTempInfo error: null, <*> 
mSendService start 
not in link monitoring mode, ignore TCP result . 
isMusicActive... 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
isCurrentBySim()=false 
isCurrentBySim()=false 
sending broadcast to Pid = <*>, Uid = <*> 
getTempInfo error: null, <*> 
msg = <*> received 
<*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*>|calculateCaloriesWithCache datas.size=<*> 
handle_exception_events enter 
hideTraffic 
handle_exception_events enter 
send: <*> 
<*>|upDateHealthNotification()|<*>|<*>|<*> 
process buffer and get message 
showNotificationAll 
onShowStatusChange show:false 
msg = <*> received 
create: <*> 
process buffer and get message 
msg = <*> received 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isWiredHeadsetOn... 
m1: false 
c: true, w: false, t: false, l: false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
isWiredHeadsetOn... 
poll before: g_monitor_fd =<*> 
<*> = <*> 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
m1: false 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ImsServiceSubHandler : Message received: what = <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
<*> <*> : <*> 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
create: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
<*> <*> <*> <*> : <*> 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
m1: false 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
No config file found for:/themes/diff/icons 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown <*> java.net.SocketException: Socket is closed 
tcp.recv{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is closed 
<*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set mode to <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
. 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> : <*> 
<*> TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
<*> <*> ==================== TCP CLIENT <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> <*> <*> <*> 
isMusicActive... 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
Received kernel message payload: event <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
mVSimCurCardType is -<*> 
isWiredHeadsetOn... 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
updateLightsLocked --> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> <*> 
set notification panel padding = <*> 
[ReceiverDispatcher-<*>]lastnetWorkType:<*> curNetWorkType:<*>(android/null:<*>) 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getStatic,count:<*>,work status:false 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
<*> <*> <*> <*> <*> <*> action = <*> <*> <*> <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
mSimSubId:<*> onDataActivity: direction=<*> 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
t:false, fl: false, p: <*>, ce: true, we: false 
Received kernel message payload: event <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
received cell-signal:<*> 
received cell-signal:<*> 
<*> <*> <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<*> <*> <*> 
CallObjectMethod end 
<*> <*> <*> <*> <*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isWiredHeadsetOn... 
csr 
poll before: g_monitor_fd =<*> 
csr 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
process buffer and get message 
Received kernel message payload: event <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:svn_closeAll <*> = <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
connect :false 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> is not <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
pool-<*>-thread-<*>{<*>} BaseBroadcast.sendBroadcast(BaseBroadcast.java:<*>) no <*> <*> <*> 
isMusicActive... 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
onShowStatusChange show:false 
mDateString is: <*> 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
BatteryStatisticsHelper:counts =<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
m1: false 
m1: false 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
isMusicActive... 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
MSG_QUERY_TCP_INFO called,count:<*> 
received cell-signal:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> read from <*> <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> enable, <*>: en=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
onShowStatusChange show:false 
<*> <*> <*> <*> 
<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> is <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
GetAddrInfoHandler addr: uc.huawei.com {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
updateClipping isOverlap:false 
m1: false 
ContentChange for slot: <*> 
isCurrentBySim()=false 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) connected 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> <*> 
restoreBackgroundColor:new=<*>, old=<*> 
hideTraffic 
<*> <*> <*> <*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
updateDimmedActivatedHideSensitive overlap:false 
refreshState=rotation, BooleanState[,icon=ResourceIcon[resId=0x7f0202ed],label=自动旋转,labelTint=<*>,textChangedDelay=<*>,contentDescription=自动旋转屏幕,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=true] 
updateBluetooth:::setBluetoothBatteryEnable false. 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> is not <*> 
<*> <*> is null 
updateDimmedActivatedHideSensitive overlap:false 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
kWhatReset 
<*> <*> <*> <*> 
<*> <*> is null 
<*> <*> <*> <*> state = <*> 
checkPolicyOver currentTimeMillis-beforeTimeMillis<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> does not <*> 
isHasPermission true 
begin of formatChinaDateRange <*> 
updateClipping isOverlap:false 
ContentChange for slot: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> 
hideTraffic 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
receive data len = <*> 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> <*> <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
hideTraffic 
hideTraffic 
receive data len = <*> 
begin 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> stream <*>, <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
ACDB -> <*> 
ACDB -> <*> 
[ReceiverUtils.reportVersionInfo] 
t:false, fl: false, p: <*>, ce: true, we: false 
qsc_send_cmd finish 
<*> <*> <*> <*> 
qsc_send_cmd finish 
isCurrentBySim()=false 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
qsc_decode end 
begin 
QSEECom_send_cmd return! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
[StartupguideUtils.isBeta]is beta=false 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[LogUploadService.resumeUpload] 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
[RouteService.onDestroy] 
<*> <*> pid: <*>, euid: <*> 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = false 
<*> not in <*> <*> 
<*> <*> <*> 
Client requesting input be hidden, pid=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.tencent.mm,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> 
<*> <*> <*> = false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
msg = <*> received 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, <*> <*> <*> <*> eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> <*> (has extras) } 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
<*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Calling fingersense_classify_touch() 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
Calling fingersense_classify_touch() 
getTempInfo error: null, <*> 
c: true, w: false, t: false, l: false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
mVSimCurCardType is -<*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
t:false, fl: false, p: <*>, ce: true, we: false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
Invalid profile no. <*>, total profiles <*> only 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
isCurrentBySim()=false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
isCurrentBySim()=false 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
setTracingEnabled:<*> 
EventHub monitor: no key events in the past <*> 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
m1: false 
mSimSubId:<*> onDataActivity: direction=<*> 
isCardAbsent slot:<*> slotState:<*> 
mVSimCurCardType is -<*> 
Client requesting input be hidden, pid=<*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
mVSimCurCardType is -<*> 
Received kernel message payload: event <*> 
m1: false 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
getStatic,count:<*>,work status:false 
<*> <*> <*> <*> <*> flg=0x50000014 (has extras) } 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
fingersense_touch_up() finished 
onSignal: mSubId=<*>,currDataSubID=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
onSignal: mSubId=<*>,currDataSubID=<*> 
AwareAppMngSort: <*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
is3GCalling is false,mCdmaSlot is -<*> 
sending broadcast to Pid = <*>, Uid = <*> 
<*> <*> pid: <*>, euid: <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
getStatic,count:<*>,work status:false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
c: true, w: false, t: false, l: false 
received cell-signal:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
getTempInfo error: null, <*> 
not in link monitoring mode, ignore TCP result . 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
c: true, w: false, t: false, l: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
not 3G net type. do nothing. 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
######### CMD_QUERY_PKTS ######## 
Change to single clock mode! 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
Calling fingersense_classify_touch() 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Calling fingersense_touch_up() 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
received cell-signal:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
received cell-signal:<*> 
m1: false 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
csr 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
isCurrentBySim()=false 
send_cmd_kernel: cmd=<*> 
ImsServiceSubHandler : Message received: what = <*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCardAbsent slot:<*> slotState:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
mSimSubId:<*> onDataActivity: direction=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
getBuddyInfoLines:buddyinfo: 
m1: false 
mVSimCurCardType is -<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
fingersense_touch_up() finished 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
Invalid profile no. <*>, total profiles <*> only 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
Invalid profile no. <*>, total profiles <*> only 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
onSignal: mSubId=<*>,currDataSubID=<*> 
onDataActivity: direction=<*> 
Invalid profile no. <*>, total profiles <*> only 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
not in link monitoring mode, ignore TCP result . 
Client requesting input be hidden, pid=<*> 
obtain, mHwFlags=-<*> 
Client requesting input be hidden, pid=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
isCardAbsent slot:<*> slotState:<*> 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> app and connected ok, delay to H! 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
isCardAbsent slot:<*> slotState:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
@@@@@@@@@@@@ uid <*> <*> <*> 
APS: 2DSDR: <*> <*> SDR ratio <*> <*> <*> <*> <*> <*> <*> = <*>, height = <*> 
APS: 2DSDR: <*> SDR ratio = <*>.<*>, <*> height = <*>, <*> <*> height = <*> 
isCurrentBySim()=false 
APS: 2DSDR: <*> <*> SDR ratio <*> <*> <*> <*> <*> <*> <*> = <*>, height = <*> 
is3GCalling is false,mCdmaSlot is -<*> 
Invalid profile no. <*>, total profiles <*> only 
<*> <*> <*> <*> 
csr 
onSignal: mSubId=<*>,currDataSubID=<*> 
c: true, w: false, t: false, l: false 
<*>-<*> <*>:<*>:<*><浏览器>[com.android.browser]:[query]读取浏览器历史 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) <*> <*> <*> to uc.huawei.com:<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Invalid profile no. <*>, total profiles <*> only 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onDataActivity: direction=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Invalid profile no. <*>, total profiles <*> only 
getOrInflateState subId:<*> 
Calling fingersense_classify_touch() 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
Calling fingersense_classify_touch() 
######### CMD_QUERY_PKTS ######## 
getStatic,count:<*>,work status:false 
<*> <*> <*> <*> <*> u0 euid: <*> <*> 
sending broadcast to Pid = <*>, Uid = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Invalid profile no. <*>, total profiles <*> only 
<*> <*> <*> <*> <*> <*> <*> <*> 
m1: false 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
<*> <*> <*> <*> <*> <*> <*> 
m1: false 
Calling fingersense_touch_up() 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
@@@@@@@@@@@@ uid <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
ServiceNeeded not <*> <*> <*> u0 euid: <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
poll before: g_monitor_fd =<*> 
not in link monitoring mode, ignore TCP result . 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Invalid profile no. <*>, total profiles <*> only 
csr 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
Calling fingersense_touch_up() 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ImsServiceSub : handleSsac voice = <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCardAbsent slot:<*> slotState:<*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
formatChinaDateTime equals. 
<*> <*> <*> <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
ServiceNeeded not <*> <*> <*> u0 euid: <*> <*> 
Invalid profile no. <*>, total profiles <*> only 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
received cell-signal:<*> 
ImsServiceSubHandler : Message received: what = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCardAbsent slot:<*> slotState:<*> 
getStatic,count:<*>,work status:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ServiceNeeded not <*> <*> <*> u0 euid: <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
csr 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
ActivityThread,attachApplication 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Client requesting input be hidden, pid=<*> 
getTempInfo error: null, <*> 
msg = <*> received 
t:false, fl: false, p: <*>, ce: true, we: false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
onDataActivity: direction=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] <*> <*> <*> <*> <*> <*> 
<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
ServiceNeeded not <*> <*> <*> u0 euid: <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
<*> <*> <*> class android.app.HwCustNotificationImpl 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
isCloneProcess = false 
<*> <*> <*> 
mVSimCurCardType is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
mVSimCurCardType is -<*> 
isCardAbsent slot:<*> slotState:<*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> app and connected ok, delay to H! 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
isCurrentBySim()=false 
t:false, fl: false, p: <*>, ce: true, we: false 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
######### CMD_QUERY_PKTS ######## 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
m1: false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> flg=0x50000014 (has extras) } 
Change to single clock mode! 
<*> <*> <*> <*> 
ServiceNeeded not <*> <*> <*> u0 euid: <*> <*> 
<*> <*> pid: <*>, euid: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> failed to <*> <*> <*> 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> failed to <*> <*> <*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> <*> <*> <*> <*> <*> <*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
mSimSubId:<*> onDataActivity: direction=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
ServiceNeeded not bring down <*> u0 euid: <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
<*> <*> <*> <*> <*> <*> euid: <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
not 3G net type. do nothing. 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sendEvent:action=<*>, flag=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*> 
shouldBlockLocation ret:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> reason = <*> 
obtain, mHwFlags=<*> 
<*> { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
APS: 2DSDR: <*> <*> SDR ratio <*> <*> <*> <*> <*> <*> <*> = <*>, height = <*> 
Calling fingersense_classify_touch() 
<*> <*> pid: <*>, euid: <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
APS: 2DSDR: <*> SDR ratio = <*>.<*>, <*> height = <*>, <*> <*> height = <*> 
<*> <*> pid: <*> is <*> <*> pid: <*> 
Change to single clock mode! 
fingersense_classify_touch() finished 
shouldBlockLocation running ... 
<*> = false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
setTracingEnabled:<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
<*> <*> <*>, uid: <*>, pid: <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> <*> <*> <*> <*> euid: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onDataActivity: direction=<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getOrInflateState subId:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> does not <*> 
sending broadcast to Pid = <*>, Uid = <*> 
<*> <*> <*> <*> <*> <*> euid: <*> 
Report temperature: [ap] temp :<*> report_threshold:<*> 
csr 
c: true, w: false, t: false, l: false 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
isCurrentBySim()=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
c: true, w: false, t: false, l: false 
received cell-signal:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> <*> 
<*> <*> <*>, uid: <*>, pid: <*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> <*> euid: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> does not <*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
<*> <*> <*> <*> 
<*> <*> = <*> 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) notify user tcp connected successully at <*> to uc.huawei.com:<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
fingersense_touch_up() finished 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
install 
isCurrentBySim()=false 
<*> pid: <*>, <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
sendEvent:action=<*>, flag=<*> 
fingersense_touch_up() finished 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
t:false, fl: false, p: <*>, ce: true, we: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
<*> <*> <*> <*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
fingersense_classify_touch() finished 
send_cmd_kernel: cmd=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
m1: false 
c: true, w: false, t: false, l: false 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
new ScenarioAction sPoolSize: <*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
onDataActivity: direction=<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
ImsServiceSubHandler : Message received: what = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
mVSimCurCardType is -<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> is depended by <*> <*> delay to H! 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =time_tick 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
isCardAbsent slot:<*> slotState:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
c: true, w: false, t: false, l: false 
fingersense_classify_touch() finished 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
mSimSubId:<*> onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
Calling fingersense_touch_up() 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
is3GCalling is false,mCdmaSlot is -<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Invalid profile no. <*>, total profiles <*> only 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
c: true, w: false, t: false, l: false 
t:false, fl: false, p: <*>, ce: true, we: false 
fingersense_classify_touch() finished 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
begin of formatChinaDateRange <*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
onDataActivity: direction=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
onDataActivity: direction=<*> 
fingersense_classify_touch() finished 
Calling fingersense_classify_touch() 
fingersense_classify_touch() finished 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCardAbsent slot:<*> slotState:<*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
ImsServiceSubHandler : Message received: what = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
new ScenarioAction sPoolSize: <*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Calling fingersense_touch_up() 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
poll before: g_monitor_fd =<*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
transitionTo:mode=<*>, isEmuiStyle=true 
obtain, mHwFlags=<*> 
------------startInput-------------- 
<*> <*> <*> <*> 
formatChinaDateTime equals. 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
APS: 2DSDR: <*> SDR ratio = <*>.<*>, <*> height = <*>, <*> <*> height = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
onSignal: mSubId=<*>,currDataSubID=<*> 
c: true, w: false, t: false, l: false 
t:false, fl: false, p: <*>, ce: true, we: false 
MSG_QUERY_TCP_INFO called,count:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setTracingEnabled:<*> 
APS: 2DSDR: <*> SDR ratio = <*>.<*>, <*> height = <*>, <*> <*> height = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
fingersense_touch_up() finished 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
received cell-signal:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
csr 
getOrInflateState subId:<*> 
m1: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
getOrInflateState subId:<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
APS: 2DSDR: <*> <*> <*> <*> SDR ratio 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
Received kernel message payload: event <*> 
formatChinaDateTime, change to China <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
mSimSubId:<*> onDataActivity: direction=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
new ScenarioAction sPoolSize: <*> 
received cell-signal:<*> 
csr 
onFling::not valid gesture or touch plus on, false, return! 
new ScenarioAction sPoolSize: <*> 
new ScenarioAction sPoolSize: <*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
<*> = <*> 
m1: false 
<*> <*> pid: <*>, euid: <*> 
NearBy-Service:====>DisabledState 
MagicLink2-BroadcastReceiver:====>WIFI_P2P_THIS_DEVICE_CHANGED_ACTION 
Invalid profile no. <*>, total profiles <*> only 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
onFling::not valid gesture or touch plus on, false, return! 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
poll before: g_monitor_fd =<*> 
fingersense_classify_touch() finished 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> pid: <*> is depended by pid: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
begin of formatChinaDateRange <*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
isCardAbsent slot:<*> slotState:<*> 
<*> <*> Connect to server address = [uc.huawei.com,] port = <*> 
EventHub monitor: no key events in the past <*> 
PFW.HwPFWService:alarm trigger 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getOrInflateState subId:<*> 
ImsServiceSubHandler : Message received: what = <*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
isCurrentBySim()=false 
Calling fingersense_classify_touch() 
Calling fingersense_touch_up() 
ImsServiceSubHandler : Message received: what = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
received cell-signal:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
mSimSubId:<*> onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
getStatic,count:<*>,work status:false 
querySoundEffectsEnabled... 
obtain, mHwFlags=-<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
Calling fingersense_touch_up() 
<*> <*> <*> <*> <*> <*> <*> 
Calling fingersense_classify_touch() 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
querySoundEffectsEnabled... 
mDateString is: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
mSimSubId:<*> onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
csr 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCurrentBySim()=false 
fingersense_classify_touch() finished 
Calling fingersense_touch_up() 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
onDataActivity: direction=<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
mSimSubId:<*> onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Client requesting input be hidden, pid=<*> 
received cell-signal:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
getOrInflateState subId:<*> 
onDataActivity: direction=<*> 
m1: false 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
getTempInfo error: null, <*> 
poll before: g_monitor_fd =<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
is3GCalling is false,mCdmaSlot is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
Calling fingersense_touch_up() 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
isCurrentBySim()=false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
new ScenarioAction sPoolSize: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
onSignal: mSubId=<*>,currDataSubID=<*> 
@@@@@@@@@@@@ uid <*> <*> <*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
<*> connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
is3GCalling is false,mCdmaSlot is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
getOrInflateState subId:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
Calling fingersense_touch_up() 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
not 3G net type. do nothing. 
mSimSubId:<*> onDataActivity: direction=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
######### CMD_QUERY_PKTS ######## 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
c: true, w: false, t: false, l: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
Calling fingersense_classify_touch() 
Calling fingersense_classify_touch() 
mSimSubId:<*> onDataActivity: direction=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCurrentBySim()=false 
new ScenarioAction sPoolSize: <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
<*> <*> <*> <*> = <*>, <*> <*> <*> <*> = false 
csr 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
<*> connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
getTempInfo error: null, <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
csr 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
<*> <*> = <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
WatchThread{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is closed 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
c: true, w: false, t: false, l: false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateChargingLocked: charging=false 
received broadcast <*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Calling fingersense_classify_touch() 
new ScenarioAction sPoolSize: <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
onFling::not valid gesture or touch plus on, false, return! 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> <*> = <*>, <*> <*> <*> <*> = false 
obtain, mHwFlags=<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
transitionTo:mode=<*>, isEmuiStyle=true 
<*> <*> <*> <*> 
EventCenter Get <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
at android.database.sqlite.SQLiteDatabase.openInner(SQLiteDatabase.java:<*>) 
action:com.huawei.android.action.WEATHER_CHANGE, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> need to <*> <*> <*> = <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> euid: <*> 
<*> <*> = <*> 
Change to single clock mode! 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bmp is null : false 
Provider.call: getPrefString 
<*> <*> <*> <*> : <*> <*> : false <*> : <*> <*> <*> <*> <*> <*> : false 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> 
setBackgroundAlpha:alpha=<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
state.clipTopAmount:<*>, i:<*> 
suspendAutohide 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
updateDimmedActivatedHideSensitive overlap:false 
onExpandingFinished 
applyIconTint ignore 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
sending broadcast to Pid = <*>, Uid = <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
<*> <*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown <*> java.net.SocketException: Socket is closed 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> <*> <*> <*> 
ActivityThread,attachApplication 
handle_exception_events enter 
action:android.intent.action.PRECISE_DATA_CONNECTION_STATE_CHANGED, mPermissionType:<*> 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
HsmStat_info:feature enable:true 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[main-<*>]action=android.net.conn.CONNECTIVITY_CHANGE(/AutoCheckReceiver.java:<*>) 
StartupResidentService:InnerHandler Message:<*> 
<*> <*> <*> 
<*> <*> size is <*> <*> 
<*> <*> <*> 
obtain, mHwFlags=<*> 
<*> Intent { <*> <*> 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
Launcher.Folder childCount: <*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
transitionTo:mode=<*>, isEmuiStyle=false 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
PowerManagerNotifier onWakefulnessChangeStarted: wakefulness=<*>, <*> <*> <*> <*> 
KGSvcCall onStartedGoingToSleep. 
<*> <*> <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> exit with code(<*>) 
QSEECom_send_cmd return! 
<*> <*> <*> <*> <*> 
at com.huawei.keyguard.util.BitmapUtils.getColorInfo(BitmapUtils.java:<*>) 
<*> <*> <*> <*> 
Reading a NULL string not supported here. 
scheduleLightAlarmLocked(<*>) 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
CtrlSocket Receiver,disable: <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
NormalTrafficAnalysis:alert byte = <*>, <*> <*> 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
<*> <*> <*> is <*>: <*> 
hideTraffic 
onShowStatusChange show:false 
Apply window <*> <*> 
setKeyguardWallpaperAVGColor:<*> 
<*> <*> <*> 
setBackgroundColor:new=<*>, old=<*> 
Wallpaper changed 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> need to <*> <*> 
hideTraffic 
queryIntentActivitiesAsUser size results:<*>, for package:com.huawei.espacev<*> 
<*> <*> <*> <*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Error reading charge file 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
PFW.HwPFWAppRestartPolicy:receive action = <*> 
ACTION_PFW_WAKEUP_TIMER 
getCSubChrVolteStatisticCategory enter. 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
getTempInfo error: null, <*> 
<*> <*> = <*>, <*> = <*>, <*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
update() updated: <*> 
<*> <*> : <*> 
<*> <*> : <*> 
msg = <*> received 
update() updated: <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
Change to single clock mode! 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onShowStatusChange show:false 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
scheduleAlarmLocked(<*>, false) 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*>|logicalDealBroadcastEvent : Intent { <*> flg=0x50000014 (has extras) } 
Create obj success use class <*> 
<*> <*> <*> 
<*> <*> size is <*> <*> <*> is <*> 
handleMessage(<*>) 
handleDreamLocked 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
Error reading charge file 
getTempInfo error: null, <*> 
send: <*> 
handle_exception_events enter 
getTempInfo error: null, <*> 
Error reading charge file 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
ImsServiceSubHandler : Message received: what = <*> 
onModemInfo: type=<*>,valueLen=<*>,subId=<*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
Enter QmiChr_FetchSignalFromModem 
<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
ImsSenderRxr : <*> 
ImsSenderRxr : Response data
<*> <*> = <*>, <*> = <*>, <*> = <*> 
<*> <*> <*> <*> : false <*> : false <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> 
<*> <*> is depended by <*> <*> delay to H! 
<*> <*> : false 
PFW.HwPFWService:alarm trigger 
NormalTrafficAnalysis:alert byte = <*>, so return 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
shouldBlockLocation running ... 
send: <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
send: <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
handle_exception_events enter 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
process buffer and get message 
Report temperature: <*> temp :<*> report_threshold:<*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> : <*> 
Model onReceive user=UserHandle{<*>} 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> what = <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ImsSenderRxr : <*> = true type = <*> status = <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ImsServiceSub : type = <*> status = <*> <*> = true 
ImsServiceSub : <*> <*> = <*> <*> = <*> status = <*> <*> = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> = <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
formatChinaDateTime, change to China <*> 
<*> <*> <*> <*> 
read from oem info: <*> 
INTENT_HW_REPAIR_HELPER send 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
NatTrafficNotifyService:delta byte = <*> no traffic delta = 0Traffic state is <*> 
<*> <*> : <*> 
<*> <*> : <*> 
<*> <*> : <*> 
update() updated: <*> 
update() updated: <*> 
update() updated: <*> 
update() updated: <*> 
update() updated: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
Report temperature: <*> temp :<*> report_threshold:<*> 
Mitigation:VDD[MODEM]:<*> 
moveToDoneDir 
onSignal: mSubId=<*>,currDataSubID=<*> 
applyIconTint 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
isCloneProcess = false 
<*> <*> line <*> <*> 
send: <*> 
<*> = <*> 
<*> <*> <*> <*> 
<*> <*> need to <*> <*> <*> 
<*> <*> <*> <*> <*> --> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> line <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*> <*> state = <*>, <*> <*> <*> <*> = <*>, <*> <*> = <*>, <*> <*> <*> <*> = <*> 
<*> <*> state = <*>, <*> <*> <*> <*> = <*>, <*> <*> = <*>, <*> <*> <*> <*> = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
I/===> int <*> line <*> 
shouldBlockLocation ret:false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> is not <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at com.huawei.android.chr.ProtocolLogManager.addAPCommonParaForEvent(ProtocolLogManager.java:<*>) 
ImsSenderRxr : Response data
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
received cell-signal:<*> 
ImsServiceSub : type = <*> status = <*> <*> = true 
ImsServiceSub : type = <*> status = <*> <*> = true 
is Beta User, userType = <*> 
Error reading charge file 
ImsSenderRxr : <*> 
ImsServiceSubHandler : <*> <*> state is <*> 
state is <*> 
ImsServiceSub : <*> = <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
Sending non-protected broadcast <*> from system <*> <*> <*> <*> 
msg = <*> received 
Model onReceive <*> <*> <*> flg=0x50000014 (has extras) } 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
set notification panel padding = <*> 
handle_exception_events enter 
handle_exception_events enter 
<*> <*> <*> <*> <*> <*> 
handle_exception_events enter 
process buffer and get message 
PackAutoLog onPrePack 
<*> <*> <*> <*> 
create: <*> 
isWiredHeadsetOn... 
c: true, w: false, t: false, l: false 
onReceive, action:android.os.action.DEVICE_IDLE_MODE_CHANGED 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
<*> <*> = <*> <*> 
getTempInfo error: null, <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
msg = <*> received 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> = <*> 
<*> <*> = <*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ImsServiceSub : type = <*> status = <*> <*> = true 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
handle_exception_events enter 
create: <*> 
send: <*> 
process buffer and get message 
send: <*> 
handle_exception_events enter 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
handle_exception_events enter 
process buffer and get message 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
msg = <*> received 
msg = <*> received 
ImsSenderRxr : <*> = true type = <*> status = <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> : false <*> : false <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> = <*> <*> 
handle_exception_events enter 
csr 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
process buffer and get message 
<*> <*> = <*>, <*> = <*>, <*> <*> <*> = <*> 
ImsServiceSub : <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rac Change (PDC) data: [<*>, <*>] 
csr 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
set notification panel padding = <*> 
hideTraffic 
onShowStatusChange show:false 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
ApStaDisabledState what=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
RCV <- {<*> <*> Tethering stats list completed} 
chinaDateTime:凌晨<*>:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
PFW.HwPFWService:mBroadcastReceiver action = <*> 
<*> <*> <*> <*> <*> is not in the <*> <*> <*> <*> <*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> is not in the <*> <*> <*> <*> <*> 
Enter QmiChr_GetProtocolInfo 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
update() updated: <*> 
<*> <*> <*> <*> uid: <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
ImsSenderRxr : <*> = <*> status = <*> <*> = <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> 
is Beta User, userType = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> : <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
send: <*> 
send: <*> 
ImsSenderRxr : <*> = <*> status = <*> <*> = <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ImsServiceSub : type = <*> status = <*> <*> = true 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
msg = <*> received 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Report temperature: [ap] temp :<*> report_threshold:<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
msg = <*> received 
msg = <*> received 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ImsServiceSubHandler : <*> <*> state is <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> 
is Beta User, userType = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> = <*> 
readRilMessage: Buffer = [B@204bb9f <*> <*> <*> 
ImsSenderRxr : <*> = true type = <*> status = <*> <*> <*> <*> 
Broadcasting intent ACTION_RAC_CHANGED 
ImsServiceSub : <*> <*> = <*> <*> = <*> status = <*> <*> = <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
SND -> {<*> bandwidth gettetherstats} 
POSITION_COLLECTOR schedule 
mDateString is: <*> 
msg = <*> received 
hideTraffic 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
send: <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
stopNavigating, mStarted=false 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> count = <*> 
isMusicActive... 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
ACTION_BATTERY_CHANGED pluggedType: <*> 
handleBatteryUpdate 
getTempInfo error: null, <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
onReceive, action:android.intent.action.BATTERY_CHANGED 
<*> <*> <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> <*> <*> <*> <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
RCV <- {<*> <*> Tethering stats list completed} 
getTempInfo error: null, <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ImsServiceSub : <*> <*> 
ImsServiceSub : <*> <*> 
ImsSenderRxr : isValid = true type = <*> status = <*> <*> <*> <*> 
at com.huawei.android.chr.qcom.QcomModemInfoCollector.getHardWareVersion(QcomModemInfoCollector.java:<*>) 
<*> <*> <*> 
ImsServiceSub : <*> 
ImsServiceSub : <*> <*> <*> <*> <*> = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
msg = <*> received 
received cell-signal:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> = <*> 
<*> read from <*> <*> <*> <*> = <*> 
ImsSenderRxr : isValid = true type = <*> status = <*> <*> <*> <*> 
ContentChange for slot: <*> 
applyIconTint ignore 
ImsServiceSub : <*> = <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
received cell-signal:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
c: true, w: false, t: false, l: false 
No config <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.open(Native Method) 
<*> <*> <*> <*> <*> <*> 
ImsSenderRxr : <*> <*> 
ImsSenderRxr : [UNSL]< <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
ImsServiceSub : <*> <*> = <*> <*> = <*> status = <*> restrictCause = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rac Change (PDC) data: [<*>, <*>] 
ImsSenderRxr : <*> = <*> status = <*> restrictCause = <*> <*> <*> <*> 
<*> <*> <*> is not <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
action:huawei.intent.action.IMS_SERVICE_STATE_CHANGED, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> : <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
<*> what = <*> 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
ImsSenderRxr : <*> = <*> status = <*> restrictCause = <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
is Beta User, userType = <*> 
Sending non-protected broadcast <*> from system <*> <*> <*> <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
<*> <*> <*> <*> <*> is not in the <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> = <*> <*> 
action:com.android.huawei.broadcast.HwRepairHelper, mPermissionType:<*> 
Split enqueueing broadcast <*> <*> 
is Beta User, userType = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
msg = <*> received 
SND -> {<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Failed to get <*> 
<*> <*> <*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
update() updated: <*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> : <*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
c: true, w: false, t: false, l: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
ImsServiceSub : <*> = <*> 
ImsServiceSub : <*> = <*> 
send: <*> 
send: <*> 
BatteryStatisticsHelper:counts =<*> 
handle_exception_events enter 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
process buffer and get message 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
msg = <*> received 
handleMessage what = <*> 
<*> <*> <*> = <*>, <*> = <*>, <*> = <*>, <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
at com.huawei.android.chr.qcom.QcomModemInfoCollector.getHardWareVersion(QcomModemInfoCollector.java:<*>) 
<*> <*> <*> <*> <*> <*> 
ImsServiceSub : <*> <*> <*> <*> <*> = <*> 
ImsServiceSub : <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
<*> <*> = <*> 
<*> <*> <*> <*> <*> 
action:huawei.intent.action.IMS_SERVICE_STATE_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> : false <*> : false <*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
received cell-signal:<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> --> <*> 
getTempInfo error: null, <*> 
create: <*> 
getTempInfo error: null, <*> 
ImsSenderRxr : isValid = true type = <*> status = <*> userdata = null[SUB0] 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ImsServiceSub : type = <*> status = <*> isValid = true 
<*> <*> <*> 
Sending non-protected broadcast <*> from system <*> <*> <*> <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
<*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
mActiveIface: rmnet_data<*> 
PFW.HwPFWAppRestartPolicy:receive action = <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> = <*> to <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Split enqueueing broadcast <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
handle_exception_events enter 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ImsServiceSub : <*> <*> = <*> <*> = <*> status = <*> restrictCause = <*> 
ImsServiceSub : <*> <*> = <*> <*> = <*> status = <*> restrictCause = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> to true 
msg = <*> received 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
set notification panel padding = <*> 
process buffer and get message 
Change to single clock mode! 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ImsSenderRxr : [UNSL]< <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
state is <*> 
reportMmEvent: RejectType=<*>,OrgRejectCause=<*>,OptRejectCause=<*>,RejectDomain=<*>,RejectPlmn=<*>,RejectCellId=<*>,RejectLa=<*>,RejectRa=<*>,RejectRatType=<*> 
ImsServiceSub : type = <*> status = <*> isValid = true 
create: <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
is Beta User, userType = <*> 
is Beta User, userType = <*> 
<*> <*> <*> <*> <*> <*> 
ImsServiceSub : type = <*> status = <*> isValid = true 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
Sending non-protected broadcast <*> from system <*> <*> <*> <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
<*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> = <*> <*> 
chinaDateTime:清晨<*>:<*> 
chinaDateTime:清晨<*>:<*> 
msg = <*> received 
<*> <*> = <*>, <*> = <*> 
mDateString is: <*> 
csr 
is Beta User, userType = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
no controller energy info supplied 
no controller energy info supplied 
<*> <*> : <*> 
update() updated: <*> 
clear info:clearTimerSharedPref 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
send: <*> 
send: <*> 
handle_exception_events enter 
<*> <*> <*> <*> 
create: <*> 
<*> <*> <*> 
onShowStatusChange show:false 
<*> <*> <*> <*> <*> <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
onCreate 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
New <*> <*> <*> <*> <*> <*> <*> 
<*> <*> does not <*> 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
NormalTrafficAnalysis:alert byte = <*>, so return 
<*> <*> <*> <*> : <*> <*> : false <*> : <*> <*> <*> <*> <*> <*> : false 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> changed bounds; rebatching 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getResourceName: resourceName:ORDEREDBROADCAST 
moveToDoneDir 
New <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> 
<*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
wifiSleepPolicy:<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
handle_exception_events enter 
KGSvcFp onAuthenticationAcquired.<*> 
<*> <*> <*> 
<*> called handle:<*> <*> 
LightSensor, enable, <*>: mEnabled=<*> 
formatChinaDateTime, change to China <*> 
begin of formatChinaDateRange <*> 
KGSvcFp onAuthenticationAcquired.<*> 
<*> pid: <*>, <*> <*> 
<*> <*> <*> is: <*> 
begin 
send data return = <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
removeNotificationChildren 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
refreshState=sound, RingModeState[,icon=com.android.systemui.qs.QSTile$DrawableIcon@8fb5eb0,label=响铃,labelTint=<*>,textChangedDelay=<*>,contentDescription=响铃,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=true,mode=<*>] 
refreshState=flashlight, BooleanState[,icon=ResourceIcon[resId=0x7f020212],label=手电筒,labelTint=<*>,textChangedDelay=<*>,contentDescription=手电筒,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false] 
<*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
0x0, 0x0, 0x0, 0x<*> 
read from oem info: <*> 
NumTracks(<*>) 
write:userId=<*>,mPosBrightness =<*>.<*>,mOffsetBrightness_last=<*>.<*>,mIsUserChange=false,mDeltaNew=<*>.<*>,mStartLuxDefaultBrightness=<*>.52mLastLuxDefaultBrightness=<*>.<*>,mAmLux=<*>.<*> 
Pid:<*> deleteTrackName(<*>) 
<*> <*> <*> <*> 
ACDB -> <*> 
enable_audio_route: exit 
<*> <*> <*> <*> 
<*> <*> pid: <*> is depended by pid: <*> 
showNotificationAll 
<*> <*> <*> 
turn off notificationLight due to incall or screenon 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
qsc_send_cmd finish 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
setAlarmsPending ... 
unproxy app:com.android.browser,uid:<*>,result:true 
QSEECom_send_cmd return! 
c: true, w: false, t: false, l: false 
<*> pid: <*>, <*> <*> 
<*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Change to single clock mode! 
readRilMessage: Buffer = [B@204bb9f <*> <*> <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> <*> <*> <*> 
setAlarmsPending ... 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Failing getSupportedFeatureset because HAL isn't started 
no controller energy info supplied 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Broadcasting intent ACTION_RAC_CHANGED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x2,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x2,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x2,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
csr 
<*> took <*> ms 
begin 
qsc_send_cmd finish 
send data return = <*> 
begin 
qsc_send_cmd finish 
<*> <*> <*> <*> is <*> 
KGSvcCall onScreenTurnedOff. 
<*> <*> <*> <*> <*> <*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> <*> <*> <*> <*> 
isSimPinSecure mSimDatas is null or empty 
ApStaDisabledState what=<*> 
<*> <*> <*> = false 
<*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> <*> = false, <*> <*> <*> <*> = <*>, <*> = <*>, delta = <*>, mScrnOffAccTime = <*>, mScrnOnAccTime = <*> 
OverscanTimeout run 
ITrafficInfo:ITrafficInfo create 301updateBytes = <*> 
<*> <*> <*> <*> <*> <*> 
setScrollingEnabled: true 
Handle message: <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
getTempInfo error: null, <*> 
<*> <*> <*> 
Split enqueueing broadcast <*> <*> 
received broadcast <*> 
resetCommute 
set notification panel padding = <*> 
begin of formatChinaDateRange <*> 
check dependency pid: <*> is depended by pid: <*> 
<*> <*> <*> OK ! 
<*> <*> <*> OK ! 
<*> <*> <*> [<*>, <*>] 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
<*> <*> <*> <*> <*> <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> OK ! 
<*> <*> <*> <*> does not <*> <*> <*> 
onShowStatusChange show:false 
mDateString is: <*> 
Change to single clock mode! 
hideTraffic 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
ImsSenderRxr : [UNSL]< <*> 
at com.huawei.android.chr.ProtocolLogManager.handleMessage(ProtocolLogManager.java:<*>) 
<*> <*> <*> 
<*> <*> <*> <*> 
ImsServiceSub : type = <*> status = <*> isValid = true 
<*> to get <*> <*> <*> <*> is not <*> 
Create obj success use class <*> 
<*> <*> <*> <*> 
<*> count = <*> 
<*> <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
EventCenter Get <*> 
ImsServiceSub : <*> networkMode = <*> registered = <*> status = <*> restrictCause = <*> 
ImsServiceSub : type = <*> status = <*> isValid = true 
<*> <*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> is: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> uid: <*>, pid: <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
action:android.intent.action.ALARM_CHANGED, mPermissionType:<*> 
isWiredHeadsetOn... 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> to <*> 
<*> <*> <*> <*> <*> 
begin of formatChinaDateRange <*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
at java.io.FileInputStream.open(Native Method) 
Error reading charge file 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
begin 
<*> calling driver setDelay <*> ms 
<*> <*> <*> = <*> 
Setting HAL interactive mode to true 
<*> <*> <*> <*> <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
KGSvcCall onScreenTurnedOn. 
<*> result = <*> <*> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*> took <*> ms <*> <*> <*> <*> <*> <*> <*> <*> 
onAuthenticated <*> 
<*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> 
onAcquired <*> 
<*> took <*> ms <*> <*> <*> <*> <*> <*> <*> <*> 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
apply skiped :<*> 
setScrollingEnabled: true 
<*> <*> <*> <*> <*> 
refreshState=flashlight, BooleanState[,icon=ResourceIcon[resId=0x7f020212],label=手电筒,labelTint=<*>,textChangedDelay=<*>,contentDescription=手电筒,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false] 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
cancelAutohide 
setLift <*>.<*> 
<*> <*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
apply skiped :<*> 
<*> <*> <*> 
<*> <*> <*> 
0x0, 0x0, 0x0, 0x<*> 
<*> <*> <*> <*> <*> <*> is <*> 
Animating brightness: target=<*>, rate=<*> 
Handle message: <*> 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> exit with code(<*>) 
<*> <*> is abandoned for <*> <*> <*> 
getTempInfo error: null, <*> 
NatTrafficNotifyService:delta byte = <*> no traffic delta = 0Traffic state is <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> uid = <*> pid = <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> pid: <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
formatChinaDateTime, change to China <*> 
<*>| ## MSG_DEAL_SYSTEM_EVENT android.intent.action.TIME_TICK 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> type <*> <*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
getTempInfo error: null, <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> = <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
setAlarmsPending ... 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
Apply window Height <*> 
Apply window Height MATCH_PARENT 
updateLightsLocked --> level:<*>, status:<*> 
<*>|onStandStepChanged <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
onFling::not valid gesture or touch plus on, false, return! 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateClipping isOverlap:false 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|rebuild notification 
updateNotificationShade 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> stream <*>, <*> <*> <*> <*> 
<*> stream <*>, <*> <*> <*> <*> 
applyIconTint ignore 
applyIconTint ignore 
shouldBlockLocation running ... 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> = <*> <*> = <*> 
applyIconTint ignore 
applyIconTint ignore 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
<*> <*> state = <*> <*> <*> 
<*> <*> <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
<*> <*> <*> <*> <*> <*> 
<*> subId=<*> retVal=true 
RCV <- {<*> <*> <*> <*> <*> 
cancelNotification,index:-<*> 
<*> <*> <*> type is <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
getMobileDataEnabled()+ subId=<*> 
RCV <- {<*> <*> Tethering stats list completed} 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> :: Data <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
ExtraTrafficSetting:result is empty 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
CollectorManager--isCollectorEnabled--getBoolean: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
Create obj success use class <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
StartupResidentService:InnerHandler Message:<*> 
getOrInflateState subId:<*> 
StartupResidentService:InnerHandler Message:<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
StartupResidentService:InnerHandler Message:<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> Intent { <*> <*> 
<*> is -<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> 
<*> = <*> 
setIsExpanded: false 
showNotificationAll 
obtain, mHwFlags=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
Apply window Height <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> is not <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> ==================== TCP CLIENT <*> <*> <*> 
{"status":"<*>"}(/HttpCommunicator.java:<*>) 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
moveTaskToTop mTaskChanged:true 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
<*> <*> <*> <*> <*> <*> <*> 
Create obj success use class <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
release:lock=<*>, flg=0x0, <*> <*> <*> uid=<*>, pid=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [<*>_<*>.log] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:idle state change to <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> ok 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Launcher.Folder childCount: <*> 
Launcher.Folder childCount: <*> 
handleANRFilterFIFO,uid = <*> = <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
handleANRFilterFIFO,uid = <*> = <*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
Heartbeat timer.timers{<*>} <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
fingersense_classify_touch() finished 
t:false, fl: false, p: <*>, ce: true, we: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
getOrInflateState subId:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
Calling fingersense_touch_up() 
begin 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
QSEECom_send_cmd return! 
<*> <*> <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> 
fingersense_classify_touch() finished 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
c: true, w: false, t: false, l: false 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
mSimSubId:<*> onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
isCurrentBySim()=false 
isCurrentBySim()=false 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
querySoundEffectsEnabled... 
Calling fingersense_touch_up() 
csr 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Calling fingersense_touch_up() 
<*> <*> <*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
keyAppBroadcastQueueForIntent intent Intent { <*> flg=0x10 (has extras) } on bgkeyapp queue 
<*> <*> <*> 
action:com.huawei.android.action.launcher_weather_icon_change, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> <*> (has extras) } 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Calling fingersense_touch_up() 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
onDataActivity: direction=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
not 3G net type. do nothing. 
Received kernel message payload: event <*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ImsServiceSubHandler : Message received: what = <*> 
getOrInflateState subId:<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> <*> uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
updateBluetooth:::setBluetoothBatteryEnable false. 
isCloneProcess = false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
msg = <*> received 
<*> <*> <*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Calling fingersense_touch_up() 
mSimSubId:<*> onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
setBackgroundColor:new=<*>, old=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
t:false, fl: false, p: <*>, ce: true, we: false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
JNI_OnLoad 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
fingersense_classify_touch() finished 
InputDispatcher::monitor frozen check! 
at java.io.FileInputStream.open(Native Method) 
<*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
csr 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
<*> <*> <*> <*> app and connected ok, delay to H! 
######### CMD_QUERY_PKTS ######## 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Calling fingersense_classify_touch() 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Report temperature: <*> temp :<*> report_threshold:<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Calling fingersense_classify_touch() 
new ScenarioAction sPoolSize: <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
getOrInflateState subId:<*> 
mThermalService is NULL! 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
getTempInfo error: null, <*> 
received cell-signal:<*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
<*> <*> <*> <*> <*> java.net.SocketException: Socket <*> 
GetAddrInfoHandler addr: uc.huawei.com {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp <*> <*> <*> 
isCurrentBySim()=false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
fingersense_classify_touch() finished 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
onFling::not valid gesture or touch plus on, false, return! 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
csr 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Calling fingersense_classify_touch() 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Calling fingersense_classify_touch() 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
setTracingEnabled:<*> 
formatChinaDateTime, change to China <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
sending broadcast to Pid = <*>, Uid = <*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
csr 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
new ScenarioAction sPoolSize: <*> 
mVSimCurCardType is -<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
mVSimCurCardType is -<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
obtain, mHwFlags=<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
onDataActivity: direction=<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> temp_new :<*> temp_old :<*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
isCurrentBySim()=false 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
new ScenarioAction sPoolSize: <*> 
new ScenarioAction sPoolSize: <*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Received kernel message payload: event <*> 
not in link monitoring mode, ignore TCP result . 
Invalid profile no. <*>, total profiles <*> only 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
getStatic,count:<*>,work status:false 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
<*> <*> <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> <*> <*> im app and connected ok, delay to H! 
fingersense_touch_up() finished 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
isCurrentBySim()=false 
check dependency pid: <*> is depended by pid: <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
RCV <- {<*> IfaceClass idle <*> <*>} 
received cell-signal:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
received cell-signal:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
onDataActivity: direction=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
getOrInflateState subId:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
received cell-signal:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
ImsServiceSubHandler : Message received: what = <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> = <*> 
begin of formatChinaDateRange <*> 
chinaDateTime:早上<*>:<*> 
<*>| ## MSG_DEAL_SYSTEM_EVENT android.intent.action.TIME_TICK 
onSignal: mSubId=<*>,currDataSubID=<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Application com.tencent.mm is im app and connected ok, delay to H! 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
fingersense_classify_touch() finished 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
onFling::not valid gesture or touch plus on, false, return! 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
onSignal: mSubId=<*>,currDataSubID=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
isCardAbsent slot:<*> slotState:<*> 
mVSimCurCardType is -<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
HiWiService onCreate 
ExtraTrafficSetting:result is empty 
mSimSubId:<*> onDataActivity: direction=<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
Calling fingersense_classify_touch() 
isCurrentBySim()=false 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
Calling fingersense_touch_up() 
Calling fingersense_touch_up() 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
updateChargingLocked: charging=false 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getStatic,count:<*>,work status:false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Calling fingersense_touch_up() 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
fingersense_classify_touch() finished 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onFling::not valid gesture or touch plus on, false, return! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
mThermalService is NULL! 
t:false, fl: false, p: <*>, ce: true, we: false 
Access denied finding property "persist.sys.smart_power" 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
m1: false 
getStatic,count:<*>,work status:false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
onFling::not valid gesture or touch plus on, false, return! 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
fingersense_touch_up() finished 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
isCurrentBySim()=false 
t:false, fl: false, p: <*>, ce: true, we: false 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
isCardAbsent slot:<*> slotState:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
m1: false 
c: true, w: false, t: false, l: false 
fingersense_touch_up() finished 
onSignal: mSubId=<*>,currDataSubID=<*> 
InputDispatcher::monitor frozen check! 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
send_cmd_kernel: cmd=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =time_tick 
begin of formatChinaDateRange <*> 
chinaDateTime:早上<*>:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
c: true, w: false, t: false, l: false 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
fingersense_touch_up() finished 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Client requesting input be hidden, pid=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
is3GCalling is false,mCdmaSlot is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getOrInflateState subId:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
not 3G net type. do nothing. 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Calling fingersense_classify_touch() 
fingersense_classify_touch() finished 
is3GCalling is false,mCdmaSlot is -<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
fingersense_classify_touch() finished 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
poll before: g_monitor_fd =<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Calling fingersense_touch_up() 
Model onReceive <*> <*> <*> flg=0x50000014 (has extras) } 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Change to single clock mode! 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
getStatic,count:<*>,work status:false 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
mVSimCurCardType is -<*> 
EventHub monitor: no key events in the past <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
send_cmd_kernel: cmd=<*> 
getOrInflateState subId:<*> 
csr 
getOrInflateState subId:<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg 28TCP_OK 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
fingersense_touch_up() finished 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Calling fingersense_touch_up() 
mSimSubId:<*> onDataActivity: direction=<*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Received kernel message payload: event <*> 
onFling::not valid gesture or touch plus on, false, return! 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
onDataActivity: direction=<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
received broadcast android.intent.action.TIME_TICK 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
monitor check touch devices 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
m1: false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
isCurrentBySim()=false 
received cell-signal:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
getOrInflateState subId:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
m1: false 
onDataActivity: direction=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
Invalid profile no. <*>, total profiles <*> only 
Client requesting input be hidden, pid=<*> 
new ScenarioAction sPoolSize: <*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
csr 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
mDateString is: <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
getTempInfo error: null, <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Received kernel message payload: event <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> = <*>, <*> = false, <*> = false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
------------startInput-------------- 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
fingersense_classify_touch() finished 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> <*> action = <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Invalid profile no. <*>, total profiles <*> only 
onFling::not valid gesture or touch plus on, false, return! 
isCurrentBySim()=false 
mSimSubId:<*> onDataActivity: direction=<*> 
Sending non-protected broadcast <*> from system <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Change in state from: <*> <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Calling fingersense_classify_touch() 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
poll before: g_monitor_fd =<*> 
fingersense_classify_touch() finished 
Report temperature: <*> temp :<*> report_threshold:<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
is3GCalling is false,mCdmaSlot is -<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
ApStaDisabledState what=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
isCurrentBySim()=false 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Invalid profile no. <*>, total profiles <*> only 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
mSimSubId:<*> onDataActivity: direction=<*> 
getStatic,count:<*>,work status:false 
act:android.intent.action.TIME_TICK flag:<*> FLAG_IS_FIRST_POWER_OFF_ALARM=false android.intent.extra.ALARM_COUNT=<*> 
formatChinaDateTime equals. 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
<*>|compensate <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
c: true, w: false, t: false, l: false 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
isCardAbsent slot:<*> slotState:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
onFling::not valid gesture or touch plus on, false, return! 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCurrentBySim()=false 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
csr 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
mSimSubId:<*> onDataActivity: direction=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
mVSimCurCardType is -<*> 
<*>|MSG_RECORD_DATA_TO_FILE_DELAY datas.size()=<*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
Client requesting input be hidden, pid=<*> 
csr 
getStatic,count:<*>,work status:false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
new ScenarioAction sPoolSize: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
t:false, fl: false, p: <*>, ce: true, we: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Client requesting input be hidden, pid=<*> 
fingersense_touch_up() finished 
csr 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Calling fingersense_classify_touch() 
Invalid profile no. <*>, total profiles <*> only 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
mVSimCurCardType is -<*> 
Calling fingersense_classify_touch() 
fingersense_touch_up() finished 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
formatChinaDateTime equals. 
chinaDateTime:早上<*>:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
new ScenarioAction sPoolSize: <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
not 3G net type. do nothing. 
isCardAbsent slot:<*> slotState:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
not 3G net type. do nothing. 
isCardAbsent slot:<*> slotState:<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
is3GCalling is false,mCdmaSlot is -<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
isCurrentBySim()=false 
fingersense_classify_touch() finished 
ImsServiceSubHandler : Message received: what = <*> 
isCurrentBySim()=false 
mSimSubId:<*> onDataActivity: direction=<*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
onFling::not valid gesture or touch plus on, false, return! 
######### CMD_QUERY_PKTS ######## 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
fingersense_classify_touch() finished 
process buffer and get message 
mSimSubId:<*> onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
not 3G net type. do nothing. 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> to uc.huawei.com:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
not 3G net type. do nothing. 
<*> <*> <*> <*> { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> = <*>, <*> = false, <*> = false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> U=<*> StackId=<*> <*> <*> <*> <*> <*> U=<*> StackId=<*> <*> <*> <*> <*> U=<*> StackId=<*> <*> 
Invalid profile no. <*>, total profiles <*> only 
getTempInfo error: null, <*> 
Launcher doResumeWork() 
updateBluetooth:::setBluetoothBatteryEnable false. 
<*> is null <*> <*> <*> <*> 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> <*> 
Returning system default Launcher 
updateQsState:false 
search 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
getRecentTasks: topActivity=ComponentInfo{com.android.browser/com.uc.browser.InnerUCMobile} 
homekey 
Client requesting input be hidden, pid=<*> 
<*> <*> <*> 
Launcher onResume() 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
isCurrentBySim()=false 
m1: false 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
collectReceiverComponents, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, <*> receiver size:<*>, flags: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
<*> <*> <*> intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
unproxy app:com.huawei.camera,uid:<*>,result:true 
Access denied finding property <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[openFile] 打开文件 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
ACTION_USB_PORT_CHANGED arrived! 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> Speaker protection disabled 
<*> Speaker protection disabled 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> type <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> temp_new :<*> temp_old :<*> 
<*> <*> <*> 
formatChinaDateTime, change to China <*> 
begin of formatChinaDateRange <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*>|calculateCaloriesWithCache totalCalories=<*> 
<*>|getTodayTotalSteps <*> 
transferRemoteInputFocus: <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Received kernel message payload: event <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
c: true, w: false, t: false, l: false 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
FingerprintService getEnrolledFingerprints 
Fingerprint RunningStateChanged. <*> 
send data return = <*> 
DisplayPowerState :OFF 
HWCDisplay::SetPowerMode: display = <*>, mode = <*> 
Invalid profile no. <*>, total profiles <*> only 
SleepPolicy:<*> 
<*> <*> is null <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
<*> <*> <*> <*> <*> 
ImsServiceSub : handleSsac voice = <*> 
closeQs 
updateQsState:false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
OverscanTimeout run 
updateClipping isOverlap:false 
isWiredHeadsetOn... 
<*> is <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
isMusicActive... 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Cache monitor msg as screen_off 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
measureTask <*> <*> <*> <*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
m1: false 
measureTask <*> <*> <*> <*> <*> <*> <*> 
measureTask <*> <*> <*> <*> <*> <*> <*> 
measureTask <*> <*> <*> <*> <*> <*> <*> 
measureTask <*> <*> <*> <*> <*> <*> <*> 
measureTask getPackageSizeInfoLI : <*> <*> for user <*> 
<*> is not <*> <*> <*> <*> <*> 
HsmStat_event:"<*>","{TIME:<*>}" 
<*> <*> <*> <*> <*> <*> 
poll before: g_monitor_fd =<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
c: true, w: false, t: false, l: false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
onCellLocationChanged 
onSignal: mSubId=<*>,currDataSubID=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event TCP_CONNECTED 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
mSimSubId:<*> onDataActivity: direction=<*> 
m1: false 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
I/===> int ulp_dr_stop_engine() line <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] <*> <*> <*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
m1: false 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
m1: false 
Report temperature: <*> temp :<*> report_threshold:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
delay_us exceeds max timeout: <*> us 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> 
handleTimeUpdate 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Received kernel message payload: event <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> line <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
<*> <*> <*> intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
Alarm triggering (type <*> <*> <*> <*> type <*> when <*> <*> 
Sending non-protected broadcast <*> from system <*> <*> <*> <*> 
formatChinaDateTime equals. 
no controller energy info supplied 
no controller energy info supplied 
no controller energy info supplied 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
getOrInflateState subId:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
MSG_QUERY_TCP_INFO called,count:<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
getOrInflateState subId:<*> 
isMusicActive... 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*> <*> <*> <*> <*> <*> <*> <*> <*> line <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
onSignal: mSubId=<*>,currDataSubID=<*> 
Received kernel message payload: event <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
onSignal: mSubId=<*>,currDataSubID=<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<*> <*> <*> shut down now connect 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to ip address <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
<*> <*> <*> 
CtrlSocket processCtrlSocket pid = <*> cmd = <*> <*> = <*> 
<*> <*> <*> <*> 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
m1: false 
c: true, w: false, t: false, l: false 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
csr 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
becomeActiveLocked, reason = <*> 
<*> <*> <*> <*> <*> 
ApStaDisabledState what=<*> 
<*> <*> <*> <*> <*> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
poll before: g_monitor_fd =<*> 
delay_us exceeds max timeout: <*> us 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
act:android.intent.action.TIME_TICK flag:<*> FLAG_IS_FIRST_POWER_OFF_ALARM=false android.intent.extra.ALARM_COUNT=<*> 
chinaDateTime:早上<*>:<*> 
set notification panel padding = <*> 
<*> <*> <*> 
csr 
getTempInfo error: null, <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
getStatic,count:<*>,work status:false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
c: true, w: false, t: false, l: false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:idle state change to <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
<*> <*> <*> 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) <*> <*> <*> to uc.huawei.com:<*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
received cell-signal:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
isWiredHeadsetOn... 
c: true, w: false, t: false, l: false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
t:false, fl: false, p: <*>, ce: true, we: false 
isMusicActive... 
Received kernel message payload: event <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
csr 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<*> <*> <*> Heartbeat timer.timers{<*>} 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) disconnected 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
<*> <*> <*> 
[SocketRead_<*>:<*>:<*>-<*>]isSupportCtrlSocketV2, ctrlSocket(android/null:<*>) 
hideTraffic 
<*> <*> <*> 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
not in link monitoring mode, ignore TCP result . 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg 28TCP_OK 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
mVSimCurCardType is -<*> 
Received kernel message payload: event <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
sending broadcast to Pid = <*>, Uid = <*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
received cell-signal:<*> 
m1: false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
MSG_QUERY_TCP_INFO called,count:<*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
ImsServiceSub : handleSsac voice = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isMusicActive... 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
received cell-signal:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
MSG_QUERY_TCP_INFO called,count:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
m1: false 
csr 
received cell-signal:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
m1: false 
not in link monitoring mode, ignore TCP result . 
InputDispatcher::monitor frozen check! 
csr 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
MSG_QUERY_TCP_INFO called,count:<*> 
poll before: g_monitor_fd =<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:svn_closeAll <*> 
isCurrentBySim()=false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> ok 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> ==================== TCP CLIENT DISCONNECT ==================== 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
received cell-signal:<*> 
No config file found for:/themes/diff/icons 
received cell-signal:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
getBuddyInfoLines:buddyinfo: 
I/===> int ulp_dr_stop_engine() line <*> 
csr 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
DefaultState what=<*> 
<*> <*> <*> <*> <*> <*> is not <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
onReceive intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
not in link monitoring mode, ignore TCP result . 
csr 
isMusicActive... 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
poll before: g_monitor_fd =<*> 
m1: false 
not in link monitoring mode, ignore TCP result . 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
received cell-signal:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
c: true, w: false, t: false, l: false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
isMusicActive... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
CallObjectMethod end 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
handle_exception_events enter 
isWiredHeadsetOn... 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
received cell-signal:<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
onShowStatusChange show:false 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isWiredHeadsetOn... 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
is3GCalling is false,mCdmaSlot is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) Login_By_Step-> at <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
isCardAbsent slot:<*> slotState:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
received cell-signal:<*> 
m1: false 
send_cmd_kernel: cmd=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
formatChinaDateTime, change to China <*> 
ImsServiceSubHandler : Message received: what = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
received cell-signal:<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
isCurrentBySim()=false 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
sending broadcast to Pid = <*>, Uid = <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
InputDispatcher::monitor frozen check! 
received cell-signal:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCurrentBySim()=false 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
onDataActivity: direction=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
received cell-signal:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
I/===> int ulp_dr_stop_engine() line <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
getStatic,count:<*>,work status:false 
m1: false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
WatchThread{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown output: java.net.SocketException: Socket is closed 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
chinaDateTime:早上<*>:<*> 
EventCenter Get <*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
updateLightsLocked --> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getStatic,count:<*>,work status:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> line <*> QMI_LOC_GET_BEST_AVAILABLE_POSITION_REQ_V<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
received cell-signal:<*> 
not in link monitoring mode, ignore TCP result . 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isMusicActive... 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
received cell-signal:<*> 
isMusicActive... 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
csr 
send_cmd_kernel: cmd=<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
isCurrentBySim()=false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
No config file found for:/themes/diff/icons 
c: true, w: false, t: false, l: false 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> <*> <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
formatChinaDateTime equals. 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
<*> <*> does not <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
not in link monitoring mode, ignore TCP result . 
getStatic,count:<*>,work status:false 
<*> called handle:<*> <*> 
Reading a NULL string not supported here. 
onAcquired <*> 
Fingerprint timeout 
apply skiped :<*> 
handleKeyguardDone 
QSEECom_send_cmd return! 
begin 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> <*> <*> 
batch,<*>,handle <*>, timeout:<*> ,period_ns:<*> 
<*> <*> <*> <*> 
0x0, 0x0, 0x0, 0x<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
RCV <- {<*> <*> Tethering stats list completed} 
<*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> id is <*> id is [<*>]! 
<*> <*> <*> 
<*> <*> <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) disconnected 
<*> <*> ==================== TCP CLIENT <*> <*> <*> 
formatChinaDateTime equals. 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file <*> sec level = <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Handle message: <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> is not <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> = <*>, state = <*> 
<*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> 
AutoCleanReceiveServer:receive action:android.intent.action.ACTION_POWER_DISCONNECTED 
<*> <*> <*> <*> <*> <*> = <*> <*> <*> <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
<*> <*> <*> <*> <*> 
clear mLastAcquireWakelock 
checkPolicyOver currentTimeMillis-beforeTimeMillis<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
receive data len = <*> 
begin 
begin 
QSEECom_send_cmd return! 
send data return = <*> 
qsc_decode end 
receive data len = <*> 
begin 
qsc_decode end 
QSEECom_send_cmd return! 
begin 
receive data len = <*> 
begin 
<*> <*> <*> <*> <*> : <*> 
begin 
begin 
qsc_send_cmd finish 
receive data len = <*> 
qsc_send_cmd finish 
QSEECom_send_cmd return! 
receive data len = <*> 
begin 
send data return = <*> 
begin 
receive data len = <*> 
qsc_decode end 
receive data len = <*> 
begin 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> = <*> 
onFling::not valid gesture or touch plus on, false, return! 
is3GCalling is false,mCdmaSlot is -<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> <*> <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
updateBarBgColor 
cancelAutohide 
<*> <*> <*> <*> <*> <*> <*> 
action:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, mPermissionType:<*> 
Create obj success use class <*> 
Received kernel message payload: event <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
setBackgroundColor:new=<*>, old=<*> 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, <*> <*> <*> <*> eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
obtain, mHwFlags=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
Client requesting input be hidden, pid=<*> 
<*> <*> <*> stream <*>, <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
select_devices: done 
<*> <*> <*> <*> 
mTiffStream skip = <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
qsc_decode end 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> = false 
mode <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
writeSummaryFromParcelLocked, duration: <*> 
<*> <*> <*> <*> <*> (<*> * <*> * <*> * <*> <*> <*> <*> <*> (<*> * <*> * <*> * <*>) day 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
suspendAutohide 
isSimPinSecure mSimDatas is null or empty 
sendImmediateMessage <*> 
resetPagerState 
applyIconTint ignore 
mTiffStream skip = <*> 
updateDimmedActivatedHideSensitive overlap:false 
Releasing suspend blocker "PowerManagerService.Broadcasts". 
updateChargingLocked: charging=false 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
isDisplayFeatureSupported feature:<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
generateAddAnimation:null, false 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
received cell-signal:<*> 
receive data len = <*> 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
set notification panel padding = <*> 
Sending non-protected broadcast <*> from system <*> <*> <*> 
qsc_decode end 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PowerManagerNotifier onWakefulnessChangeStarted: <*> <*> <*> <*> <*> 
DynamicUpdater registerReceiver 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
apply skiped :<*> 
<*> <*> <*> <*> 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
receive data len = <*> 
WatchThread{<*>} TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
updateNotificationShade 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
ash->screen on 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> <*> = <*> 
left handleScrnOnOffTimeStats, mScrnOffAccTime = <*>, mScrnOffAccTime = <*>, mScrnOnAccTime = <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
showNotificationAll 
begin 
begin 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
<*> <*> <*> is <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> <*> <*> <*> = <*> <*> = <*> 
Returning system default Launcher 
<*> <*> <*> <*> <*> 
playingUids: 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
<*> <*> <*> <*> <*> size is <*> <*> 
updateBarBgColor 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
received broadcast android.intent.action.TIME_TICK 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
handle_exception_events enter 
msg = <*> received 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
shouldBlockLocation running ... 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
action:com.huawei.android.action.launcher_weather_icon_change, mPermissionType:<*> 
setBackgroundColor:new=<*>, old=<*> 
<*> <*> <*> <*> <*> <*> <*> 
updateBluetooth:::setBluetoothBatteryEnable false. 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onProposedRotationChanged, rotation=<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
ContentChange for slot: <*> 
<*>|calculateAltitudeWithCache datas.size=<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
ContentChange for slot: <*> 
ContentChange for slot: <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
ContentChange for slot: <*> 
Change to single clock mode! 
takeScreenshot cancelPendingScreenshotChordAction 
call onScreenTurnedOff(<*>) 
<*> <*> <*> 
<*> <*> <*> <*> <*>, <*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> <*> type <*> <*> <*> <*> <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
<*> <*> <*> <*> <*> 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper.-wrap4(KeyguardWallpaper.java) 
[] 
LightSensor, enable, <*>: flags=<*> 
<*> <*> <*> <*> 
huawei_audio huawei_choose_HandsFree_device_incall_forHWtest: test Type =<*> 
PFW.HwPFWService:mBroadcastReceiver action = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mActiveIface: null 
Apply window Height MATCH_PARENT 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> = <*> <*> = <*> <*> = <*> 
showNotificationAll 
out_standby: exit 
setIsExpanded: true 
setBackgroundColor:new=<*>, old=<*> 
<*> <*> is null <*> 
<*> <*> <*> <*> 
resetPagerState 
updateClipping isOverlap:false 
updateDimmedActivatedHideSensitive overlap:false 
ACTION_BATTERY_CHANGED pluggedType: <*> 
at java.io.FileInputStream.open(Native Method) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
cancelNotification,index:-<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
setRequest ProviderRequest[OFF] 
<*> <*> <*> <*> 
Cache monitor msg as screen_off 
<*>|Alarm uploadStaticsToDB 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*>|onStandStepChanged <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
<*> <*> <*> <*> <*> <*> 
setAlarmsPending ... 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
mThermalService is NULL! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
disableEffects=null canInterrupt=false once update: false 
Create obj success use class android.app.HwCustNotificationImpl 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:WriteSdkGroupItem: hash <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
not in link monitoring mode, ignore TCP result . 
<*>|onStandStepChanged <*> 
<*> <*> <*> <*> <*> <*> 
RefreshBatteryInfo isBatteryLow: <*> 
Cache monitor msg as screen_off 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
<*> <*> <*> <*> <*> 
<*>|compensate received 
<*>|compensate <*> <*> 
onShowStatusChange show:false 
<*>|compensate <*> <*> 
<*>|rebuild notification 
Create obj success use class android.app.HwCustNotificationImpl 
Handle message: <*> 
c: true, w: false, t: false, l: false 
<*>|rebuild notification 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> action = <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
check dependency pid: <*> is depended by pid: <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
getTempInfo error: null, <*> 
process buffer and get message 
<*> <*> <*> <*> 
msg = <*> received 
<*> <*> id = <*> = <*> <*> = <*> 
<*>| ## MSG_DEAL_SYSTEM_EVENT android.intent.action.TIME_TICK 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
<*> <*> <*> <*> <*> is not in the <*> <*> <*> <*> <*> 
<*> <*> <*> = <*>, <*> = <*>, <*> = <*>, <*> <*> <*> <*> <*> <*> <*> <*> 
chinaDateTime:早上<*>:<*> 
at com.huawei.android.chr.ProtocolLogManager.addSubCommonBaseParaInfo(ProtocolLogManager.java:<*>) 
Enter QmiChr_FetchModemInfo 
create: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
at com.huawei.android.chr.qcom.QcomModemInfoCollector.getHardWareVersion(QcomModemInfoCollector.java:<*>) 
<*> <*> <*> 
<*> <*> : <*> 
<*> <*> : <*> 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
Failing getSupportedFeatureset because HAL isn't started 
create: <*> 
handle_exception_events enter 
create: <*> 
send: <*> 
<*> <*> <*> <*> <*> 
<*>|before compensate: cache step_<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateTint: tint=<*> 
updateDimmedActivatedHideSensitive overlap:false 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*>|calculateCaloriesWithCache totalCalories=<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
set notification panel padding = <*> 
Rac Change (PDC) data: [<*>, <*>] 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Handle message: <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
action:null, mPermissionType:<*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
transferRemoteInputFocus: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> pid: <*>, uid: <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> 
<*> <*> OK ! 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
unproxy app:com.huawei.espacev2,uid:<*>,result:true 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
Heartbeat timer.timers{<*>} <*> <*> <*> <*> 
<*> <*> <*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> type is <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> type is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> ok 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
CallObjectMethod strat 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> third party <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
. 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
readRilMessage: Buffer = [B@204bb9f HexData = <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
onStepCounterChange stepsNum:<*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
updateTint: tint=<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
updateNotificationShade 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*>|compensate <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
CloudRecordGetCfgInfoRspNotify leave 
<*>|getTodayTotalSteps <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
updateTint: tint=<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
<*>|onStandStepChanged <*> 
<*> <*> <*> <*> <*> mBatteryLevel=<*> 
updateChargingLocked: charging=false 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
formatChinaDateTime equals. 
<*>|calculateAltitudeWithCache datas.size=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
pool-<*>-thread-<*>{<*>} <*>.doInBackground(TupHelper.java:<*>) <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
removeNotificationChildren 
showNotificationAll 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
sending broadcast to Pid = <*>, Uid = <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
csr 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
removeNotificationChildren 
Error reading charge file 
at java.io.FileInputStream.open(Native Method) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> 
showNotificationAll 
onShowStatusChange show:false 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rac Change (PDC) data: [<*>, <*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Create obj success use class android.app.HwCustNotificationImpl 
updateClipping isOverlap:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateClipping isOverlap:false 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
updateClipping isOverlap:false 
handleMessage what = <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Split enqueueing broadcast <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Rac Change (PDC) data: [<*>, <*>] 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*>|compensate received 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
<*> <*> = false 
m1: false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*>|getTodayTotalSteps <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
setColorTemperatureAccordingToSetting new. 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, <*> <*> screenAutoBrightness=<*>, userId=<*> 
<*>|calculateCaloriesWithCache totalCalories=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
Calling fingersense_on_resume() 
fingersense_on_resume() finished 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, <*> <*> screenAutoBrightness=<*>, userId=<*> 
interpolate:mPosBrightness=<*>.0lux=<*>.<*>,mIsReboot=true,mIsUserChange=false,mDelta=<*>.<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, <*> <*> screenAutoBrightness=<*>, userId=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
isSimPinSecure mSimDatas is null or empty 
Wait finish 
<*> <*> <*> --> <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
isMobileDataEnable::dateEnable=true, cotrollerEnable=true 
begin 
receive data len = <*> 
Display ready! 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> = true <*> <*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
<*> <*> <*> 
<*> <*> action = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
onDataActivity: direction=<*> 
DeviceStateListener:MyCityChanged: true 
out_get_latency: Latency <*> 
<*> <*> OK ! 
begin of formatChinaDateRange <*> 
begin of formatChinaDateRange <*> 
<*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) connected 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
<*> <*> <*> <*> <*> <*> euid: <*> 
Model onReceive <*> { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) } 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Change to single clock mode! 
receive data len = <*> 
<*> is <*> 
at android.database.sqlite.SQLiteConnectionPool.open(SQLiteConnectionPool.java:<*>) 
qsc_send_cmd finish 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
getOrInflateState subId:<*> 
handleMessage what = <*> 
getOrInflateState subId:<*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> 
Change to single clock mode! 
ambient lux=<*>.<*>,timeStamp =<*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
######### CMD_QUERY_PKTS ######## 
poll before: g_monitor_fd =<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> euid: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> uid = <*>, <*> = <*> 
<*> <*> is abandoned for memory <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path <*> <*> <*> <*> ok 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
APS: 2DSDR: <*> SDR ratio = <*>.<*>, <*> height = <*>, <*> <*> height = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
queryIntentActivitiesAsUser size results:<*>, for package:com.huawei.espacev<*> 
<*> <*> <*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
csr 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
periodReadTask,LastWrittenBytes:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
handleMessage CHECK_FREEZE_SCREEN_MSG 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
no controller energy info supplied 
m1: false 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
@@@@@@@@@@@@ uid <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
<*> <*> = <*> 
csr 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
csr 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
not in link monitoring mode, ignore TCP result . 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
mVSimCurCardType is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
c: true, w: false, t: false, l: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
c: true, w: false, t: false, l: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
handleLteCaStatusChange 
getOrInflateState subId:<*> 
shouldBlockLocation running ... 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
readRilMessage: Buffer = [B@204bb9f HexData = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
getOrInflateState subId:<*> 
######### CMD_QUERY_PKTS ######## 
received cell-signal:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
handleMessage what = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleLteCaStatusChange 
isCardAbsent slot:<*> slotState:<*> 
shouldBlockLocation ret:false 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
Change in state from: <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
monitor check touch devices 
EventHub monitor: no key events in the past <*> 
<*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
mSimSubId:<*> onDataActivity: direction=<*> 
<*>-<*> <*>:<*>:<*><浏览器>[com.android.browser]:[query]读取浏览器历史 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> action = <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
csr 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
handleMessage what = <*> 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
send_cmd_kernel: cmd=<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
is3GCalling is false,mCdmaSlot is -<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Change in state from: <*> <*> 
isCurrentBySim()=false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
ImsServiceSub : handleSsac voice = <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
isCardAbsent slot:<*> slotState:<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Calling fingersense_touch_up() 
received cell-signal:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
mVSimCurCardType is -<*> 
applyIconTint ignore 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
fingersense_touch_up() finished 
<*> <*> <*> is not <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
handleLteCaStatusChange 
need to <*> <*> <*> 
mVSimCurCardType is -<*> 
applyIconTint ignore 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
isCurrentBySim()=false 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
is3GCalling is false,mCdmaSlot is -<*> 
Split enqueueing broadcast <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
MSG_QUERY_TCP_INFO called,count:<*> 
fingersense_classify_touch() finished 
ImsServiceSubHandler : Message received: what = <*> 
ImsServiceSub : handleSsac voice = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
new ScenarioAction sPoolSize: <*> 
shouldBlockLocation running ... 
c: true, w: false, t: false, l: false 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
getOrInflateState subId:<*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> id is not <*> <*> <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Report temperature: <*> temp :<*> report_threshold:<*> 
csr 
onSignal: mSubId=<*>,currDataSubID=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Split enqueueing broadcast <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Split enqueueing broadcast <*> <*> 
c: true, w: false, t: false, l: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Calling fingersense_touch_up() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
onLayout:left=<*>, top=<*>, right=<*>, bottom=<*>, offset=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
obtain, mHwFlags=<*> 
scheduleCheckFreezeScreen sendMessageDelayed 
received cell-signal:<*> 
<*> <*> <*> <*> <*> U=<*> StackId=<*> <*> <*> <*> 
<*> <*> <*> 
Split enqueueing broadcast <*> <*> 
process buffer and get message 
<*> <*> <*> 
<*> <*> <*> ......ID <*>,<*>-<*>,<*> <*> <*> 
shouldBlockLocation ret:false 
<*> <*> <*> <*> <*> <*> <*> <*>, <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
transitionTo:mode=<*>, isEmuiStyle=false 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> pid: <*>, <*> <*> 
<*> pid = <*>, uid = <*> 
<*> <*> <*> <*> <*> <*> is: <*> 
<*> <*> <*> <*> <*> U=<*> StackId=<*> <*> <*> <*> <*> <*> U=<*> StackId=<*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
<*>|logicalDealBroadcastEvent : Intent { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) } 
<*> <*> <*> <*> 
playingUids: 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*>|calculateCaloriesWithCache datas.size=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*>-<*> <*>:<*>:<*><浏览器>[com.android.browser]:[query]读取浏览器历史 
shouldBlockLocation running ... 
at com.android.providers.telephony.TelephonyProvider.query(TelephonyProvider.java:<*>) 
<*> <*> <*> 
shouldBlockLocation ret:false 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> 
send: <*> 
null 
isCurrentBySim()=false 
<*> <*> <*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
Invalid profile no. <*>, total profiles <*> only 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
poll before: g_monitor_fd =<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
Change in state from: <*> <*> 
isCurrentBySim()=false 
<*> temp_new :<*> temp_old :<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
Change in state from: <*> <*> 
<*> <*> <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
received cell-signal:<*> 
check dependency pid: <*> is depended by pid: <*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
received cell-signal:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
m1: false 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
chinaDateTime:早上<*>:<*> 
Calling fingersense_touch_up() 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
send_cmd_kernel: cmd=<*> 
c: true, w: false, t: false, l: false 
onReceive: action = <*> 
isCurrentBySim()=false 
Calling fingersense_classify_touch() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
new ScenarioAction sPoolSize: <*> 
<*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
isCurrentBySim()=false 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
Received kernel message payload: event <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
monitor check touch devices 
received cell-signal:<*> 
c: true, w: false, t: false, l: false 
Application com.baidu.input_huawei is depended by other app, delay to H! 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
fingersense_classify_touch() finished 
isCurrentBySim()=false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
m1: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
getOrInflateState subId:<*> 
csr 
Calling fingersense_classify_touch() 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
mVSimCurCardType is -<*> 
csr 
<*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
notifyListenerHuawei::origin typeIcon:<*> <*> isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getTempInfo error: null, <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
transitionTo:mode=<*>, isEmuiStyle=true 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
mVSimCurCardType is -<*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
formatChinaDateTime, change to China <*> 
chinaDateTime:早上<*>:<*> 
GetAddrInfoHandler addr: <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
ImsServiceSubHandler : Message received: what = <*> 
To broadcast an Intent via the notifier to external apps 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
onReceive: action = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
@@@@@@@@@@@@ uid <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
isCurrentBySim()=false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Report temperature: [charger_ic] temp :<*> report_threshold:<*> 
readRilMessage: Buffer = [B@204bb9f HexData = <*> 
ImsServiceSub : handleSsac voice = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> <*> 
<*> <*> <*> stream <*>, <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> stream <*>, <*> <*> 
huawei_audio huawei_choose_Handset_device_incall_forHWtest: test Type =<*> 
huawei_cust_set_parameters: exit with code(<*>) 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
platform_set_channel_map channel_count:<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
qsc_send_cmd finish 
QSEECom_send_cmd return! 
begin 
begin 
QSEECom_send_cmd return! 
qsc_decode end 
<*> <*> <*> 
at com.huawei.keyguard.support.magazine.MagazineWallpaper$<*>.onMagazinePicLoaded(MagazineWallpaper.java:<*>) 
DisplayPowerController updatePowerState <*> useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
Setting HAL interactive mode to <*> 
fingersense_on_pause() finished 
show 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
huawei_audio huawei_choose_Handset_device_incall_forHWtest: test Type =<*> 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
Apply window <*> <*> 
removeNotificationChildren 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
<*> <*> <*> <*> 
isCurrentBySim()=false 
hideTraffic 
<*> <*> <*> <*> <*> <*> 
updateLightsLocked --> mBatteryLight.turnOff 
onReceive, action:android.intent.action.BATTERY_CHANGED 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> = false 
c: true, w: false, t: false, l: false 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
readRilMessage: Buffer = [B@204bb9f HexData = <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
<*> <*> <*> <*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
removeNotificationChildren 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
readRilMessage: Buffer = [B@204bb9f HexData = <*> 
Error reading charge file 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
<*> <*> type = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
bh1745-light calling driver setDelay <*> ms 
mode <*> <*> <*> 
Broadcasting intent ACTION_RAC_CHANGED 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
qsc_send_cmd finish 
qsc_send_cmd finish 
Fingerprint RunningStateChanged. <*> 
onScreenTurnedOn() 
Apply window <*> <*> 
hide 
apply skiped :<*> 
workerFunction STATE_WAIT_FINGER_UP 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
onNotificationVisibilityChanged called 
<*> <*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
[ReceiverUtils.resumeLogUpload] 
CtrlSocket Receiver,disable: <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> OK ! 
<*> <*> <*> <*> <*> <*> <*> <*> <*> line <*> QMI_LOC_GET_BEST_AVAILABLE_POSITION_REQ_V<*> 
flush:sensor(android.sensor.step_counter) handle:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> of type <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
notifyListenerHuawei::origin typeIcon:<*> <*> isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
isCurrentBySim()=false 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> type = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
MSG_QUERY_TCP_INFO called,count:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
getOrInflateState subId:<*> 
csr 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> id is not <*> <*> <*> = <*> 
Calling fingersense_classify_touch() 
is3GCalling is false,mCdmaSlot is -<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCardAbsent slot:<*> slotState:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mSimSubId:<*> onDataActivity: direction=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
shouldBlockLocation ret:false 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Calling fingersense_classify_touch() 
No config file found <*> 
ApStaDisabledState what=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
StaDisabledWithScanState enter. 
I/LocTech-Label :: OSOBSERVER :: Data Items In 
<*> :: Data <*> <*> <*> <*> 
get_decryption_wifi_mac:decrypt_wifi_mac in. 
<*> <*> <*> <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
SND -> {<*> <*> <*> <*> <*> <*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
isSystemBootComplete =true 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
BtChrStatisticsManager:new StatisticsCHRMsgHandler 
<*> <*> <*> IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> 
<*> - hexdump(len=<*>): <*> <*> <*> <*> <*> 6f <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
handleMessage what = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> euid: <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> is <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> to get <*> <*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
<*> <*> to get <*> <*> <*> 
<*> Failed to get <*> <*> <*> 
<*> Failed to get <*> <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
wlan0: Control interface command <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Sending non-protected broadcast <*> from system <*> <*> <*> 
we: true 
<*> <*> <*> rt=<*>/<*> <*> <*> 
get <*> <*> <*> <*> 
forgetFromUser:netid:<*> 
stop VERIFY_WITH_NOT_DATA_LINK 
<*> <*> <*> <*> <*> <*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
WifiMonitor:wlan0 <*> <*> <*> 
isCurrentBySim()=false 
Report temperature: [ap] temp :<*> report_threshold:<*> 
isCurrentBySim()=false 
received cell-signal:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
csr 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
c: true, w: <*> t: false, l: false 
onFling::not valid gesture or touch plus on, false, return! 
not in link monitoring mode, ignore TCP result . 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Calling fingersense_touch_up() 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
@@@@@@@@@@@@ uid :<*> download <*> 
isCardAbsent slot:<*> slotState:<*> 
mVSimCurCardType is -<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
StartupResidentService:InnerHandler Message:<*> 
<*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
<*> <*> <*> 
csr 
t:false, fl: false, p: <*>, ce: true, we: <*> 
sending broadcast to Pid = <*>, Uid = <*> 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
handleWifiSwitchChanged state:<*> 
<*> state is <*> <*> <*> <*> 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
need to force refresh view 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> = false, <*> = false 
autohasloglist<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> <*> 
ImsServiceSubHandler : Message received: what = <*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
dispatch ordered broadcast <*> <*> <*> <*> has <*> receivers 
Sending non-protected broadcast <*> from system uid <*> <*> <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
EventHub monitor: no key events in the past <*> 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
isCardAbsent slot:<*> slotState:<*> 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
received cell-signal:<*> 
m1: false 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
csr 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
fingersense_touch_up() finished 
Calling fingersense_classify_touch() 
fingersense_classify_touch() finished 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
notifyListenerHuawei::origin typeIcon:<*> <*> isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
t:false, fl: false, p: <*>, ce: true, we: false 
isCardAbsent slot:<*> slotState:<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
Change in state from: <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
isCurrentBySim()=false 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
ImsServiceSubHandler : Message received: what = <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
received cell-signal:<*> 
csr 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
mVSimCurCardType is -<*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
Invalid profile no. <*>, total profiles <*> only 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
updateDimmedActivatedHideSensitive overlap:false 
t:false, fl: false, p: <*>, ce: true, we: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
c: true, w: false, t: false, l: false 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
<*> <*> = <*> 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
<*> do not <*> is not <*> <*> 
<*> <*> <*> type <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> is <*> 
<*> <*> <*> of type <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
check dependency pid: <*> is depended by pid: <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
onNotificationExpansionChanged called 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
Launcher.Folder childCount: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> = <*>, state = <*> 
<*> <*> <*> 
<*> <*> <*> pid:<*> uid:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
kWhatSetAudioSink 
isWiredHeadsetOn... 
onTransact in code is: <*> 
<*> <*> <*> stream <*>, <*> <*> <*> <*> <*> <*> <*> <*> 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
onNotificationVisibilityChanged called 
ACDB -> <*> <*> 
updateTint: tint=<*> 
######### CMD_QUERY_PKTS ######## 
showNotificationAll 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
onReceive: action = <*> 
handleLteCaStatusChange 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
applyIconTint ignore 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
<*> <*> <*> <*> <*> 
not 3G net type. do nothing. 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
out_get_latency: Latency <*> 
<*> <*> <*> <*> is not <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> need to <*> <*> 
updateDimmedActivatedHideSensitive overlap:true 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null <*> <*> <*> <*> <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> <*> (has extras) } 
cancelNotificationWithTag pid <*>,uid = <*>,tag = <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
m1: false 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> <*> (has extras) } on bgkeyapp queue 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> <*> <*> 
<*> <*> <*> is not <*> <*> <*> <*> 
mIsEffect:true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
not 3G net type. do nothing. 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
fingersense_classify_touch() finished 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
mSimSubId:<*> onDataActivity: direction=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> <*> 
Client requesting input be hidden, pid=<*> 
Split enqueueing broadcast <*> <*> 
c: true, w: false, t: false, l: false 
<*> <*> <*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> manager service. 
isCurrentBySim()=false 
getMode... 
sendEvent:action=<*>, flag=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
not 3G net type. do nothing. 
######### CMD_QUERY_PKTS ######## 
sendEvent:action=<*>, flag=<*> 
answer call by keyCode = <*>, <*> = false, <*> = false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> ......ID <*>,<*>-<*>,<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
DeviceStateListener:MyCityChanged: true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
Application com.baidu.input_huawei is depended by other app, delay to H! 
msg = <*> received 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
######### CMD_QUERY_PKTS ######## 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
isCurrentBySim()=false 
isCurrentBySim()=false 
not 3G net type. do nothing. 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
mSimSubId:<*> onDataActivity: direction=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> 
kWhatSetDataSource 
isWiredHeadsetOn... 
MediaExtractor::Create (null) 
onTransact in code is: <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null <*> <*> <*> <*> <*> <*> <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> = <*> 
GenericSource::disconnect end 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
onReceive: action = android.intent.action.LTE_CA_STATE 
isCurrentBySim()=false 
shouldBlockLocation ret:false 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null <*> <*> <*> <*> <*> <*> <*> vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
mVSimCurCardType is -<*> 
updateQsState:false 
collapsePanel:false 
updateNotificationShade 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
------------startInput-------------- 
Split enqueueing broadcast <*> <*> 
setBackgroundAlpha:alpha=<*>.<*> 
<*> <*> <*> 
<*> = false, <*> = <*> 
BadgeContentObserver getBadgeNumber: <*> mComponentName :ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
Calling fingersense_classify_touch() 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
fingersense_classify_touch() finished 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) disconnected 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
Calling fingersense_touch_up() 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
fingersense_classify_touch() finished 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
action:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, mPermissionType:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
getTempInfo error: null, <*> 
send: <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
CommandQueue, setBarBackgroundColor 
<*> <*> <*> ........ <*>,<*>-<*>,<*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> <*> (has extras) } 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
onFling::not valid gesture or touch plus on, false, return! 
csr 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> = <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*>, <*>), <*> <*> <*> 
<*> <*> <*> <*> 
ACDB -> <*> <*> 
updateTint: tint=<*> 
generateAddAnimation:null, false 
applyIconTint ignore 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
BadgeContentObserver getBadgeNumber: <*> mComponentName :ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
<*> <*> <*> <*> <*> = <*> 
release:lock=<*>, flg=0x0, <*> <*> <*> uid=<*>, pid=<*> 
<*> <*> <*> <*> = <*>, state = <*> 
Calling fingersense_classify_touch() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
querySoundEffectsEnabled... 
<*> <*> <*> <*> <*> <*> <*> <*> Intent { <*> <*> (has extras) } 
<*> <*> <*> need to <*> <*> 
Apply window Height MATCH_PARENT 
<*> <*> <*> <*> <*> <*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=true 
makeExpandedInvisible: mExpandedVisible=false 
cancelNotificationWithTag pid <*>,uid = <*>,tag = <*> <*> <*> 
<*> <*> <*> <*> <*> 
playingUids: 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> <*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> 
Returning system default Launcher 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getOrInflateState subId:<*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
fingersense_classify_touch() finished 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
<*> <*> is im app and connected ok, delay to H! 
Calling fingersense_classify_touch() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Calling fingersense_touch_up() 
Launcher.LauncherProvider launcher call - <*> <*> <*> <*> <*> pid =<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
poll before: g_monitor_fd =<*> 
not in link monitoring mode, ignore TCP result . 
getStatic,count:<*>,work status:false 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
ImsServiceSub : handleSsac voice = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
setTracingEnabled:<*> 
fingersense_classify_touch() finished 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
received cell-signal:<*> 
c: true, w: false, t: false, l: false 
suspendAutohide 
<*> <*> <*> <*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
querySoundEffectsEnabled... 
obtain, mHwFlags=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000011000000514f454d484f4f4bfa0308000100000000] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
<*> { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
transitionTo:mode=<*>, isEmuiStyle=true 
<*> <*> is abandoned for memory <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
handleMessage what = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
isCurrentBySim()=false 
need to force refresh view 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
onSignal: mSubId=<*>,currDataSubID=<*> 
onReceive: action = android.intent.action.LTE_CA_STATE 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
isCurrentBySim()=false 
shouldBlockLocation ret:false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
isCurrentBySim()=false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
applyIconTint ignore 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
MyOrientationListener: updateRotation. 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
new ScenarioAction sPoolSize: <*> 
formatChinaDateTime, change to China <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
send_cmd_kernel: cmd=<*> 
onFling::not valid gesture or touch plus on, false, return! 
ImsServiceSub : handleSsac voice = <*> 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
onSignal: mSubId=<*>,currDataSubID=<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
Calling fingersense_classify_touch() 
fingersense_touch_up() finished 
onFling::not valid gesture or touch plus on, false, return! 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
Calling fingersense_classify_touch() 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
c: true, w: false, t: false, l: false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
m1: false 
Response ID <*> is not served in this process. 
c: true, w: false, t: false, l: false 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
getStatic,count:<*>,work status:false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
isCardAbsent slot:<*> slotState:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
######### CMD_QUERY_PKTS ######## 
t:false, fl: false, p: <*>, ce: true, we: false 
Invalid profile no. <*>, total profiles <*> only 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
RefreshBatteryInfo isBatteryLow: <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
send: <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
send_cmd_kernel: cmd=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
Invalid profile no. <*>, total profiles <*> only 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
<*> <*> <*> <*> <*> 
csr 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
isCurrentBySim()=false 
connect :true 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
mThermalService is NULL! 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
t:false, fl: false, p: <*>, ce: true, we: false 
m1: false 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
<*>|before compensate: cache step_<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
Calling fingersense_classify_touch() 
isCurrentBySim()=false 
onSignal: mSubId=<*>,currDataSubID=<*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
poll before: g_monitor_fd =<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
onLayout:left=<*>, top=<*>, right=<*>, bottom=<*>, offset=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
isCurrentBySim()=false 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
c: true, w: false, t: false, l: false 
Change in state from: <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> is im app and connected ok, delay to H! 
is3GCalling is false,mCdmaSlot is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:true isRoaming:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000011000000514f454d484f4f4bfa0308000100000000] 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
mVSimCurCardType is -<*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
Change to single clock mode! 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
m1: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
is3GCalling is false,mCdmaSlot is -<*> 
fingersense_classify_touch() finished 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
updateDimmedActivatedHideSensitive overlap:false 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
onFling::not valid gesture or touch plus on, false, return! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
SND -> {<*> bandwidth gettetherstats} 
RCV <- {<*> <*> <*> <*> <*> 
poll before: g_monitor_fd =<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
fingersense_touch_up() finished 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
onFling::not valid gesture or touch plus on, false, return! 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mSimSubId:<*> onDataActivity: direction=<*> 
Change in state from: <*> <*> 
ServiceNeeded not bring down <*> u0 euid: <*> <*> 
<*> <*> <*> <*> 
<*> pid = <*>, uid = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
m1: false 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] <*> <*> <*> <*> 
setTracingEnabled:<*> 
<*> <*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
MagicLink-BtAndWifiWrapper:==>UNHANDLE MSG:<*> 
MagicLink2-Binder:====>setReceiveListener:android.instantshare.InstantShareAdapter$<*>@3b33b<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> pid: <*>, <*> <*> 
isCurrentBySim()=false 
<*> <*> <*> 
getOrInflateState subId:<*> 
Animating brightness: target=<*>, rate=<*> 
begin of formatChinaDateRange <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
isCurrentBySim()=false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
receive data len = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> 
at com.huawei.keyguard.util.BitmapUtils.getSuggestColorInfo(BitmapUtils.java:<*>) 
Reading a NULL string not supported here. 
KGSvcCall onFinishedGoingToSleep. 
The tag is null error! 
CtrlSocket Receiver,disable: <*> <*> <*> <*> <*> <*> <*> mStartPowerSaving: false 
<*> <*> <*> 
<*> exit with code(<*>) 
onReceive, action:android.intent.action.SCREEN_OFF 
onReceive:screen off 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
msg = <*> received 
<*> <*> type = <*> 
ITrafficInfo:ITrafficInfo create 301updateBytes = <*> 
<*> <*> <*> 
begin 
ambient lux=<*>.<*>,timeStamp =<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
receive data len = <*> 
onAuthenticated(fid=<*>, gid=<*>) 
release:lock=<*>, flg=0x0, <*> <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
mActiveIface: null 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Create obj success use class android.app.HwCustNotificationImpl 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) changed bounds; rebatching 
updateClipping isOverlap:false 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to ip address uc.huawei.com/<*>.<*>.<*>.<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ITrafficInfo:ITrafficInfo create 301updateBytes = <*> 
begin 
receive data len = <*> 
Access denied finding property "persist.sys.smart_power" 
read Events lux: <*>.<*> 
getOrInflateState subId:<*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
Change in state from: <*> <*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
csr 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
Calling fingersense_classify_touch() 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
c: true, w: false, t: false, l: false 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> id is <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
is3GCalling is false,mCdmaSlot is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
Change in state from: <*> <*> 
<*> <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
mVSimCurCardType is -<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
getKickTimerByUserType: <*> 
PFW.HwPFWService:alarm trigger 
<*> <*> = <*> 
onStartCommand 
<*> = false 
preNetWorkType:<*>; currentNetWorkType:<*> 
msg = <*> received 
<*> <*> <*> : <*> 
logUploadRequest start 
<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
onStartCommand 
onStartCommand com.huawei.lcagent.UPLOAD_RESULT 
<*> <*> = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Calling fingersense_touch_up() 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
received cell-signal:<*> 
onDataActivity: direction=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
send_cmd_kernel: cmd=<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
getOrInflateState subId:<*> 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
m1: false 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
not in link monitoring mode, ignore TCP result . 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
ImsServiceSubHandler : Message received: what = <*> 
csr 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
@@@@@@@@@@@@ uid :<*> download :false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
obtain, mHwFlags=-<*> 
<*>-<*> <*>:<*>:<*><浏览器>[com.android.browser]:[query]读取浏览器历史 
onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
new ScenarioAction sPoolSize: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
is3GCalling is false,mCdmaSlot is -<*> 
shouldBlockLocation running ... 
InputDispatcher::monitor frozen check! 
Calling fingersense_classify_touch() 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
received cell-signal:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
mVSimCurCardType is -<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider1 seekBarProgress:<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
isCardAbsent slot:<*> slotState:<*> 
<*>-<*> <*>:<*>:<*><浏览器>[com.android.browser]:[query]读取浏览器历史 
mVSimCurCardType is -<*> 
<*> <*> <*> to uc.huawei.com:<*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
obtain, mHwFlags=<*> 
obtain, mHwFlags=<*> 
Client requesting input be hidden, pid=<*> 
<*>-<*> <*>:<*>:<*><浏览器>[com.android.browser]:[query]读取浏览器历史 
Change in state from: <*> <*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
setTracingEnabled:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
received cell-signal:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
onSignal: mSubId=<*>,currDataSubID=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:true isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Rac Change (PDC) data: [<*>, <*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
fingersense_touch_up() finished 
isCardAbsent slot:<*> slotState:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
isCardAbsent slot:<*> slotState:<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
m1: false 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
c: true, w: false, t: false, l: false 
m1: false 
isCurrentBySim()=false 
isCurrentBySim()=false 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
<*> <*> type = <*> 
<*> <*> <*> <*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
<*> <*> = <*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> 
getOrInflateState subId:<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
offsetBrightness=<*>.<*>,mOffsetBrightness_last44.<*>,lux=<*>.<*>,mPosBrightness=<*>.<*>,mIsUserChange=false,mDelta=<*>.<*>,defaultBrightness=<*>.<*>,mStartLuxDefaultBrightness=<*>.466667mLastLuxDefaultBrightness=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
MSG_QUERY_TCP_INFO called,count:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
updateSlider2 seekBarProgress:<*> 
mVSimCurCardType is -<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
mSeekListener onProgressChanged progress:<*> fromUser:false 
is3GCalling is false,mCdmaSlot is -<*> 
<*>-<*> <*>:<*>:<*><浏览器>[com.android.browser]:[query]读取浏览器历史 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
received cell-signal:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
onDataActivity: direction=<*> 
csr 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
isCurrentBySim()=false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
getCurrentCellid type type = PHONE_TYPE_GSM 
isCurrentBySim()=false 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCurrentBySim()=false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> id is not <*> <*> <*> = <*> 
shouldBlockLocation running ... 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
Application com.tencent.mm is im app and connected ok, delay to H! 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
shouldBlockLocation ret:false 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onReceive: action = android.intent.action.LTE_CA_STATE 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getOrInflateState subId:<*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateTint: tint=<*> 
m1: false 
<*>|REPORT : <*> <*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
disableEffects=null canInterrupt=false once update: false 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
<*>|MSG_RECORD_DATA_TO_FILE 
<*>|before compensate: cache step_<*> 
<*>|after compensate: cache step_<*> 
onStepCounterChange stepsNum:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
isCurrentBySim()=false 
<*>|compensate received 
applyInPlace=true shouldPeek=false alertAgain=true 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
c: true, w: false, t: false, l: false 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateTint: tint=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
m1: false 
<*>|compensate <*> <*> 
getStatic,count:<*>,work status:false 
m1: false 
updateClipping isOverlap:false 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
<*>|rebuild notification 
applyInPlace=true shouldPeek=false alertAgain=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
onLayout:left=<*>, top=<*>, right=<*>, bottom=<*>, offset=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
handleMessage what = <*> 
Broadcasting intent ACTION_RAC_CHANGED 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
shouldBlockLocation running ... 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
handleLteCaStatusChange 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
onLayout:left=<*>, top=<*>, right=<*>, bottom=<*>, offset=<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onCellLocationChanged 
<*> <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
t:false, fl: false, p: <*>, ce: true, we: false 
onSignal: mSubId=<*>,currDataSubID=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> pluggedType: <*> 
<*> <*> is null 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
msg = <*> received 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onStepCounterChange stepsNum:<*> 
<*>|onStandStepChanged <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
m1: false 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
updateLightsLocked --> mBatteryLight.turnOff 
handleDreamLocked 
<*> <*> pluggedType: <*> 
onReceive intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
c: true, w: false, t: false, l: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
new ScenarioAction sPoolSize: <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
mSimSubId:<*> onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
monitor check touch devices 
not 3G net type. do nothing. 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
is3GCalling is false,mCdmaSlot is -<*> 
chinaDateTime:早上<*>:<*> 
begin of formatChinaDateRange chinaDate:早上<*>:<*> 
Model onReceive user=UserHandle{<*>} 
onSignal: mSubId=<*>,currDataSubID=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> to uc.huawei.com:<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
is3GCalling is false,mCdmaSlot is -<*> 
Calling fingersense_classify_touch() 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getStatic,count:<*>,work status:false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onCellLocationChanged 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
onDataActivity: direction=<*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
received cell-signal:<*> 
<*> <*> id is not <*> <*> <*> = <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
need to force refresh view 
is3GCalling is false,mCdmaSlot is -<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
<*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
poll before: g_monitor_fd =<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
shouldBlockLocation running ... 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
c: true, w: false, t: false, l: false 
received cell-signal:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onFling::not valid gesture or touch plus on, false, return! 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
Calling fingersense_touch_up() 
fingersense_touch_up() finished 
setTracingEnabled:<*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
scheduleTimeTickEvent triggerAtTime = <*> 
formatChinaDateTime equals. 
<*>|logicalDealBroadcastEvent : Intent { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) } 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
isCurrentBySim()=false 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Failing getSupportedFeatureset because HAL isn't started 
======onPolling end===== 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
t:false, fl: false, p: <*>, ce: true, we: false 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
onSignal: mSubId=<*>,currDataSubID=<*> 
getStatic,count:<*>,work status:false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
isCurrentBySim()=false 
Calling fingersense_classify_touch() 
Calling fingersense_touch_up() 
isCurrentBySim()=false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> , <*> : <*> 
received cell-signal:<*> 
<*> temp_new :<*> temp_old :<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> 
Invalid profile no. <*>, total profiles <*> only 
m1: false 
isCurrentBySim()=false 
isCurrentBySim()=false 
getTempInfo error: null, <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
new ScenarioAction sPoolSize: <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
isCurrentBySim()=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
disableEffects=null canInterrupt=false once update: false 
updateTint: tint=<*> 
send_cmd_kernel: cmd=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
<*> <*> reason = <*> 
transitionTo:mode=<*>, isEmuiStyle=true 
resumeSuspendedAutohide 
querySoundEffectsEnabled... 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
apply skiped :<*> 
setScrollingEnabled: true 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
shouldBlockLocation running ... 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> <*> (has extras) } 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.database.sqlite.SQLiteConnectionPool.open(SQLiteConnectionPool.java:<*>) 
at android.database.sqlite.SQLiteConnectionPool.open(SQLiteConnectionPool.java:<*>) 
<*> : <*> 
HwLocationManager:stopLocation. 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
MyOrientationListener: updateRotation. 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
action:com.huawei.android.action.alarm_weather, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> (has extras) } 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> type <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
send data return = <*> 
send data return = <*> 
<*> <*> <*> <*> <*> 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper$<*>.onMagazinePicLoaded(KeyguardWallpaper.java:<*>) 
loadType:<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> <*> 
<*> <*> <*> <*> is <*> 
DisplayPowerState Updating <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Finished business... 
<*>|onStandStepChanged <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|after compensate: cache step_<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> mMaxValue=<*>, mMinValue=<*> 
writeSummaryFromParcelLocked, duration: <*> 
writeSummaryFromParcelLocked, duration: <*> 
duration: <*> <*> <*> <*> (<*> * <*> * <*> * <*> <*> <*> <*> <*> (<*> * <*> * <*> * <*>) day 
enter addToIdleMessage(type:<*>), mainloop is busy, add to idleMessage 
showPrimarySecurityScreen() 
resetCommute 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
not 3G net type. do nothing. 
The tag is null error! 
mTiffStream skip = <*> 
set notification panel padding = <*> 
Error reading charge file 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> = <*> 
<*> <*> <*> OK ! 
<*> when=<*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
mIntentReceiver begin 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
LightSensor, enable, <*>: en=<*> 
becomeActiveLocked, reason = <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
flush,<*>,handle <*> 
flush:sensor(android.sensor.step_counter) handle:<*> 
DialpadFragment mBroadcastReceiver <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
updateTint: tint=<*> 
updateNotificationShade 
transferRemoteInputFocus: <*> 
set notification panel padding = <*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> 
chinaDateTime:早上<*>:<*> 
hideTraffic 
Model onReceive user=UserHandle{<*>} 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> is null 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> is null 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
shouldBlockLocation ret:false 
handleNotifyScreenTurnedOff 
LightSensor, enable, <*>: mEnabled=<*> 
scheduleLightAlarmLocked(<*>) 
BaiduLocation:locType: <*> 
<*> <*> <*> <*> <*> 
Finished business... 
onFinishedGoingToSleep(<*>) 
Caller checkPermission fail 
updateNotificationShade 
<*> off notificationLight 
The tag is null error! 
<*> <*> <*> 
getTempInfo error: null, <*> 
MagicLink2-BroadcastReceiver:====>ACTION_SCREEN_OFF 
Provider.call: getPrefString 
hideTraffic 
handleBatteryUpdate 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
sending broadcast to Pid = <*>, Uid = <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Report temperature: [ap] temp :<*> report_threshold:<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
at java.io.FileInputStream.open(Native Method) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
Error reading charge file 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
updateNotificationShade 
Cache monitor msg as screen_off 
received cell-signal:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
formatChinaDateTime equals. 
formatChinaDateTime, change to China <*> 
begin of formatChinaDateRange chinaDate:早上<*>:<*> 
handleTimeUpdate 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> [<*>, <*>] 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*> <*> <*> <*> <*> <*> is not <*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Sending non-protected broadcast <*> from system <*> <*> <*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> 
Sending non-protected broadcast <*> from system uid <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> pluggedType: <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
at java.io.FileInputStream.open(Native Method) 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
c: true, w: false, t: false, l: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
isMusicActive... 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
act:android.intent.action.TIME_TICK flag:<*> FLAG_IS_FIRST_POWER_OFF_ALARM=false android.intent.extra.ALARM_COUNT=<*> 
chinaDateTime:早上<*>:<*> 
chinaDateTime:早上<*>:<*> 
PFW.HwPFWAppRestartPolicy:receive action = <*> 
set notification panel padding = <*> 
ActivityThread,attachApplication 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
Model onReceive <*> { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) } 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
action=android.intent.action.PACKAGE_RESTARTED queryReplace=false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateChargingLocked: charging=false 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at java.io.FileInputStream.open(Native Method) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:svn_closeAll <*> = <*> 
formatChinaDateTime equals. 
chinaDateTime:早上<*>:<*> 
<*> <*> <*> OK ! 
<*> <*> uid = <*> pid = <*> 
<*> <*> <*> socket. 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
Change to single clock mode! 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
<*> <*> = <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
c: true, w: false, t: false, l: false 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
need to force refresh view 
isCurrentBySim()=false 
onCellLocationChanged 
<*> <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rac Change (PDC) data: [<*>, <*>] 
onReceive: action = android.intent.action.LTE_CA_STATE 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
Watch Thread{<*>} <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
acquire lock=<*>, flags=0x1, <*> <*> <*> ws=null, uid=<*>, pid=<*> 
<*> calling driver setDelay <*> ms 
remove(null) changed bounds; rebatching 
<*> <*> = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> = <*> 
send data return = <*> 
<*> <*> <*> <*> <*> 
Apply window Height MATCH_PARENT 
QSEECom_send_cmd return! 
send data return = <*> 
send data return = <*> 
<*> <*> <*> <*> <*> 
action:android.intent.action.USER_PRESENT, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> is <*> 
get_spk_pa_type: pa is max<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ACDB -> <*> <*> <*> <*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
<*> <*> <*> 
enter addToIdleMessage(type:<*>), mainloop is busy, add to idleMessage 
stopFilter m_filterIsStarted:false 
ApStaDisabledState what=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file <*> sec level = <*> 
<*> <*> <*> 
<*> <*> <*> <*> ......ID <*>,<*>-<*>,<*> <*> <*> 
sendScreenOnEvent enter. 
<*> <*> = false 
<*> took <*> ms 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
handle_exception_events enter 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
statusBarIconTint=#B3000000,navigationBarIconTint=#<*> 
<*> package name <*> <*> 
Model onReceive user=UserHandle{<*>} 
<*> <*> <*> <*> <*> 
ExtraTrafficSetting:result is empty 
ITrafficInfo:ITrafficInfo create 301updateBytes = <*> 
[LogSendProgressReceiver.onReceive]Start! 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) connecting max <*> to uc.huawei.com:<*> 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
@@@@@@@@@@@@ uid :<*> download <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file <*> sec level = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> type is [<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set mode to <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> third party <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
getBuddyInfoLines:buddyinfo: 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path <*> <*> <*> <*> ok 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path =>Access <*> real path ok 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
<*> <*> <*> <*> <*> <*> 
updateLightsLocked --> mBatteryLight.turnOff 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
SimCardManager:onReceive()-- mNameServSlot<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
PowerManagerNotifier onWakefulnessChangeStarted: wakefulness=<*>, reason=<*>, <*> <*> <*> 
<*> <*> <*> <*> <*>, <*> 
Is User Assigned Wallpaper? : <*> false 
<*> <*> <*> <*> 
<*> not in <*> <*> <*> <*> <*> <*> 
QSEECom_send_cmd return! 
qsc_decode end 
at android.os.Looper.loop(Looper.java:<*>) 
onScreenTurnedOff() 
Caller checkPermission fail 
scheduleLightAlarmLocked(<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
action:android.intent.action.SCREEN_OFF, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> 
TelecomServiceImpl: isInCall callState is <*>: <*> 
<*> <*> <*> <*> <*> <*> app:id/msim_status_bar_operators_card_one_id} 
onShowStatusChange show:false 
updateNotificationShade 
expand: false 
setBackgroundAlpha:alpha=<*>.<*> 
enter keyguard:<*> 
disable: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Wallpaper changed 
<*> <*> <*> broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
set notification panel padding = <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
isCardAbsent slot:<*> slotState:<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
Launcher.Folder childCount: <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Alarm triggering (type <*> <*> <*> <*> type <*> when <*> <*> 
<*> <*> <*> <*> 
begin of formatChinaDateRange chinaDate:早上<*>:<*> 
mFilterMsgFlag: <*>,msg.arg1: <*> 
<*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
<*> <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:WriteSdkGroupItem: hash <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
getStatic,count:<*>,work status:false 
Launcher.Folder childCount: <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
at java.io.FileInputStream.open(Native Method) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sending broadcast to Pid = <*>, Uid = <*> 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
AllIdleAppsList updatePackage <*> <*> <*> <*> size is <*> <*> <*> <*> size is <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event TCP_CONNECTED 
<*> <*> <*> <*> <*> 
updateLightsLocked --> mBatteryLight.turnOff 
<*> <*> <*> <*> <*> mBatteryLevel=<*> 
onReceive, action:android.intent.action.BATTERY_CHANGED 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*>|getTodayTotalSteps <*> 
handleMessage what = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
applyIconTint ignore 
updateLightsLocked --> mBatteryLight.turnOff 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) Login_By_Step-> at <*> 
<*> <*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
getOrInflateState subId:<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
proxyBroadcast:[com.android.browser] proxy:true 
Heartbeat timer.timers{<*>} <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
at java.io.FileInputStream.open(Native Method) 
To broadcast an Intent via the notifier to external apps 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Rac Change (PDC) data: [<*>, <*>] 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
setAlarmsAdjust ... 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) Login_By_Step-> at <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> mBatteryLevel=<*> 
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*> 
<*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onReceive: action = android.intent.action.LTE_CA_STATE 
Error reading charge file 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
at android.os.Looper.loop(Looper.java:<*>) 
[SocketRead_<*>:<*>:<*>-<*>]broadcast(),and mReceivers <*>(android/null:<*>) 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
received cell-signal:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
received cell-signal:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> is null 
<*> <*> <*> intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
handleMessage what = <*> 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
onSignal: mSubId=<*>,currDataSubID=<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
handleMessage what = <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
<*> <*> OK ! 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
EventHub monitor: no key events in the past <*> no motion events in the past <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
isMusicActive... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
handleDreamLocked 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
<*> <*> <*> intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
getTempInfo error: null, <*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
<*> <*> <*> <*> <*> <*> <*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
sending broadcast to Pid = <*>, Uid = <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
Response ID <*> is not served in this process. 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.open(Native Method) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
Broadcasting intent ACTION_RAC_CHANGED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
Broadcasting intent ACTION_RAC_CHANGED 
scheduleLightAlarmLocked(<*>) 
at com.huawei.ecs.mtk.util.SimpleThread.run(SimpleThread.java:<*>) 
RCV <- {<*> IfaceClass idle <*> <*>} 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
onShowStatusChange show:false 
<*>|getTodayTotalSteps <*> 
onStepCounterChange stepsNum:<*> 
Broadcasting intent ACTION_RAC_CHANGED 
updateDimmedActivatedHideSensitive overlap:false 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Rac Change (PDC) data: [<*>, <*>] 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) notify user tcp connected successully at <*> to uc.huawei.com:<*> 
<*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
RecentLogic{<*>} RecentLogic.addConversationEntity(RecentLogic.java:<*>) add chat recent! 
AFTER CALLBACK 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleLteCaStatusChange 
Broadcasting intent ACTION_RAC_CHANGED 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
handleBatteryUpdate 
RefreshBatteryInfo isBatteryLow: <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
<*> <*> <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Sending non-protected broadcast <*> from system uid <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="hibernation", name=com.huawei.powergenie, ws=null, uid=<*>, pid=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
sending broadcast to Pid = <*>, Uid = <*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
applyIconTint ignore 
applyIconTint ignore 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|after compensate: cache step_<*> 
shouldBlockLocation ret:false 
t:false, fl: false, p: <*>, ce: true, we: false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
transferRemoteInputFocus: <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
getOrInflateState subId:<*> 
received cell-signal:<*> 
<*> <*> is null 
cancelNotificationWithTag pid <*>,uid = <*>,tag = low_battery,pkg =com.android.systemui,id =<*> 
cancelNotification,index:-<*> 
getTempInfo error: null, <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Error reading charge file 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
scheduleTimeTickEvent triggerAtTime = <*> 
<*> <*> do not <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
csr 
m1: false 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
onSignal: mSubId=<*>,currDataSubID=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
applyIconTint ignore 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
Error reading charge file 
<*> <*> uid = <*> pid = <*> 
Error reading charge file 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
[SocketRead_<*>:<*>:<*>-<*>]isSupportCtrlSocketV2, ctrlSocket(android/null:<*>) 
pid = <*> = <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
updateTint: tint=<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|compensate <*> <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
onStepCounterChange stepsNum:<*> 
isMusicActive... 
######### CMD_QUERY_PKTS ######## 
<*> <*> <*> 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
received broadcast <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
getTempInfo error: null, <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*>|getTodayTotalSteps <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
hideTraffic 
updateNotificationShade 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
onStepCounterChange stepsNum:<*> 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
begin of formatChinaDateRange chinaDate:早上<*>:<*> 
<*> TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is not <*> 
<*> <*> <*> <*> <*> 
Error reading charge file 
removeFreezeProcess pkg:com.tencent.mm 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
set notification panel padding = <*> 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) changed bounds; rebatching 
at com.huawei.android.bastet.HwBastet.prepareHeartbeatProxy(HwBastet.java:<*>) 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
isCarrierConfigEnabled bundle is null 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
process buffer and get message 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|after compensate: cache step_<*> 
updateTint: tint=<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
<*>|compensate <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*>|REPORT : <*> <*> <*> <*> 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
Failed to get <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
at com.huawei.ecs.mtk.util.SimpleThread.onLoop_i(SimpleThread.java:<*>) 
begin of formatChinaDateRange <*> 
chinaDateTime:上午<*>:<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
send: <*> 
no controller energy info supplied 
process buffer and get message 
process buffer and get message 
</div> 
isMusicActive... 
handleMessage(<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
at java.io.FileInputStream.open(Native Method) 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
[SocketRead_<*>:<*>:<*>-<*>]broadcast(),and mReceivers <*>(android/null:<*>) 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
MSG_QUERY_TCP_INFO called,count:<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
<*>|rebuild notification 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
showNotificationAll 
isMusicActive... 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Error reading charge file 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
updateVolte::volteState=UNREGISTERED 
action:com.android.imscontection.DISCONNECTED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
applyInPlace=true shouldPeek=false alertAgain=true 
transferRemoteInputFocus: <*> 
updateDimmedActivatedHideSensitive overlap:false 
Model onReceive user=UserHandle{<*>} 
hideTraffic 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
<*> <*> uid = <*> pid = <*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: true 
<*> <*> <*> 
getTempInfo error: null, <*> 
mSendService start 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
updateTint: tint=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
m1: false 
<*> <*> <*> <*> <*> --> <*> 
<*> <*> <*> <*> <*> <*> is not <*> 
getConfigForPhoneId phoneId is invalid 
msg = <*> received 
getCurrentCellid type type = PHONE_TYPE_GSM 
<*> <*> <*> <*> <*> 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
formatChinaDateTime equals. 
begin of formatChinaDateRange <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> : <*> 
<*> <*> : <*> 
<*> <*> : <*> 
<*> <*> : <*> 
<*> <*> <*> <*> 
update() updated: <*> 
at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<*>) 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) <*> <*> <*> <*> <*> <*> <*> 
<*> to get <*> <*> <*> <*> is not <*> 
handle_exception_events enter 
update() updated: <*> 
update() updated: <*> 
<*> <*> <*> <*> <*> 
is Beta User, userType = <*> 
WatchThread{<*>} TcpCirChannel.connect(TcpCirChannel.java:<*>) Connect to server address = [uc.huawei.com,] port = <*> 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
updateTint: tint=<*> 
<*>|onStandStepChanged <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
msg = <*> received 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
updateTint: tint=<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
transferRemoteInputFocus: <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
Change to single clock mode! 
<*> <*> <*> <*> 
[SocketRead_<*>:<*>:<*>-<*>]broadcast(),and mReceivers <*>(android/null:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> mReceivers <*> 
at com.huawei.android.bastet.HwBastet.<init>(HwBastet.java:<*>) 
<*> <*> <*> <*> <*> 
RefreshBatteryInfo isBatteryLow: <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
action:com.tencent.mm.ACTION.note_tracemsg_lock, mPermissionType:<*> 
<*> <*> <*>, <*>), <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
MediaPlayerService::getOMX 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
selectOutput() commonFlags for output <*>, <*> 
<*> Speaker protection disabled 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
updateNotificationShade 
removeNotificationChildren 
generateAddAnimation:null, false 
out_get_latency: Latency <*> 
out_get_latency: Latency <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
updateLightsLocked --> level:<*>, status:<*> 
EventHub monitor: no key events in the past <*> no motion events in the past <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
cancelNotification,index:-<*> 
<*> <*> <*> <*> <*> 
activate called handle:<*> enable:<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
c: true, w: false, t: false, l: false 
begin 
Fingerprint timeout 
<*> <*> <*> took <*> ms 
setOverlap mOverlap:true, mDimmed:false 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast <*> <*> 
huawei_cust_get_parameters: returns 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
updateQsState:false 
ACDB -> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ApStaDisabledState what=<*> 
DefaultState what=<*> 
applyIconTint ignore 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) changed bounds; rebatching 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
platform_set_parameters: <*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
send data return = <*> 
Report temperature: [ap] temp :<*> report_threshold:<*> 
begin 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
Calling a method in the system process without a qualified user: android.app.ContextImpl.startService:<*> android.content.ContextWrapper.startService:<*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> is empty 
<*> <*> <*> <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
chinaDateTime:上午<*>:<*> 
received broadcast android.intent.action.TIME_TICK 
at android.database.sqlite.SQLiteDatabase.openInner(SQLiteDatabase.java:<*>) 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
updateRotationUnchecked(alwaysSendConfiguration=false) 
EventCenter Get <*> 
<*> <*> <*> <*> <*> <*> <*> <*>, <*> 
updateSlider1 seekBarProgress:<*> 
ContentChange for slot: <*> 
ContentChange for slot: <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
mSeekListener onProgressChanged progress:<*> fromUser:false 
Calling fingersense_touch_up() 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> 
querySoundEffectsEnabled... 
updateSlider1 seekBarProgress:<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> U=<*> StackId=<*> <*> <*> <*> <*> <*> U=<*> StackId=<*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
cancelNotificationWithTag pid <*>,uid = <*>,tag = <*> <*> <*> 
restoreBackgroundColor:new=<*>, old=<*> 
search 
ambient lux=<*>.<*>,timeStamp =<*> 
scheduleTimeTickEvent triggerAtTime = <*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
MyOrientationListener: updateRotation. 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> <*> <*> <*> = <*> 
ProviderCallUtils callBadge isCloned = false 
<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) changed bounds; rebatching 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
RecentLogic{<*>} RecentLogic.addConversationEntity(RecentLogic.java:<*>) add chat recent! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path <*> <*> <*> 
. 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace <*> <*> <*> <*> <*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
<*> <*> <*> <*> pid: <*> <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
received cell-signal:<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
answer call by keyCode = <*>, <*> = false, <*> = false 
getMode... 
isBluetoothScoOn... 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
ContentChange for slot: <*> 
updateSlider2 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
updateSlider2 seekBarProgress:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, <*> <*> <*> <*> eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
<*> <*> <*> = false <*> <*> 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> state = <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
<*> <*> open file <*> line <*> of <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:true isRoaming:false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = null,pkg =com.tencent.mm,id =<*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> (has extras) } 
updateRotationUnchecked(alwaysSendConfiguration=false) 
mSimSubId:<*> onDataActivity: direction=<*> 
fingersense_classify_touch() finished 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
notifyUiVisibilityChanged:vis=0x8608, SystemUiVisibility=0x<*> 
BadgeContentObserver getBadgeNumber: <*> mComponentName :ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
Launcher.Folder childCount: <*> 
Launcher.LauncherProvider queried count: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
m1: false 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
onDataActivity: direction=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
isCurrentBySim()=false 
<*>|before compensate: cache step_<*> 
onStepCounterChange stepsNum:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
<*>|compensate received 
updateClipping isOverlap:false 
<*> <*> <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*>|MSG_RECORD_DATA_TO_FILE 
back light level before map = <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
back light level before map = <*> 
back light level before map = <*> 
DeviceStateListener:MyCityChanged: true 
t:false, fl: false, p: <*>, ce: true, we: false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
mThermalService is NULL! 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
ContentChange for slot: <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
ContentChange for slot: <*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
ContentChange for slot: <*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
updateSlider2 seekBarProgress:<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
ContentChange for slot: <*> 
updateSlider2 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
setSystemUiVisibility <*> <*> <*> <*> <*> 
notifyUiVisibilityChanged:vis=0x8708, SystemUiVisibility=0x<*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> 
<*> <*> <*> <*> <*> size is <*> <*> 
<*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
updateSlider1 seekBarProgress:<*> 
updateSlider1 seekBarProgress:<*> 
Launcher.LauncherProvider launcher call - <*> <*> <*> <*> <*> pid =<*> 
updateSlider1 seekBarProgress:<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
updateSlider1 seekBarProgress:<*> 
ContentChange for slot: <*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider2 seekBarProgress:<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
onCellLocationChanged 
<*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
removeNotificationChildren 
<*>|upDateHealthNotification()|<*>|<*>|<*> 
transferRemoteInputFocus: <*> 
updateDimmedActivatedHideSensitive overlap:false 
chinaDateTime:上午<*>:<*> 
<*> <*> <*> <*> 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
Launcher dynamicIconsRegister 
<*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
New <*> <*> <*> <*> <*> <*> <*> 
<*> : <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
at android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(SQLiteDatabase.java:<*>) 
release:lock=<*>, flg=0x0, <*> <*> <*> uid=<*>, pid=<*> 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> reason = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
querySoundEffectsEnabled... 
<*> <*> <*> <*> 
updateNotificationShade 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
Split enqueueing broadcast <*> <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
<*> <*> = <*> 
<*> is empty 
Change to single clock mode! 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*>|onStandStepChanged <*> 
<*>|compensate received 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
transferRemoteInputFocus: <*> 
Launcher onPause() 
<*> <*> <*> <*> <*> 
huawei_audio huawei_choose_Handset_device_incall_forHWtest: test Type =<*> 
<*> <*> <*> <*> <*> <*> 
Invalid profile no. <*>, total profiles <*> only 
<*> <*> <*> <*> <*> 
Moving <*> <*> <*> <*> <*> <*> <*> <*> 
The tag is null error! 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
receive data len = <*> 
send data return = <*> 
send data return = <*> 
at android.os.Looper.loop(Looper.java:<*>) 
DisplayPowerStatesetScreenState: state=<*> 
onScreenTurnedOff() 
<*> <*> <*> <*> <*> <*> <*> = false 
<*> <*> <*> 
Apply window Height MATCH_PARENT 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
mIntentReceiver-ACTION_SCREEN_OFF 
platform_set_parameters: <*> <*> <*> 
SND -> {<*> bandwidth gettetherstats} 
<*> <*> <*> 
setBackgroundAlpha:alpha=<*>.<*> 
tryUpdateKeyguardWallpaperWithMask::useMask=<*>, avgColorType=<*> 
applyIconTint ignore 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
cancelAutohide 
getNextIndex: <*>; from <*> to <*>; size: <*> 
isCurrentBySim()=false 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: <*> 
<*> <*> <*> OK ! 
unproxy app:com.android.browser,uid:<*>,result:true 
RCV <- {<*> <*> <*> <*> <*> 
received broadcast <*> 
hideTraffic 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000011000000514f454d484f4f4bfa0308000100000000] 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> = <*> 
<*> <*> <*> <*> <*> 
shouldBlockLocation ret:false 
c: true, w: false, t: false, l: false 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:svn_closeAll <*> 
Cache monitor msg as screen_off 
No config file found for:/themes/diff/icons 
Report temperature: [ap] temp :<*> report_threshold:<*> 
received broadcast android.intent.action.TIME_TICK 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) Login_By_Step-> at <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> mode to <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
action:com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver, mPermissionType:<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
check dependency pid: <*> is depended by pid: <*> 
updateClipping isOverlap:false 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*>|after compensate: cache step_<*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
disableEffects=null canInterrupt=false once update: false 
Create obj success use class android.app.HwCustNotificationImpl 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
onStepCounterChange stepsNum:<*> 
updateTint: tint=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
m1: false 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
updateDimmedActivatedHideSensitive overlap:false 
transferRemoteInputFocus: <*> 
set notification panel padding = <*> 
addFreezeProcess pkg:com.tencent.mm 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: true 
<*>|getTodayTotalSteps <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
removeNotificationChildren 
<*>|compensate <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000011000000514f454d484f4f4bfa0308000100000000] 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
create: <*> 
getOrInflateState subId:<*> 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
Rac Change (PDC) data: [<*>, <*>] 
Error reading charge file 
<*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
new ScenarioAction sPoolSize: <*> 
chinaDateTime:上午<*>:<*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
onShowStatusChange show:false 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
Handle message: <*> 
get_spk_pa_type: pa is max<*> 
audio_extn_get_parameters: returns 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
handleMessage what = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
isMonitorCellId mInfos.size() = <*> 
<*> <*> id is not <*> <*> cellid = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> : <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> = <*>, state = <*> 
wifiSleepPolicy:<*> 
RefreshBatteryInfo isBatteryLow: <*> 
isCurrentBySim()=false 
<*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
LightSensor, enable, <*>: mEnabled=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
qsc_decode end 
receive data len = <*> 
<*> <*> <*> 
<*> calling driver setDelay <*> ms 
refreshState=flashlight, BooleanState[,icon=ResourceIcon[resId=0x7f020212],label=手电筒,labelTint=<*>,textChangedDelay=<*>,contentDescription=手电筒,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false] 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> false 
<*> <*> <*> 
<*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
huawei_cust_get_parameters: returns 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> ms 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
removeNotificationChildren 
showNotificationAll 
onReceive, action:android.intent.action.SCREEN_ON 
<*> <*> rt=<*>/<*> <*> <*> 
receive data len = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> Heartbeat timer.timers{<*>} 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
send data return = <*> 
<*> <*> <*> <*> type <*> <*> <*> <*> <*> <*> 
receive data len = <*> 
begin 
RCV <- {<*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
setRestrictBackgroundLocked(): false 
onStepCounterChange stepsNum:<*> 
ImsServiceSub : handleSsac voice = <*> 
showNotificationAll 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> type = <*> 
ActivityThread,attachApplication 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
qsc_send_cmd finish 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<*> is null 
<*> is null 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
isCurrentBySim()=false 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
<*> <*> <*> <*> = <*> 
<*> <*> <*> 
<*> <*> <*> <*> = <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> flg=0x10 (has extras) } on bgkeyapp queue 
<*> <*> <*> <*> <*> 
statusBarIconTint=#B3FFFFFF,navigationBarIconTint=#FF<*> 
Create obj success use class <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{<*> <*>:com.baidu.input_huawei/u0a74} 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
Launcher.LauncherProvider launcher call - method:setAppBadgeCount arg:null <*> uid =<*> pid =<*> 
dispatch ordered broadcast [bgkeyapp] <*> <*> <*> has <*> receivers 
Heartbeat timer.timers{<*>} <*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
obtain, mHwFlags=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> reason = <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
obtain, mHwFlags=-<*> 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, <*> <*> <*> <*> eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
<*> pid = <*>, uid = <*> 
action:com.huawei.android.action.launcher_weather_icon_change, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*>, <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
shouldBlockLocation running ... 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> <*> <*> <*> euid: <*> 
moveTaskToTop mTaskChanged:true 
CommandQueue, setBarBackgroundColor 
Moving <*> <*> <*> <*> <*> <*> <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
not 3G net type. do nothing. 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
not 3G net type. do nothing. 
Calling fingersense_classify_touch() 
formatChinaDateTime, change to China <*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
isCurrentBySim()=false 
csr 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
Change in state from: <*> <*> 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
<*> cellid = <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
m1: false 
isCurrentBySim()=false 
m1: false 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Broadcasting intent ACTION_RAC_CHANGED 
c: true, w: false, t: false, l: false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*>|calculateAltitudeWithCache datas.size=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*>|compensate <*> <*> 
<*>|getTodayTotalSteps <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Create obj success use class android.app.HwCustNotificationImpl 
sending broadcast to Pid = <*>, Uid = <*> 
InputDispatcher::monitor frozen check! 
onSignal: mSubId=<*>,currDataSubID=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*>|compensate received 
shouldBlockLocation ret:false 
getCurrentCellid type type = PHONE_TYPE_GSM 
shouldBlockLocation running ... 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
shouldBlockLocation running ... 
c: true, w: false, t: false, l: false 
m1: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
isCurrentBySim()=false 
<*>|REPORT : <*> <*> <*> <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*>|after compensate: cache step_<*> 
<*>|onStandStepChanged <*> 
onStepCounterChange stepsNum:<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
isCurrentBySim()=false 
<*>|compensate <*> <*> 
<*>|getTodayTotalSteps <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*>|compensate received 
<*>|getTodayTotalSteps <*> 
new ScenarioAction sPoolSize: <*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mSimSubId:<*> onDataActivity: direction=<*> 
c: true, w: false, t: false, l: false 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
transferRemoteInputFocus: <*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
<*>|after compensate: cache step_<*> 
<*>|compensate <*> <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
removeNotificationChildren 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
isCurrentBySim()=false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Model onReceive user=UserHandle{<*>} 
######### CMD_QUERY_PKTS ######## 
<*>|onStandStepChanged <*> 
<*>|before compensate: cache step_<*> 
<*>|rebuild notification 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*>|getTodayTotalSteps <*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
<*>|compensate <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*>|compensate received 
<*>|getTodayTotalSteps <*> 
isCurrentBySim()=false 
c: true, w: false, t: false, l: false 
<*>|onStandStepChanged <*> 
<*>|onStandStepChanged <*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
new ScenarioAction sPoolSize: <*> 
Rac Change (PDC) data: [<*>, <*>] 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
isMonitorCellId mInfos.size() = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
onProposedRotationChanged, rotation=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
handleLteCaStatusChange 
need to force refresh view 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
new ScenarioAction sPoolSize: <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
isCardAbsent slot:<*> slotState:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
onSignal: mSubId=<*>,currDataSubID=<*> 
c: true, w: false, t: false, l: false 
isCurrentBySim()=false 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg 28TCP_OK 
<*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
resumeSuspendedAutohide 
Client requesting input be hidden, pid=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
Change in state from: <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
mVSimCurCardType is -<*> 
Rac Change (PDC) data: [<*>, <*>] 
csr 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
Rac Change (PDC) data: [<*>, <*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> = <*> <*> = <*> <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> mReceivers <*>(android/null:<*>) 
<*> <*> <*> <*> <*> 
[pa_<*>] temp_new :<*> temp_old :<*> 
<*> <*> <*> <*> 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ACDB -> <*> 
<*> <*> <*> <*> 
qsc_send_cmd finish 
start_output_stream: exit 
send data return = <*> 
qsc_send_cmd finish 
<*> <*> <*> <*> <*> 
at com.huawei.keyguard.support.magazine.MagazineWallpaper$BgPicLoader$<*>.run(MagazineWallpaper.java:<*>) 
HWCDisplay::SetPowerMode: display = <*>, mode = <*> 
received cell-signal:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
updateDimmedActivatedHideSensitive overlap:false 
mDateString is: <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> 
showLocked 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
Apply window Height MATCH_PARENT 
<*> <*> rt=<*>/<*> <*> <*> 
<*> screen off <*> 
<*> <*> <*> 
mIntentReceiver-ACTION_SCREEN_OFF 
<*> exit with code(<*>) 
TelecomServiceImpl: isInCall callState is <*>: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
<*> <*> <*> <*> <*> 
TelecomServiceImpl: isInCall callState is <*>: <*> 
<*> <*> <*> 
Handle message: <*> 
Apply window <*> <*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> app:id/msim_status_bar_operators_card_one_id} 
disable: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
onShowStatusChange show:false 
set notification panel padding = <*> 
handleDreamLocked 
set notification panel padding = <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
c: true, w: false, t: false, l: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
onShowStatusChange show:false 
hideTraffic 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
isCurrentBySim()=false 
<*>|after compensate: cache step_<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*>|getTodayTotalSteps <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*>|Alarm uploadStaticsToDB 
<*>|after compensate: cache step_<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
transferRemoteInputFocus: <*> 
hideTraffic 
<*>|rebuild notification 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
received cell-signal:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
handleDreamLocked 
Error reading charge file 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = low_battery,pkg =com.android.systemui,id =<*> 
getTempInfo error: null, <*> 
refreshBatteryInfo: null 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
Error reading charge file 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
onLayout:left=<*>, top=<*>, right=<*>, bottom=<*>, offset=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|getTodayTotalSteps <*> 
at java.io.FileInputStream.open(Native Method) 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Received kernel message payload: event <*> 
isMusicActive... 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
<*>|before compensate: cache step_<*> 
applyIconTint ignore 
Create obj success use class android.app.HwCustNotificationImpl 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
<*>|before compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
stopNavigating, mStarted=false 
<*> <*> <*> <*> <*> <*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: true 
formatChinaDateTime equals. 
hideTraffic 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event TCP_CONNECTED 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rac Change (PDC) data: [<*>, <*>] 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
applyIconTint ignore 
shouldBlockLocation running ... 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*>|rebuild notification 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*> <*> <*> [<*>, <*>] 
updateClipping isOverlap:false 
Handle message: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
Error reading charge file 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
transferRemoteInputFocus: <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*>|compensate received 
updateTint: tint=<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|compensate <*> <*> 
onStepCounterChange stepsNum:<*> 
<*>|rebuild notification 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
<*>|before compensate: cache step_<*> 
<*>|compensate <*> <*> 
<*>|rebuild notification 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
onReceive intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
<*> <*> <*> intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*>|before compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|compensate received 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
removeNotificationChildren 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateTint: tint=<*> 
Error reading charge file 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
updateTint: tint=<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
<*>|rebuild notification 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
isWiredHeadsetOn... 
<*>|getTodayTotalSteps <*> 
onShowStatusChange show:false 
stepLightIdleStateLocked: mLightState=<*> 
<*> <*> uid = <*> pid = <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
begin of formatChinaDateRange <*> 
formatChinaDateTime equals. 
<*> <*> <*> [<*>, <*>, <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> 
pool-<*>-thread-<*>{<*>} <*>.doInBackground(TupHelper.java:<*>) <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) disconnected 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:svn_closeAll <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*>|before compensate: cache step_<*> 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
applyInPlace=true shouldPeek=false alertAgain=true 
set notification panel padding = <*> 
<*>|rebuild notification 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
updateTint: tint=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in fetching group <*> <*> 
<*>|after compensate: cache step_<*> 
<*>|before compensate: cache step_<*> 
<*>|compensate <*> <*> 
<*>|after compensate: cache step_<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
disableEffects=null canInterrupt=false once update: false 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) connecting max <*> <*> <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
onShowStatusChange show:false 
updateDimmedActivatedHideSensitive overlap:false 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
cancelNotificationWithTag pid <*>,uid = <*>,tag = low_battery,pkg =com.android.systemui,id =<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Error reading charge file 
Error reading charge file 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
disableEffects=null canInterrupt=false once update: false 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> 
<*> msg = <*> received 
formatChinaDateTime equals. 
<*> mReceivers <*>(android/null:<*>) 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
<*> <*> <*> 
onShowStatusChange show:false 
mThermalService is NULL! 
Report temperature: [charger_ic] temp :<*> report_threshold:<*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[PullNotificationBase.onPollNotification]Start 
chinaDateTime:上午<*>:<*> 
formatChinaDateTime, change to China <*> 
updateDimmedActivatedHideSensitive overlap:false 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
Report temperature: <*> temp :<*> report_threshold:<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> 
check dependency pid: <*> is depended by pid: <*> 
formatChinaDateTime, change to China <*> 
updateClipping isOverlap:false 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
proxy app:com.huawei.espacev2,uid:<*>,result:true 
<*> <*> uid = <*> pid = <*> 
Error reading charge file 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
receive data len = <*> 
send data return = <*> 
[ReportVersionInfo.uploadVersionInfo]uploadCurrentDeviceVersionInfo success 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
getTempInfo error: null, <*> 
Error reading charge file 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|logicalDealBroadcastEvent : Intent { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) } 
Received kernel message payload: event <*> 
formatChinaDateTime equals. 
onShowStatusChange show:false 
RCV <- {<*> <*> <*> <*> <*> 
pid = <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ImsServiceSubHandler : Message received: what = <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> <*> isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getOrInflateState subId:<*> 
updateClipping isOverlap:false 
RCV <- {<*> <*> Tethering stats list completed} 
getOrInflateState subId:<*> 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
t:false, fl: false, p: <*>, ce: true, we: false 
t:false, fl: false, p: <*>, ce: true, we: false 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
RCV <- {<*> IfaceClass idle <*> <*>} 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> to <*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000011000000514f454d484f4f4bfa0308000100000000] 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
ImsSenderRxr : <*> <*> 
<*> <*> = <*> 
<*> <*> to server <*> 
<*> <*> = <*> 
<*> <*> <*> <*> = <*>, <*> = <*>, <*> = <*>, result = <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
ImsServiceSubHandler : <*> 
c: true, w: false, t: false, l: false 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
isCurrentBySim()=false 
DialpadFragment mBroadcastReceiver <*> 
action:android.intent.action.NETWORK_SET_TIMEZONE, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
hideTraffic 
updateDimmedActivatedHideSensitive overlap:false 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
<*>| ## MSG_DEAL_SYSTEM_EVENT android.intent.action.TIME_TICK 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
ACTION_BATTERY_CHANGED pluggedType: <*> 
DefaultState what=<*> 
Handle message: <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> <*> <*> <*> <*> 
Error reading charge file 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
Application com.baidu.input_huawei is depended by other app, delay to H! 
<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in fetching group <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace <*> <*> <*> <*> <*> 
<*> wakelock uid = <*> pid = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
parsed ip:<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Error reading charge file 
Create obj success use class <*> 
<*> <*> <*> <*> when=<*> what=<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
stopSelfIfIdle: STOP! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:Send <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
<*> <*> <*> <*> <*> 
at com.huawei.svn.sdk.socket.SvnSocket.connect(SvnSocket.java:<*>) 
<*> <*> to server <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
applyIconTint ignore 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
action:android.intent.action.SERVICE_STATE, mPermissionType:<*> 
<*> <*> <*> <*> <*> home data home 中国移动 中国移动 <*> 中国移动 中国移动 <*> <*> <*> <*> not supported <*> <*> RoamInd=<*> DefRoamInd=<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
onDataConn: mSubId=<*>,state=<*>,networkType=<*> 
RCV <- {<*> <*> Tethering stats list completed} 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> = false 
<*>|before compensate: cache step_<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onStepCounterChange stepsNum:<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> <*> = <*>, <*> = <*>, <*> = <*>, result = <*> 
<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> home data home 中国移动 中国移动 <*> 中国移动 中国移动 <*> <*> <*> <*> not supported <*> <*> RoamInd=<*> DefRoamInd=<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
action:android.intent.action.PRECISE_DATA_CONNECTION_STATE_CHANGED, mPermissionType:<*> 
<*> <*> <*> type is <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
<*> is empty 
ImsServiceSubHandler : <*> <*> <*> <*> is <*> 
updateTint: tint=<*> 
removeNotificationChildren 
updateClipping isOverlap:false 
csr 
<*> <*> <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Change to single clock mode! 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> visible: <*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
onStepCounterChange stepsNum:<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*>|rebuild notification 
updateNotificationShade 
<*>|onStandStepChanged <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
isWiredHeadsetOn... 
<*>|compensate received 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*> <*> <*> 
<*> type is null or <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*>|getTodayTotalSteps <*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
at com.huawei.android.bastet.HwBastet.<init>(HwBastet.java:<*>) 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
formatChinaDateTime equals. 
WatchThread{<*>} TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
mDateString is: <*> 
handleTimeUpdate 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
<*> <*> <*> 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
<*>|getTodayTotalSteps <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> <*> <*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
updateTint: tint=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
addFreezeProcess pkg:com.huawei.espacev<*> 
acquire lock=<*>, flags=0x1, tag="hibernation", name=com.huawei.powergenie, ws=null, uid=<*>, pid=<*> 
at java.io.FileInputStream.open(Native Method) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
transferRemoteInputFocus: <*> 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) changed bounds; rebatching 
updateClipping isOverlap:false 
t:false, fl: false, p: <*>, ce: true, we: false 
getOrInflateState subId:<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
shouldBlockLocation ret:false 
csr 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateNotificationShade 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*>|before compensate: cache step_<*> 
<*> <*> = false 
m1: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
Report temperature: [ap] temp :<*> report_threshold:<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
<*> <*> <*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
[SocketRead_<*>:<*>:<*>-<*>]broadcast(),and mReceivers <*>(android/null:<*>) 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
Error reading charge file 
<*> <*> <*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
shouldBlockLocation ret:false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Error reading charge file 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|REPORT : <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
<*>|before compensate: cache step_<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
Create obj success use class android.app.HwCustNotificationImpl 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
updateTint: tint=<*> 
onReceive: action = android.intent.action.LTE_CA_STATE 
onShowStatusChange show:false 
getOrInflateState subId:<*> 
shouldBlockLocation running ... 
getCurrentCellid type type = PHONE_TYPE_GSM 
shouldBlockLocation ret:false 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Handle message: <*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
transferRemoteInputFocus: <*> 
isCurrentBySim()=false 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
Rac Change (PDC) data: [<*>, <*>] 
c: true, w: false, t: false, l: false 
<*>|onStandStepChanged <*> 
mThermalService is NULL! 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> <*> <*> 
set(null) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
at com.huawei.ecs.mip.proxy.TcpClientThread.onLoop(TcpClientThread.java:<*>) 
handleMessage(<*>) 
syncCalendar end! 
<*> <*> <*> pid: <*>, uid: <*> <*> <*> <*> <*> 
<*> <*> <*> pid: <*>, uid: <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
connect :true 
removeNotificationChildren 
Watch Thread{<*>} <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set local private IP is:[<*>.<*>.<*>.<*>] 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
removeNotificationChildren 
<*>|getTodayTotalSteps <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
sendMessage <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
onStepCounterChange stepsNum:<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
getTempInfo error: null, <*> 
getOrInflateState subId:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file <*> sec level = <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
send_cmd_kernel: cmd=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
Broadcasting intent ACTION_RAC_CHANGED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.open(Native Method) 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in fetching group <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
getOrInflateState subId:<*> 
transferRemoteInputFocus: <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
disableEffects=null canInterrupt=false once update: false 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
onCellLocationChanged 
getCurrentCellid type type = PHONE_TYPE_GSM 
<*> TcpClientThread.connect(TcpClientThread.java:<*>) will connect to <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
isCurrentBySim()=false 
Couldn't create directory for SharedPreferences file /data/user_de/<*>/com.android.settings/shared_prefs/caStatePreferences.xml 
shouldBlockLocation ret:false 
m1: false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
sendMessage <*> 
current cell id is not monitor ..... cellid = <*> 
csr 
c: true, w: false, t: false, l: false 
handleMessage what = <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
updateTint: tint=<*> 
<*>|compensate <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
set notification panel padding = <*> 
updateDimmedActivatedHideSensitive overlap:false 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
isCurrentBySim()=false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
applyIconTint ignore 
getCurrentCellid type is <*> 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
m1: false 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|compensate received 
<*>|compensate received 
<*>|rebuild notification 
updateTint: tint=<*> 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mThermalService is NULL! 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
handleDreamLocked 
updateChargingLocked: charging=false 
Error reading charge file 
Rac Change (PDC) data: [<*>, <*>] 
onLayout:left=<*>, top=<*>, right=<*>, bottom=<*>, offset=<*> 
getCurrentCellid type is <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
getOrInflateState subId:<*> 
applyIconTint ignore 
<*>|getTodayTotalSteps <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
not in link monitoring mode, ignore TCP result . 
updateClipping isOverlap:false 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
c: true, w: false, t: false, l: false 
Rac Change (PDC) data: [<*>, <*>] 
handleLteCaStatusChange 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*>|after compensate: cache step_<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[SocketRead_<*>:<*>:<*>-<*>]broadcast(),and mReceivers <*>(android/null:<*>) 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
transferRemoteInputFocus: <*> 
[ap] temp_new :<*> temp_old :<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*>|before compensate: cache step_<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
onShowStatusChange show:false 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
Handle message: <*> 
wifiSleepPolicy:<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Rac Change (PDC) data: [<*>, <*>] 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
getOrInflateState subId:<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
Error reading charge file 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
handleLteCaStatusChange 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
Error reading charge file 
onStepCounterChange stepsNum:<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
######### CMD_QUERY_PKTS ######## 
Error reading charge file 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> 
Error reading charge file 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateNotificationShade 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
updateDimmedActivatedHideSensitive overlap:false 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
<*>|getTodayTotalSteps <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
removeNotificationChildren 
<*>|after compensate: cache step_<*> 
<*>|compensate <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateTint: tint=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
RCV <- {<*> IfaceClass idle <*> <*>} 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
sending broadcast to Pid = <*>, Uid = <*> 
setAlarmsPending ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
RCV <- {<*> <*> Tethering stats list completed} 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
<*> <*> <*> 
<*> <*> <*> <*> 
getOrInflateState subId:<*> 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> does not <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
showNotificationAll 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
no controller energy info supplied 
CollectorManager--isCollectorEnabled--getBoolean: false 
StartupResidentService:InnerHandler Message:<*> 
Calling a method in the system process without a qualified user: android.app.ContextImpl.startService:<*> android.content.ContextWrapper.startService:<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
[IssueTypeParser.parseRndIssueType]load configuration 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
onShowStatusChange show:false 
Flags: 0x38d83e<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> Intent { <*> <*> 
java.net.SocketException: Socket <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
<*>|getTodayTotalSteps <*> 
updateTint: tint=<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> wakelock uid = <*> pid = <*> 
<*> <*> <*> pid = <*> uid = <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*>|compensate received 
onStepCounterChange stepsNum:<*> 
updateClipping isOverlap:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|rebuild notification 
SND -> {<*> <*> <*> <*> 
<*>|compensate <*> <*> 
sendMessage <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
enableTrigger 
enableTriggerMethod 
<*>|getTodayTotalSteps <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
onShowStatusChange show:false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
updateTint: tint=<*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
transferRemoteInputFocus: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ACTION_BATTERY_CHANGED pluggedType: <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Change to single clock mode! 
Error reading charge file 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Sending non-protected broadcast <*> from system uid <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
stepLightIdleStateLocked: mLightState=<*> 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
<*> <*> : <*> 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
msg = <*> received 
<*> <*> <*> <*> <*> is not in the <*> <*> name = <*> 
at com.huawei.android.chr.ProtocolLogManager.addSubCommonBaseParaInfo(ProtocolLogManager.java:<*>) 
<*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> mMaxValue=<*>, mMinValue=<*> 
Enter QmiChr_GetProtocolInfo 
update() updated: <*> 
update() updated: <*> 
update() updated: <*> 
getTempInfo error: null, <*> 
is Beta User, userType = <*> 
msg = <*> received 
<*> <*> <*> 
Report temperature: [charger_ic] temp :<*> report_threshold:<*> 
is Beta User, userType = <*> 
<*> to get <*> <*> <*> <*> is not <*> 
RCV <- {<*> <*> <*> <*> <*> 
send: <*> 
msg = <*> received 
<*> <*> size is <*> <*> <*> is <*> 
process buffer and get message 
<*> <*> = <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Alarm triggering (type <*> <*> <*> <*> type <*> when <*> <*> 
mDateString is: <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*>|MSG_RECORD_DATA_TO_FILE 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
enableTriggerMethod 
begin of formatChinaDateRange <*> 
no controller energy info supplied 
mDateString is: <*>月<*>日星期日 
hideTraffic 
<*> <*> <*> <*> <*> = <*> 
Alarm triggering (type <*> <*> <*> <*> type <*> when <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
come into oem_qmi_common_stream_from_modem_len --->modem 
ImsServiceSubHandler : <*> <*> state is <*> 
ImsServiceSubHandler : Message received: what = <*> 
ImsServiceSub : StatusForAccessTech networkMode = <*> registered = <*> status = <*> restrictCause = <*> 
ImsServiceSub : <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getCurrentCellid type type = PHONE_TYPE_GSM 
<*> <*> to server <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> = <*> 
ImsSenderRxr : [UNSL]< <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
m1: false 
ImsServiceSub : <*> = <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.open(Native Method) 
BatteryIntent received: android.intent.action.BATTERY_CHANGED 
isCarrierConfigEnabled bundle is null 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> <*> <*> 
process buffer and get message 
"freeday":[<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>]} ] 
formatChinaDateTime equals. 
onShowStatusChange show:false 
updateDimmedActivatedHideSensitive overlap:false 
Model onReceive <*> { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) } 
action:android.os.action.LIGHT_DEVICE_IDLE_MODE_CHANGED, mPermissionType:<*> 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
applyInPlace=true shouldPeek=false alertAgain=true 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
removeNotificationChildren 
showNotificationAll 
remove(null) changed bounds; rebatching 
motionLocked() 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
RCV <- {<*> <*> <*> <*> <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
Sending non-protected broadcast <*> from system uid <*> <*> <*> 
formatChinaDateTime, change to China <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> <*> <*> <*> 
updateClipping isOverlap:false 
enableTrigger 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag <*> 
<*> im app <*> <*> <*> <*> <*> <*> 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
SND -> {<*> <*> <*> <*> 
mDateString is: <*>月<*>日星期日 
updateClipping isOverlap:false 
hideTraffic 
<*> <*> <*> <*> <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
onStepCounterChange stepsNum:<*> 
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*> 
<*> <*> <*> <*> <*> --> <*> 
<*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> = <*> 
onAcquired <*> 
read Events <*> 
send data return = <*> 
receive data len = <*> 
ambient lux=<*>.<*>,timeStamp =<*> 
onScreenTurnedOn() 
<*> <*> <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
isMobileDataEnable::dateEnable=false, cotrollerEnable=false 
resetPagerState 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> <*> 
<*> <*> = true <*> = true 
<*> <*> <*> <*> 
setBackgroundColor:new=<*>, old=<*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> <*> 
generateAddAnimation:null, false 
platform_set_channel_map channel_count:<*> 
<*> <*> <*> <*> <*> <*> <*> 
CtrlSocket processCtrlSocket pid = <*> cmd = <*> param = <*> ret = <*> 
<*> <*> <*> 
applyIconTint ignore 
<*> off notificationLight 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> is <*> 
<*> <*> <*> <*> 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
chinaDateTime:上午<*>:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:FSM_OpenFile => <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) changed bounds; rebatching 
begin 
<*> took <*> ms 
send data return = <*> 
onDataActivity: direction=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
getOrInflateState subId:<*> 
RCV <- {<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
SND -> {<*> bandwidth gettetherstats} 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
AppAutoStartupPolicy:prevent start receiver of package com.netease.newsreader.activity for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
onReceive: action=android.net.conn.CONNECTIVITY_CHANGE 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> proc <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
[CheckVersionService.checkVersionOnBackground]Start 
[main-<*>]Network available(hwouc/DownloadReceiver.java:<*>) 
is3GCalling is false,mCdmaSlot is -<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
GetAddrInfoHandler addr: uc.huawei.com {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
RCV <- {<*> <*> <*> <*> <*> 
<*> <*> <*>, uid: <*>, pid: <*> 
[SocketRead_<*>:<*>:<*>-<*>]broadcast(),and mReceivers <*>(android/null:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
onTransact in code is: <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
updateBarBgColor:emuiStyle=<*>,statusBarColor=#FFFCFCFC,navigationBarColor=#<*>, isEmuiLight=-<*> 
WeatherDynamicUpdater update before : <*> <*> <*> <*>, <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> 
action:com.baidu.input.entry.launcer, mPermissionType:<*> 
ambient lux=<*>.<*>,timeStamp =<*> 
Failed to open <*> <*> 
RCV <- {<*> <*> <*>} 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
[ReceiverDispatcher-<*>]send msg to remote srv success(android/null:<*>) 
<*> <*> pid: <*>, euid: <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:WriteSdkGroupItem: hash <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) connecting max <*> to uc.huawei.com:<*> 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to ip address uc.huawei.com/<*>.<*>.<*>.<*> 
pool-<*>-thread-<*>{<*>} BaseBroadcast.sendBroadcast(BaseBroadcast.java:<*>) no <*> <*> <*> 
<*> <*> is <*> 
RecentLogic{<*>} RecentLogic.addConversationEntity(RecentLogic.java:<*>) add chat recent! 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
showNotificationAll 
<*> <*> <*> 
No config file found <*> 
<*> <*> <*> <*> <*> U=<*> StackId=<*> <*> <*> <*> <*> <*> U=<*> StackId=<*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> flg=0x10 (has extras) } on bgkeyapp queue 
<*> <*> <*>, uid: <*>, pid: <*> 
<*> <*> <*> 
OEMINFO_TPCOLOR_TYPE FAIL! 
<*> Speaker protection disabled 
updateNotificationShade 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
Launcher.LauncherProvider launcher call - method:setAppBadgeCount arg:null <*> uid =<*> pid =<*> 
<*> <*> <*> 
[CheckNewVersionThread-<*>]retrieve newversioninfo.xml: 
@@@@@@@@@@@@ uid :<*> download <*> 
<*> <*> <*> <*> 
dispatch ordered broadcast [bgkeyapp] <*> <*> <*> has <*> receivers 
[FeedbackService.receiver.onReceive]End 
------------startInput-------------- 
<*> <*> <*> <*> 
<a href="http://www.huawei.com"> 
color: #<*>; 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> <*> <*> manager service. 
queryIntentActivitiesAsUser size results:<*>, for package:com.huawei.espacev<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
moveTaskToTop mTaskChanged:true 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
BoostFramework() : <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> (has extras) } 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> type is [<*>]! 
back light level before map = <*> 
Systrace:: buffer is full and will reset. 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:idle state change to <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path =>Access [/mnt/sdcard/sandbox/AnyOfficeSDK/sdk/QDJ7lEGuRlJb2r2mqrSExBTDjN4QhUgEPVptBL0HnX4=] real path ok 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> <*> <*> <*> 
LOAD QC_HUAWEI_ANTITHEFT_TA_PATH 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
[HttpClient.getDataWithRetryNoLogin] success 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
mManualbrightnessOut=<*>,mManualMode=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
current cell id is not monitor ..... cellid = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, <*> <*> blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
is3GCalling is false,mCdmaSlot is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> not in <*> <*> <*> <*> <*> <*> 
platform_can_split_snd_device: snd_device(<*>) num devices(<*>) new_snd_devices(<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
transferRemoteInputFocus: <*> 
setOverlap mOverlap:true, mDimmed:false 
state.clipTopAmount:<*>, i:<*> 
out_standby: exit 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
updateNotificationShade 
showTraffic 
transferRemoteInputFocus: <*> 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
mSimSubId:<*> onDataActivity: direction=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
Unfinished business... 
getNextIndex: <*>; from <*> to <*>; size: <*> 
receive data len = <*> 
receive data len = <*> 
begin 
begin 
receive data len = <*> 
loadType:<*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
DisplayPowerStatesetColorFadeLevel: level=<*>.3857098E-<*> 
scheduleAlarmLocked(<*>, false) 
onFinishedGoingToSleep(<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> = <*> 
writeSummaryFromParcelLocked, IType:<*>, mGsmCsCallTimeLen:<*> 
writeSummaryFromParcelLocked, duration: <*> 
writeSummaryFromParcelLocked 
writeSummaryFromParcelLocked, duration: <*> 
<*> <*> <*> 
<*> package name <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
isWiredHeadsetOn... 
MSG_QUERY_TCP_INFO called,count:<*> 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
handleBatteryUpdate 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.open(Native Method) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
doTemperatueWarning, health:<*> 
Apply window <*> <*> 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
isSimPinSecure mSimDatas is null or empty 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
sendImmediateMessage <*> 
<*> <*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
Error reading charge file 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> state = <*>, <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
receive data len = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> = true 
keyguardDone(true) 
remove:kg_policy_pswd_pin_patten_x0_<*> 
disable: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
setBackgroundAlpha:alpha=<*>.<*> 
Apply window without WALLPAPER 
<*> <*> <*> <*> <*> <*> (has extras) } 
<*> <*> <*> <*> <*> 
apply skiped :<*> 
receive data len = <*> 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> 
selectOutput() commonFlags for output <*>, <*> 
<*> <*> <*> stream <*>, <*> <*> <*> <*> <*> <*> <*> <*> 
huawei_cust_set_parameters: exit with code(<*>) 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
<*> <*> <*> <*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
<*> not in <*> <*> <*> <*> <*> <*> 
0xcd, 0xb0, 0x24, 0x3e 
sendMessage <*> 
mStatsXtProcUid: /proc/net/comm/stats does not exist! 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
StartupResidentService:InnerHandler Message:<*> 
begin 
Calling a method in the system process without a qualified user: android.app.ContextImpl.startService:<*> android.content.ContextWrapper.startService:<*> <*> <*> <*> 
<*> when=<*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> 
RCV <- {<*> <*> Tethering stats list completed} 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
mManualbrightnessOut=<*>,mManualMode=false 
QSEECom_send_cmd return! 
<*> <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*> 
at com.tencent.mm.model.ak$<*>.a(SourceFile:<*>) 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
is3GCalling is false,mCdmaSlot is -<*> 
getOrInflateState subId:<*> 
MyOrientationListener: updateRotation. 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
transitionTo:mode=<*>, isEmuiStyle=false 
fingersense_touch_up() finished 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
obtain, mHwFlags=<*> 
LightSensor, enable, <*>: en=<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
updateSlider1 seekBarProgress:<*> 
<*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
selectOutput() commonFlags for output <*>, <*> 
selectOutput() commonFlags for output <*>, <*> 
selectOutput() commonFlags for output <*>, <*> 
<*> <*> <*> <*> 
<*> <*> <*> type <*> <*> <*> <*> <*> 
select_devices: done 
Apply window Height MATCH_PARENT 
updateNotificationShade 
setOverlap mOverlap:true, mDimmed:false 
<*> <*> <*> <*> <*> <*> ......ID <*>,<*>-<*>,<*> <*> <*> <*> <*> <*> <*> <*> <*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
state.clipTopAmount:<*>, i:<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
state.clipTopAmount:<*>, i:<*> 
cancelNotificationLocked,remove =com.tencent.mm 
<*> <*> <*> <*> == null?true 
cancelNotification,index:-<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> type <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> <*> <*> <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
mSimSubId:<*> onDataActivity: direction=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
begin of formatChinaDateRange <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
BadgeContentObserver getBadgeNumber: <*> mComponentName :ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
getOrInflateState subId:<*> 
<*> <*> <*> 
<*> <*> <*> visible: false 
<*> <*> <*> = true <*> <*> 
Launcher doResumeWork() 
obtain, mHwFlags=<*> 
TaskController:onLocationSuccess 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> is <*> 
<*> <*> <*> <*> <*> <*> <*> need to <*> <*> <*> = <*> , <*> = <*> 
mThermalService is NULL! 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
suspendAutohide 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> 
<*> <*> <*> 
Canceling vibration. 
onBlurFinish 
setProgress: <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
state.clipTopAmount:<*>, i:<*> 
state.clipTopAmount:<*>, i:<*> 
updateDimmedActivatedHideSensitive overlap:true 
Split enqueueing broadcast <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Provider.call: getPrefString 
<*> <*> <*> 
onNotificationVisibilityChanged called 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
<*> <*> <*> OK ! 
Invalid profile no. <*>, total profiles <*> only 
setRequest ProviderRequest[OFF] 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: true 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
at android.database.sqlite.SQLiteConnectionPool.open(SQLiteConnectionPool.java:<*>) 
setProgress: <*> 
<*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
state.clipTopAmount:<*>, i:<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
isSimPinSecure mSimDatas is null or empty 
<*> <*> <*> <*> <*> 
receive data len = <*> 
send data return = <*> 
qsc_send_cmd finish 
<*> <*> <*> 
stopMonitoringMotionLocked() 
Reading a NULL string not supported here. 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onFinishedGoingToSleep(<*>) 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mStatsXtProcUid: /proc/net/comm/stats does not exist! 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
TelecomServiceImpl: isInCall callState is <*>: <*> 
updateNotificationShade 
hideTraffic 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
The tag is null error! 
<*> <*> <*> = <*>.<*> 
set notification panel padding = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isWiredHeadsetOn... 
updateChargingLocked: charging=false 
ACTION_BATTERY_CHANGED pluggedType: <*> 
<*> <*> pluggedType: <*> 
BatteryIntent received: android.intent.action.BATTERY_CHANGED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
at java.io.FileInputStream.open(Native Method) 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
set notification panel padding = <*> 
Handle message: <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*>|rebuild notification 
isWiredHeadsetOn... 
set notification panel padding = <*> 
<*> <*> <*> [<*>, <*>] 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateDimmedActivatedHideSensitive overlap:false 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
<*>|logicalDealBroadcastEvent : Intent { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) } 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateTint: tint=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
activate called handle:<*> enable:<*> 
<*> <*> <*> <*> 
Reading a NULL string not supported here. 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> <*> 
send data return = <*> 
set notification panel padding = <*> 
receive data len = <*> 
state.clipTopAmount:<*>, i:<*> 
setClipY <*> 
batch,<*>,handle <*>, timeout:<*> ,period_ns:<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
huawei_cust_get_parameters: returns 
Animating brightness: target=<*>, rate=<*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
setScrollingEnabled: true 
instantCollapse 
<*> <*> <*> = false 
<*> <*> <*> <*> <*> <*> <*> 
CtrlSocket Receiver,disable: false locked: <*> <*> <*> mSmartKeyguardLevel: normal_level mStartPowerSaving: <*> 
applyIconTint ignore 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send udp detect packet ok when login,id:[<*>];count:[<*>]! 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<*>|rebuild notification 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
<*> <*> ==================== TCP CLIENT DISCONNECT ==================== 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
shouldBlockLocation running ... 
trim <*> <*> <*> <*> <*> <*> <*> 
stopNavigating, mStarted=false 
SND -> {<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> mode to <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
receive data len = <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> calling driver <*> 
<*> <*> = <*> 
Heartbeat timer.timers{<*>} XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
<*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>}, <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>}, <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ambient lux=<*>.<*>,timeStamp =<*> 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
transitionTo:mode=<*>, isEmuiStyle=false 
onTransact in code is: <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
<*> temp_new :<*> temp_old :<*> 
action:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, mPermissionType:<*> 
ambient lux=<*>.<*>,timeStamp =<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
onCellLocationChanged 
shouldBlockLocation running ... 
t:false, fl: false, p: <*>, ce: true, we: false 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
getCurrentCellid type type = PHONE_TYPE_GSM 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
handleDreamLocked 
received broadcast <*> 
cancelNotification,index:-<*> 
c: true, w: false, t: false, l: false 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
<*> cellid = <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
m1: false 
<*> <*> = false 
<*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
csr 
m1: false 
onCellLocationChanged 
current cell id is not monitor ..... cellid = <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
Change in state from: <*> <*> 
isCurrentBySim()=false 
DeviceStateListener:MyCityChanged: true 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
shouldBlockLocation running ... 
t:false, fl: false, p: <*>, ce: true, we: false 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
mFirstValidAuto=true,mAutoIntervened=falsemfastAnimtionFlag=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*> 
obtain, mHwFlags=<*> 
obtain, mHwFlags=-<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> <*> app 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> <*> <*> cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
keyAppBroadcastQueueForIntent intent Intent { act=com.tencent.mm.ui.ACTION_ACTIVE flg=0x10 (has extras) } on bgkeyapp queue 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> = false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
send_cmd_kernel: cmd=<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
MyOrientationListener: updateRotation. 
moveTaskToTop mTaskChanged:true 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
<*> <*> <*> <*> <*> size is <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
<*>|rebuild notification 
csr 
t:false, fl: false, p: <*>, ce: true, we: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
at com.tencent.mm.model.ak$<*>.a(SourceFile:<*>) 
sendEvent:action=<*>, flag=<*> 
<*> { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mAmbientLuxValid=true,mWakeupFromSleep= false 
Animating brightness: target=<*>, rate=<*> 
Client requesting input be hidden, pid=<*> 
ContentChange for slot: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
ContentChange for slot: <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
<*> <*> <*> policy manager service. 
ambient lux=<*>.<*>,timeStamp =<*> 
######### CMD_QUERY_PKTS ######## 
isCurrentBySim()=false 
------------startInput-------------- 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> 
action:com.huawei.android.action.WEATHER_CHANGE, mPermissionType:<*> 
<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
HwLocationManager:onLocationChanged.ThirdLocation 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
at com.baidu.location.g.a$a.handleMessage(Unknown) 
ambient lux=<*>.<*>,timeStamp =<*> 
<*> <*> <*> <*> sweep <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
getOrInflateState subId:<*> 
Split enqueueing broadcast <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
action:com.huawei.android.action.alarm_weather, mPermissionType:<*> 
chinaDateTime:上午<*>:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> = <*> 
<*> <*> <*> <*> <*> Intent { <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> uid = <*> <*> = <*> 
collectReceiverComponents, callerApp: ProcessRecord{<*> <*>:com.baidu.input_huawei/u0a74}, intent:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, receiver size:<*>, flags: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
getOrInflateState subId:<*> 
<*> = false, <*> = <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> <*> (has extras) } on bgkeyapp queue 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
not 3G net type. do nothing. 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
transitionTo:mode=<*>, isEmuiStyle=false 
obtain, mHwFlags=<*> 
obtain, mHwFlags=<*> 
received cell-signal:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Launcher.LauncherProvider queried count: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> does not <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> manager service. 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Moving <*> <*> <*> <*> <*> <*> <*> <*> <*> 
playingUids: 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> (has extras) } 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
mode <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> 
mManualAmbientLux =<*>,mNeedUpdateManualBrightness1=true 
writeFile, file_len=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
read Events <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
bh1745-light calling driver setDelay <*> ms 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
<*> <*> <*> <*> <*> <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*> 
obtain, mHwFlags=<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
updateSlider1 seekBarProgress:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
DynamicUpdater registerReceiver 
<*> <*> <*> = false 
<*> <*> <*> <*> <*> <*> app:id/msim_status_bar_operators_card_one_id} 
WeatherDynamicUpdater update before : <*> <*> <*> <*>, <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> u0 euid: <*> <*> <*> euid: <*> 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> <*> <*> cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ambient lux=<*>.<*>,timeStamp =<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> 
get_spk_pa_type: pa is max<*> 
<*> not in <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> 
mTiffStream skip = <*> 
start_output_stream: exit 
worker idle 
qsc_send_cmd finish 
onAcquired(<*>) 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
Animating brightness: target=<*>, rate=<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
<*> <*> = true 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
isSimPinSecure mSimDatas is null or empty 
TelecomServiceImpl: isInCall callState is <*>: <*> 
updateNotificationShade 
<*> <*> <*> <*> <*> 
showNotificationAll 
showPrimarySecurityScreen() 
getNextIndex: <*>; from <*> to <*>; size: <*> 
The tag is null error! 
The tag is null error! 
<*> wakelock uid = <*> pid = <*> 
ChargingSpeed Wattage: <*> ST: <*> --> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> action = null package name <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
<*> <*> <*> visible: false 
<*> <*> <*> <*> <*> 
chinaDateTime:上午<*>:<*> 
Error reading charge file 
Cache monitor msg as screen_off 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
begin of formatChinaDateRange <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
check dependency pid: <*> is depended by pid: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> wakelock uid = <*> pid = <*> 
<*>|getTodayTotalSteps <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
Error reading charge file 
at java.io.FileInputStream.open(Native Method) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<*>|onStandStepChanged <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
disableEffects=null canInterrupt=false once update: false 
updateTint: tint=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
updateTint: tint=<*> 
isCardAbsent slot:<*> slotState:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
showNotificationAll 
getOrInflateState subId:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
mVSimCurCardType is -<*> 
<*> cellid = <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
Report temperature: [charger_ic] temp :<*> report_threshold:<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
DefaultState what=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = low_battery,pkg =com.android.systemui,id =<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
ChargingSpeed Wattage: <*> ST: <*> --> <*> 
Handle message: <*> 
act:android.intent.action.TIME_TICK flag:<*> FLAG_IS_FIRST_POWER_OFF_ALARM=false android.intent.extra.ALARM_COUNT=<*> 
mDateString is: <*>月<*>日星期日 
<*> <*> <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Couldn't create directory for SharedPreferences file /data/user_de/<*>/com.android.settings/shared_prefs/caStatePreferences.xml 
<*>|MSG_RECORD_DATA_TO_FILE 
<*>|compensate received 
<*> <*> <*> <*> <*> trigger action = <*> package name <*> <*> 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
setRequest ProviderRequest[OFF] 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> <*> <*> <*> <*> pid: <*> 
showNotificationAll 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*>|compensate <*> <*> 
Handle message: <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
<*>|compensate <*> <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
removeNotificationChildren 
set notification panel padding = <*> 
<*> TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
<*> <*> Connect to server <*> <*> <*> <*> = <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> <*> <*> <*> pid: <*> <*> <*> 
<*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|compensate received 
updateTint: tint=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
Broadcasting intent ACTION_RAC_CHANGED 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
onAcquired(<*>) 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*>|rebuild notification 
<*> <*> <*> <*> 
HWCDisplay::SetPowerMode: display = <*>, mode = <*> 
<*> <*> <*> status = <*>, id = <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, <*> <*> screenAutoBrightness=<*>, userId=<*> 
send data return = <*> 
write <*> failed 
apply skiped :<*> 
qsc_decode end 
setOverlap mOverlap:true, mDimmed:false 
setLift <*>.<*> 
setAlarmsAdjust ... 
read from oem info: data_readback 
resumeSuspendedAutohide 
platform_can_split_snd_device: snd_device(<*>) num devices(<*>) new_snd_devices(<*>) 
DynamicUpdater call updateFolder 
CollectorManager--isCollectorEnabled--getBoolean: false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
CtrlSocket processCtrlSocket pid = <*> cmd = <*> param = <*> ret = <*> 
<*> <*> <*> <*> <*> 
HwPanelView restoreDrawState 
updateClipping isOverlap:false 
DefaultState what=<*> 
begin 
<*> <*> <*> <*> <*> <*> <*> <*> <*> line <*> QMI_LOC_GET_BEST_AVAILABLE_POSITION_REQ_V<*> 
disableEffects=null canInterrupt=false once update: false 
updateClipping isOverlap:false 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
read Events <*> 
begin 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
transferRemoteInputFocus: <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
WatchThread{<*>} TcpCirChannel.connect(TcpCirChannel.java:<*>) Connect to server address = [uc.huawei.com,] port = <*> 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
action:com.huawei.android.action.WEATHER_CHANGE, mPermissionType:<*> 
Split enqueueing broadcast <*> <*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
receive data len = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> is null 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
To broadcast an Intent via the notifier to external apps 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) Login_By_Step-> at <*> 
is3GCalling is false,mCdmaSlot is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>} <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> app:id/msim_status_bar_operators_card_one_id} 
GetAddrInfoHandler addr: uc.huawei.com {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> 
formatChinaDateTime equals. 
Report temperature: [charger_ic] temp :<*> report_threshold:<*> 
getOrInflateState subId:<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
updateSlider2 seekBarProgress:<*> 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
updateSlider1 seekBarProgress:<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
updateSlider1 seekBarProgress:<*> 
updateSlider2 seekBarProgress:<*> 
updateSlider1 seekBarProgress:<*> 
updateSlider1 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
ContentChange for slot: <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
back light level before map = <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
updateSlider2 seekBarProgress:<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
mSeekListener onProgressChanged progress:<*> fromUser:false 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
APS: 2DSDR: <*> <*> <*> <*> SDR ratio 
BoostFramework() : <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{<*> <*>:com.baidu.input_huawei/u0a74} 
<*> <*> <*> 
<*> <*> <*> type <*> <*> id <*> 
<*> id <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> = <*>, <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
enter ois_get_vibrate_status_func 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> int, int, <*> <*> 
<*> <*> <*> <*> <*> <*> int, int, <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> int, int, <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> *, int, int, <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> *, int, int, <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> *, int, int, <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> = <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> void *, int, int, <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> void *, int, int, <*> <*> 
isAutoSceneRunning false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> <*> <*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
<*> <*> <*> <*> <*> <*> = <*>.<*> 
<*> <*> <*> <*> <*> <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
<*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> void *, int, int, <*> char *, <*> <*> <*> <*> = <*>, <*> <*> <*> width = <*>, height = <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> <*> <*> <*> = <*>, <*> = <*> 
isAutoSceneRunning false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> 
<*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> <*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> *, void *, int, int, int) <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> *, void *, int, int, int) <*> 
<*> <*> void *, int, int, <*> char *, <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> *, void *, int, int, int) <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> = <*>.<*> 
ois_process: OIS_GET_VIBRATE_STATUS 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> <*> 
<*> <*> <*> *, void *, int, int, int) <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
<*> <*> <*> *, void *, int, int, int) <*> 
<*> <*> <*> <*> <*> <*> = <*> 
<*> <*> void *, int, int, <*> char *, <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> 
virtual void android::IppAlgoSmartAE::onNewArrival(void *, void *, int, int, int) <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> = <*> 
<*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> 
<*> <*> <*> <*> <*> <*> = <*>, <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
virtual void android::IppAlgoSmartAE::onNewArrival(void *, void *, int, int, int) <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> void *, int, int, const char *, <*> <*> <*> <*> = <*>, <*> <*> <*> width = <*>, height = <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
isAutoSceneRunning false 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> <*> <*> <*> = <*>, <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> 
<*> <*> <*> <*> 
ois_process: OIS_GET_VIBRATE_STATUS 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> 
<*> <*> void *, int, int, const char *, <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> = <*> 
ois_process: OIS_GET_VIBRATE_STATUS 
virtual void android::IppAlgoSmartAE::onNewArrival(void *, void *, int, int, int) <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
isAutoSceneRunning false 
<*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> 
<*> <*> <*> = -<*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> 
isAutoSceneRunning false 
<*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) enter 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
void android::HwAlgorithmicInformation::setSmartAeInfo(int, <*> <*> <*> = <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
virtual void android::IppAlgoSmartAE::onNewArrival(void *, void *, int, int, int) <*> 
<*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> void *, int, int, const char *, <*> <*> <*> <*> = <*>, <*> <*> <*> width = <*>, height = <*>, <*> <*> <*> param = <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> 
<*> <*> <*> <*> 
enter ois_get_vibrate_status_func 
ois_process: OIS_GET_VIBRATE_STATUS 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> <*> <*> <*> = <*>, <*> = <*> 
isAutoSceneRunning false 
isAutoSceneRunning false 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) enter 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> 
<*> <*> <*> <*> <*> <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> <*> <*> <*> = <*>, <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
isAutoSceneRunning false 
HoldService:checkBeforeShowDialogWithPid, current <*> <*> <*> 
void qcamera::IppAlgoColorEffect::onNewArrival(int, void *, int, int, const char *, <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
void android::HwAlgorithmicInformation::setSmartAeInfo(int, <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
<*> <*> <*> <*> <*> <*> = <*>.<*> 
<*> <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
virtual void android::IppAlgoSmartAE::onNewArrival(void *, void *, int, int, int) enter 
out_get_latency: Latency <*> 
<MCT >< <*> <*> <*> <*> <*> <*> 
isAutoSceneRunning false 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> = <*> 
<*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> <*> 
getOrInflateState subId:<*> 
isAutoSceneRunning false 
<*> <*> <*> <*> <*> <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> 
void android::HwAlgorithmicInformation::setSmartAeInfo(int, <*> <*> <*> = <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
void android::HwAlgorithmicInformation::setSmartAeInfo(int, <*> <*> <*> <*> = <*>, <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
void qcamera::IppAlgoColorEffect::onNewArrival(int, void *, int, int, const char *, <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> <*> 
enter ois_get_vibrate_status_func 
virtual void android::IppAlgoSmartAE::onNewArrival(void *, void *, int, int, int) exit 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
isAutoSceneRunning false 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
isAutoSceneRunning false 
<*> <*> <*> int*) const <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
virtual void android::IppAlgoSmartAE::onNewArrival(void *, void *, int, int, int) exit 
<MCT >< INFO> <*>: mct_controller_handle_SOF_proc: <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> <*> <*> <*> = <*>, <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> <*> 
enter ois_get_vibrate_status_func 
void android::HwAlgorithmicInformation::setSmartAeInfo(int, <*> <*> <*> = <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> <*> <*> <*> = <*>, <*> = <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) enter 
<MCT >< INFO> <*>: mct_controller_handle_SOF_proc: <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> = <*> 
<*> <*> <*> void *, int, int, const char *, <*> <*> <*> <*> = <*>, <*> <*> <*> width = <*>, height = <*>, <*> <*> <*> param = <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
isAutoSceneRunning false 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> 
<*> <*> <*> <*> 
int android::IppAlgoSmartAE::doSmartAEAlgo(unsigned char *, void *, int, int, int) <*> <*> 
<*> <*> <*> <*> 
ois_process: OIS_GET_VIBRATE_STATUS 
static void <*> <*> <*> <*> = <*> 
void android::HwAlgorithmicInformation::setSmartAeInfo(int, int*, SmartAE_EXIF_INFO_t*), <*> = <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
void qcamera::IppAlgoColorEffect::onNewArrival(int, void *, int, int, const char *, <*> <*> <*> <*> <*> <*> 
isAutoSceneRunning false 
<*> <*> <*> <*> <*> <*> <*> 
scheduleCheckFreezeScreen sendMessageDelayed 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> uid = <*>, <*> = <*> 
<MCT >< <*> <*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> 
<*> <*> <*> 
enter ~MakeupLibLoader() 
enter setFunsToDefault() 
mrc_cg_NiceFood_ippUnInitialize In! 
MSG_QUERY_TCP_INFO called,count:<*> 
Received kernel message payload: event <*> 
<MCT >< INFO> <*>: <*> <*> <*> <*> <*> <*> <*> 
<MCT >< INFO> <*>: <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> : <*> 
<*> <*> <*> <*> euid: <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> <*> 
action:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, mPermissionType:<*> 
<*> <*> is abandoned for memory <*> 
isCardAbsent slot:<*> slotState:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
fingersense_classify_touch() finished 
Calling fingersense_classify_touch() 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> 
m1: false 
c: true, w: false, t: false, l: false 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
Change in state from: <*> <*> 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
To broadcast an Intent via the notifier to external apps 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
is3GCalling is false,mCdmaSlot is -<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
onReceive: action = android.intent.action.LTE_CA_STATE 
received cell-signal:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
bright trace:<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*> 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
c: true, w: false, t: false, l: false 
PowerManagerNotifier onWakefulnessChangeStarted: wakefulness=<*>, reason=<*>, <*> <*> <*> 
<*> = false 
<*> <*> <*> 
send data return = <*> 
begin 
receive data len = <*> 
begin 
java.lang.Exception 
at android.os.Handler.handleCallback(Handler.java:<*>) 
at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<*>) 
DisplayPowerState Updating <*> <*> <*> <*> 
DisplayBase::SetDisplayState: Set state = <*>, display <*> 
set(null) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
updateLightsLocked --> level:<*>, status:<*> 
<*> <*> <*> = false 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
proxyBroadcast:[com.huawei.espacev2] proxy:true 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
csr 
isCurrentBySim()=false 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
acquire lock=<*>, flags=0x1, <*> <*> <*> ws=null, uid=<*>, pid=<*> 
closeQs 
setScrollingEnabled: true 
Fingerprint timeout 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
tryUpdateKeyguardWallpaperWithMask::useMask=<*>, avgColorType=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
need to force refresh view 
at java.io.FileInputStream.open(Native Method) 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
Error reading charge file 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Rac Change (PDC) data: [<*>, <*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
formatChinaDateTime equals. 
acquire lock=<*>, flags=0x1, tag="hibernation", name=com.huawei.powergenie, ws=null, uid=<*>, pid=<*> 
addFreezeProcess pkg:com.android.browser 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
isCurrentBySim()=false 
applyIconTint ignore 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
|CORE| CNE received unexpected action: android.intent.action.BATTERY_CHANGED 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
at java.io.FileInputStream.open(Native Method) 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Couldn't create directory for SharedPreferences file /data/user_de/<*>/com.android.settings/shared_prefs/caStatePreferences.xml 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
KGSvcFp onAuthenticationAcquired.<*> 
<*> <*> to <*> 
<*> <*> <*> <*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
Remaining Num Attempts = <*> 
onAcquired <*> 
qsc_send_cmd finish 
Remaining Num Attempts = <*> 
generateAddAnimation:null, false 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
refreshState=airplane, BooleanState[,icon=ResourceIcon[resId=0x7f0201af],label=飞行模式,labelTint=<*>,textChangedDelay=<*>,contentDescription=飞行模式,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false] 
begin 
<*> <*> <*> <*> 
qsc_decode end 
<*> = false, <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> ms 
apply skiped :<*> 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
ACDB -> <*> 
ACDB -> <*> = <*> 
[UserPresentReceiver.onReceive]Start! 
CollectorManager--isCollectorEnabled--getBoolean: false 
<*> <*> <*> <*> <*> <*> <*> <*> 
platform_set_parameters: enter: - <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
tcp.recv{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown output: java.net.SocketException: Socket is closed 
<*> TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event <*> 
process buffer and get message 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> is null 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
receive data len = <*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
<*> <*> type = -<*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Animating brightness: target=<*>, rate=<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
back light level before map = <*> 
updateSlider2 seekBarProgress:<*> 
updateSlider2 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
ContentChange for slot: <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
Finished business... 
ContentChange for slot: <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
showNotificationAll 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> do not need to <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
c: true, w: false, t: false, l: false 
updateRotationUnchecked(alwaysSendConfiguration=false) 
t:false, fl: false, p: <*>, ce: true, we: false 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
formatChinaDateTime, change to China <*> 
m1: false 
MSG_QUERY_TCP_INFO called,count:<*> 
not in link monitoring mode, ignore TCP result . 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
csr 
back light level before map = <*> 
InputDispatcher::monitor frozen check! 
collectReceiverComponents, callerApp: ProcessRecord{<*> <*>:com.baidu.input_huawei/u0a74}, intent:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, receiver size:<*>, flags: <*> 
FingerprintService authenticate 
onStartedGoingToSleep 
send data return = <*> 
qsc_decode end 
at com.huawei.keyguard.support.magazine.MagazineWallpaper$BgPicLoader$<*>.run(MagazineWallpaper.java:<*>) 
<*> <*> <*> <*> <*> <*> 
Reading a NULL string not supported here. 
scheduleLightAlarmLocked(<*>) 
Invalid profile no. <*>, total profiles <*> only 
AwareMem_DMEServer: stop 
<*> <*> rt=<*>/<*> <*> <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
<*> <*> <*> <*> <*> 
MemoryRecoveryDMEPlugin: <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
BatteryIntent received: android.intent.action.BATTERY_CHANGED 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
TelecomServiceImpl: isInCall callState is <*>: <*> 
Apply window Height MATCH_PARENT 
onSignal: mSubId=<*>,currDataSubID=<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
m1: false 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Remaining Num Attempts = <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> called handle:<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
c: true, w: false, t: false, l: false 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
begin 
Apply window Height MATCH_PARENT 
<*> <*> <*> 
resetPagerState 
qsc_send_cmd finish 
selectOutput() commonFlags for output <*>, <*> 
<*> <*> <*> pid:<*> uid:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
huawei_audio huawei_choose_Handset_device_incall_forHWtest: test Type =<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
batch:sensor(android.sensor.accelerometer) sample_rate=<*>.999925Hz report_rate_f=<*>.000000Hz curr sample rate:<*>.<*> cur rpt rate:<*> max:<*>.<*> min:<*>.<*> 
Apply window Height MATCH_PARENT 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
<*> <*> <*> <*> type <*> for Event <*>, with Raise=<*> 
ACDB -> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
mFilterMsgFlag: <*>,msg.arg1: <*> 
<*> <*> <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
<*>| ## MSG_DEAL_SYSTEM_EVENT <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
WatchThread{<*>} TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
send data return = <*> 
<*> <*> = true 
<*> took <*> ms 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
c: true, w: false, t: false, l: false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onSignal: mSubId=<*>,currDataSubID=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
read Events <*> 
EventHub monitor: no key events in the past <*> no motion events in the past <*> 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
<*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
MSG_QUERY_TCP_INFO called,count:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
ContentChange for slot: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
isCardAbsent slot:<*> slotState:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
Received kernel message payload: event <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
ImsServiceSubHandler : Message received: what = <*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
[UploadProgressUtils.queryProcessUploadItems]start 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
not 3G net type. do nothing. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> mBatteryLevel=<*> 
ChargingSpeed Wattage: <*> ST: <*> --> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
allowVideoCallsInLowBattery: false isCarrierOneSupported: false mIsLowbattery: false 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Finished business... 
onSignal: mSubId=<*>,currDataSubID=<*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
mTiffStream skip = <*> 
handleNotifyStartedGoingToSleep 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
begin 
<*> <*> <*> <*> <*> to <*> 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper$<*>.onMagazinePicLoaded(KeyguardWallpaper.java:<*>) 
DisplayPowerState :OFF 
<*> <*> <*> <*> <*> 
SleepPolicy:<*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
updateLightsLocked,turn off notificationLight 
<*> exit with code(<*>) 
ApStaDisabledState what=<*> 
<*> <*> <*> <*> <*> 
is Beta User, userType = <*> 
<*> <*> <*> 
<*> :: Data <*> <*> <*> <*> 
create: <*> 
msg = <*> received 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, <*> <*> screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> <*> <*> 
activate called handle:<*> enable:<*> 
LightSensor, enable, <*>: mEnabled=<*> 
stopMonitoringMotionLocked() 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
m1: false 
onDataActivity: direction=<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=true, brightnessWaitRet=false, screenAutoBrightness=<*>, userId=<*> 
template id:<*> 
receive data len = <*> 
onAuthenticated(fid=<*>, gid=<*>) 
notifyScreenTurnedOn 
<*> <*> <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> 
current cell id is not monitor ..... cellid = <*> 
create: <*> 
updateNotificationShade 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) connecting max <*> to uc.huawei.com:<*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
isCurrentBySim()=false 
onDataActivity: direction=<*> 
QOS_level:<*>(<*>),use RAT:4G;signalLvl:<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
c: true, w: false, t: false, l: false 
c: true, w: false, t: false, l: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
updateRotationUnchecked(alwaysSendConfiguration=false) 
MyOrientationListener: updateRotation. 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
m1: false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
getOrInflateState subId:<*> 
BoostFramework() : <*> <*> <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
Calling fingersense_touch_up() 
<*> <*> is im app and connected ok, delay to H! 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
getTempInfo error: null, <*> 
mSendService start 
updateBarBgColor:emuiStyle=<*>,statusBarColor=#FF303135,navigationBarColor=#FF000000, isEmuiLight=-<*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> (has extras) } 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*>, state = <*> 
Create obj success use class android.app.HwCustNotificationImpl 
huawei_cust_get_parameters: returns 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> <*> type = <*> 
isCloneProcess = false 
showNotificationAll 
setOverlap mOverlap:true, mDimmed:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
BadgeContentObserver getBadgeNumber: <*> mComponentName :ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
out_get_latency: Latency <*> 
GenericSource::disconnect begin 
Pid:<*> deleteTrackName(<*>) 
is3GCalling is false,mCdmaSlot is -<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
fingersense_touch_up() finished 
playSoundEffect effectType: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
Moving to <*> <*> <*> <*> <*> <*> <*> <*> 
setSystemUiVisibility <*> <*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Client requesting input be hidden, pid=<*> 
selectOutput() commonFlags for output <*>, <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
<*> <*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> 
ACDB -> <*> 
Unfinished business... 
FingerprintService cancelAuthentication 
<*> <*> <*> <*> 
setLivenessSwitch:start 
<*> <*> <*> 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper.-wrap4(KeyguardWallpaper.java) 
at com.huawei.keyguard.util.BitmapUtils.getSuggestColorInfo(BitmapUtils.java:<*>) 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
at android.os.Looper.loop(Looper.java:<*>) 
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*> 
RefreshBatteryInfo isBatteryLow: <*> 
Releasing suspend blocker <*> 
<*> <*> <*> <*> <*> 
Apply window Height MATCH_PARENT 
updateNotificationShade 
sendMessage <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> dreaming: <*> <*> <*> 
<*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
Change to single clock mode! 
onShowStatusChange show:false 
send_cmd_kernel: cmd=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
isCurrentBySim()=false 
create: <*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
create: <*> 
handle_exception_events enter 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
msg = <*> received 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
set notification panel padding = <*> 
msg = <*> received 
updateTint: tint=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Rac Change (PDC) data: [<*>, <*>] 
<*> <*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
Model onReceive <*> { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) } 
Error reading charge file 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
process buffer and get message 
isCurrentBySim()=false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*>|before compensate: cache step_<*> 
<*>|rebuild notification 
disableEffects=null canInterrupt=false once update: false 
process buffer and get message 
Error reading charge file 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Error reading charge file 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg 28TCP_OK 
Error reading charge file 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onStepCounterChange stepsNum:<*> 
<*>|before compensate: cache step_<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
isCurrentBySim()=false 
To broadcast an Intent via the notifier to external apps 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
removeNotificationChildren 
hideTraffic 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
formatChinaDateTime equals. 
formatChinaDateTime, change to China <*> 
mDateString is: <*>月<*>日星期日 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
disableEffects=null canInterrupt=false once update: false 
Create obj success use class android.app.HwCustNotificationImpl 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
applyIconTint ignore 
Cache monitor msg as screen_off 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
need to force refresh view 
getOrInflateState subId:<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
<*> <*> <*> <*> sweep <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
applyInPlace=true shouldPeek=false alertAgain=true 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
send: <*> 
send: <*> 
handle_exception_events enter 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
create: <*> 
send: <*> 
msg = <*> received 
process buffer and get message 
<*> <*> <*> 
[SocketRead_<*>:<*>:<*>-<*>]broadcast(),and mReceivers <*>(android/null:<*>) 
updateTint: tint=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
<*>|rebuild notification 
removeNotificationChildren 
transferRemoteInputFocus: <*> 
handleMessage CHECK_FREEZE_SCREEN_MSG 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateDimmedActivatedHideSensitive overlap:false 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
getConfigForPhoneId phoneId is invalid 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
handleDreamLocked 
received cell-signal:<*> 
<*> TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event <*> 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
applyIconTint ignore 
<*>|calculateAltitudeWithCache datas.size=<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
Error reading charge file 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Model onReceive user=UserHandle{<*>} 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>} <*> <*> <*> 
Change to single clock mode! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*>|rebuild notification 
requestLocationUpdates 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
To broadcast an Intent via the notifier to external apps 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> <*> <*> 
GetAddrInfoHandler addr: uc.huawei.com {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
csr 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
<*> <*> pluggedType: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
isCarrierConfigEnabled bundle is null 
allowVideoCallsInLowBattery: false isCarrierOneSupported: false mIsLowbattery: false 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
mVSimCurCardType is -<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateNotificationShade 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Couldn't create directory for SharedPreferences file /data/user_de/<*>/com.android.settings/shared_prefs/caStatePreferences.xml 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
begin of formatChinaDateRange <*> 
chinaDateTime:中午<*>:<*> 
<*>|calculateCaloriesWithCache totalCalories=<*> 
<*>|calculateAltitudeWithCache datas.size=<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
Handle message: <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
formatChinaDateTime equals. 
dispatch ordered broadcast [bgkeyapp] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> is not in the enum map, name = <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> mMaxValue=<*>, mMinValue=<*> 
updateClipping isOverlap:false 
update() updated: <*> 
set ordinal Value failed! name is not in the enum map, name = <*> 
<*> to get <*> <*> <*> <*> is not <*> 
is Beta User, userType = <*> 
create: <*> 
<*> id <*> 
<*> <*> <*> 
<*> <*> = <*>, <*> = <*>, <*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
process buffer and get message 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
applyInPlace=true shouldPeek=false alertAgain=true 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
PackAutoLog onPrePack 
updateDimmedActivatedHideSensitive overlap:false 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
queryIntentActivitiesAsUser size results:<*>, for package:com.huawei.espacev<*> 
<*> <*> <*> <*> <*> 
Change to single clock mode! 
m1: false 
<*>|before compensate: cache step_<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
<*>|rebuild notification 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*>|compensate <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
ACTION_BATTERY_CHANGED pluggedType: <*> 
received broadcast <*> 
<*> <*> <*> <*> <*> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
create: <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
getTempInfo error: null, <*> 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> 
<*> <*> <*> <*> 
<*>|compensate received 
getStatic,count:<*>,work status:false 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
sendMessage <*> 
<*>|before compensate: cache step_<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
updateClipping isOverlap:false 
<*>|getTodayTotalSteps <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
updateTint: tint=<*> 
Handle message: <*> 
at android.os.Looper.loop(Looper.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> <*> <*> 
Alarm triggering (type <*> <*> <*> <*> type <*> when <*> <*> 
chinaDateTime:中午<*>:<*> 
formatChinaDateTime equals. 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*>|calculateAltitudeWithCache datas.size=<*> 
transferRemoteInputFocus: <*> 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
sending broadcast to Pid = <*>, Uid = <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
sending alarm <*> type <*> when <*> com.tencent.mm},repeatInterval = <*>,listenerTag =null 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
received broadcast android.intent.action.TIME_TICK 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch <*> <*> <*> <*> 
no controller energy info supplied 
<*>|onStandStepChanged <*> 
<*> <*> <*> <*> <*> 
<*>|calculateCaloriesWithCache totalCalories=<*> 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
<*>|rebuild notification 
removeNotificationChildren 
<*> <*> <*> <*> <*> 
state is <*> 
c: true, w: false, t: false, l: false 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> state is <*> <*> <*> home data home 中国移动 中国移动 <*> 中国移动 中国移动 <*> <*> <*> <*> not supported <*> <*> RoamInd=<*> DefRoamInd=<*> EmergOnly=false IsDataRoamingFromRegistration=false 
setRegistedNetwork <*> 
<*> <*> <*> <*> <*> home data home 中国移动 中国移动 <*> 中国移动 中国移动 <*> <*> <*> <*> not supported <*> <*> RoamInd=<*> DefRoamInd=<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
TelecomServiceImpl: isInCall callState is <*>: <*> 
Watch Thread{<*>} <*> <*> 
<*> is empty 
NatTrafficNotifyService:delta byte = <*> no traffic delta = 0Traffic state is <*> 
######### CMD_QUERY_PKTS ######## 
|CORE| CNE received unexpected action: android.intent.action.BATTERY_CHANGED 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
<*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
setSimCardReady <*> 
<*> <*> <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
getOrInflateState subId:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> : false 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
<*> <*> to server <*> 
trim <*> <*> <*> <*> <*> <*> <*> 
java.lang.reflect.InvocationTargetException 
<*> <*> <*> <*> <*> 
set ordinal Value failed! name is not in the enum map, name = <*> 
<*> <*> <*> <*> when=<*> what=<*> <*> <*> <*> <*> 
ContentChange for slot: <*> 
getTypeIcon type:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true <*> activityIn:false activityOut:false isRoaming:false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, <*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true <*> activityIn:false activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
[RouteService.onDestroy] 
<*> = <*> 
<*> <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
received broadcast <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
RCV <- {<*> <*> Tethering stats list completed} 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> does not <*> 
at java.io.FileInputStream.open(Native Method) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
action:com.android.huawei.broadcast.HwRepairHelper, mPermissionType:<*> 
create: <*> 
Calling a method in the system process without a qualified user: android.app.ContextImpl.startService:<*> android.content.ContextWrapper.startService:<*> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
msg = <*> received 
isCurrentBySim()=false 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
StartupResidentService:InnerHandler Message:<*> 
onStartCommand com.huawei.lcagent.RESUME_UPLOAD 
StartupResidentService:InnerHandler Message:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> 
formatChinaDateTime, change to China <*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
[LogUploadService.onStartCommand] 
sending broadcast to Pid = <*>, Uid = <*> 
<*> <*> <*> 
cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> 
[main-<*>]HwOucApplication--onCreate, start(/HwOucApplication.java:<*>) 
<*> <*> <*> <*> 
<*> <*> is null <*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
<*> <*> <*> 
OEMINFO_TPCOLOR_TYPE FAIL! 
[CheckNewVersionThread-<*>]retrieve newversioninfo.xml: 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Sending non-protected broadcast <*> from system uid <*> pkg <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
Creating TransactionService 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
######### CMD_QUERY_PKTS ######## 
send_cmd_kernel: cmd=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
begin 
huawei_antiTheft_manager_init succeed 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
Error reading charge file 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*> <*> <*> 
setTracingEnabled:<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
Error reading charge file 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Error reading charge file 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
onReceive, action:android.intent.action.BATTERY_CHANGED 
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*> 
BatteryIntent received: android.intent.action.BATTERY_CHANGED 
refreshBatteryInfo: null 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
updateClipping isOverlap:false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
updateDimmedActivatedHideSensitive overlap:false 
Failing getSupportedFeatureset because HAL isn't started 
getTempInfo error: null, <*> 
<*> <*> <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag <*> 
<*> <*> <*> <*> <*> <*> 
sending broadcast to Pid = <*>, Uid = <*> 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
onCreate 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
CtrlSocket Receiver,disable: false locked: <*> <*> <*> mSmartKeyguardLevel: normal_level mStartPowerSaving: <*> 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
scheduleAlarmLocked(<*>, false) 
set(null) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
<*> <*> <*> state = false, <*> = null 
updateClipping isOverlap:false 
begin of formatChinaDateRange <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
<*> <*> is null 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
[SocketRead_<*>:<*>:<*>-<*>]broadcast(),and mReceivers <*>(android/null:<*>) 
at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<*>) 
at com.huawei.ecs.mip.proxy.TcpSocket.connect(TcpSocket.java:<*>) 
QOS_level:<*>(<*>),DataDisable;use level-<*> 
isCurrentBySim()=false 
<*> : <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[HttpClient.login]redirect : 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> Failed to connect to <*> 
Model onReceive user=UserHandle{<*>} 
updateTint: tint=<*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
moveDataForNVersion isNVersion 
StartupResidentService:InnerHandler Message:<*> 
handleMessage(<*>) 
StartupResidentService:InnerHandler Message:<*> 
<*>|action android.net.conn.CONNECTIVITY_CHANGE 
<*>|logicalDealBroadcastEvent : Intent { <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> is not <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> = false <*> = false <*> = <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
registerAudioFocusListener... 
<*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> <*> <*> <*> <*> 
platform_can_split_snd_device: snd_device(<*>) num devices(<*>) new_snd_devices(<*>) 
ACDB -> <*> <*> <*> <*> 
Launcher.LauncherProvider queried count: <*> 
out_get_latency: Latency <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
proxyBroadcast:[com.huawei.espacev2] proxy:true 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
release:lock=<*>, flg=0x0, tag="hibernation", name=com.huawei.powergenie", ws=null, uid=<*>, pid=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> = <*> 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> 
action:android.provider.Telephony.SMS_RECEIVED, mPermissionType:<*> 
<*> <*> <*> <*> 
notifyDatasetChanged 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ScreenState <*> 
[SmsProvider.query]读取短信数据 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> uid: <*>, pid: <*> 
GenericSource::disconnect begin 
selectOutput() commonFlags for output <*>, <*> 
selectOutput() commonFlags for output <*>, <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> int, int, const <*> <*> <*> <*> <*> <*> 
at android.media.MediaPlayer.postEventFromNative(MediaPlayer.java:<*>) 
<*> <*> <*>, <*>), <*> <*> <*> 
<*> <*> <*> <*> = <*>, state = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> type <*> for Event <*>, with Raise=<*> 
<*> <*> <*> <*> <*> <*> 
Report temperature: [ap] temp :<*> report_threshold:<*> 
<*> <*> <*> int, int, const <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
out_standby: exit 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
stopMonitoringMotionLocked() 
getTempInfo error: null, <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|calculateCaloriesWithCache totalCalories=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =time_tick 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
set(null) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
hideTraffic 
setActionsBackground,null == view,mPublicLayout 
setActionsBackground,null == view,mPublicLayout 
set notification panel padding = <*> 
hideTraffic 
at com.huawei.systemmanager.rainbow.comm.request.AbsRequest.processRequest(AbsRequest.java:<*>) 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Error reading charge file 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
stepLightIdleStateLocked: mLightState=<*> 
updateDimmedActivatedHideSensitive overlap:false 
<*>|getTodayTotalSteps <*> 
ActivityThread,attachApplication 
transferRemoteInputFocus: <*> 
<*> failed to <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
create: <*> 
handleMessage(<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
set ordinal Value failed! name is not in the enum map, name = ChrVolteStatisticInfo 
no controller energy info supplied 
at android.os.Looper.loop(Looper.java:<*>) 
<*> <*> <*> <*> <*> <*> 
set notification panel padding = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
process buffer and get message 
update() updated: <*> 
<*> <*> <*> id <*> 
is Beta User, userType = <*> 
msg = <*> received 
shouldBlockLocation running ... 
msg = <*> received 
<*> <*> : <*> 
<*> <*> : <*> 
update() updated: <*> 
onShowStatusChange show:false 
handle_exception_events enter 
process buffer and get message 
<*> <*> <*> <*> 
send: <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
process buffer and get message 
send: <*> 
<*> <*> <*> 
proxyBroadcast:[com.huawei.appmarket] proxy:false 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
send: <*> 
Report temperature: [ap] temp :<*> report_threshold:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> = <*> 
<*> <*> <*> 
enableTrigger 
<*>|calculateCaloriesWithCache totalCalories=<*> 
<*> <*> <*> <*> 
no controller energy info supplied 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
check dependency pid: <*> is depended by pid: <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
formatChinaDateTime equals. 
<*> <*> <*> <*> : <*> <*> : false <*> : <*> <*> <*> <*> <*> <*> : false 
<*> <*> <*> <*>-<*>-<*> <*> 
action:com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver, mPermissionType:<*> 
stepLightIdleStateLocked: mLightState=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
set notification panel padding = <*> 
hideTraffic 
onShowStatusChange show:false 
updateDimmedActivatedHideSensitive overlap:false 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Application com.baidu.input_huawei is depended by other app, delay to H! 
updateClipping isOverlap:false 
updateDimmedActivatedHideSensitive overlap:false 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
at java.io.FileInputStream.open(Native Method) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> <*> 
onAcquired <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
offsetBrightness=<*>.<*>,mOffsetBrightness_last102.<*>,lux=<*>.<*>,mPosBrightness=<*>.<*>,mIsUserChange=false,mDelta=<*>.<*>,defaultBrightness=<*>.<*>,mStartLuxDefaultBrightness=<*>.04875mLastLuxDefaultBrightness=<*>.<*> 
c: true, w: false, t: false, l: false 
QSEECom_send_cmd return! 
QSEECom_send_cmd return! 
begin 
<*> <*> <*> 
disable: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
setBarState:<*> 
instantCollapse 
qsc_send_cmd finish 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
QSEECom_send_cmd return! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
apply skiped :<*> 
Finished business... 
<*> <*> <*> 
huawei_audio huawei_choose_HandsFree_device_incall_forHWtest: test Type =<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> 
platform_can_split_snd_device: snd_device(<*>) num devices(<*>) new_snd_devices(<*>) 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
Caller checkPermission fail 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
CollectorManager--isCollectorEnabled--getBoolean: false 
<*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
isSimPinSecure mSimDatas is null or empty 
mIntentReceiver-ACTION_SCREEN_ON 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateLightsLocked --> mBatteryLight.turnOff 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
huawei_cust_set_parameters: exit with code(<*>) 
audio_extn_set_anc_parameters: anc_enabled:<*> 
updateSlider1 seekBarProgress:<*> 
PFW.HwPFWService:mBroadcastReceiver action = android.intent.action.SCREEN_ON 
mSimSubId:<*> onDataActivity: direction=<*> 
RCV <- {<*> Iface linkstate <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
send data return = <*> 
sending broadcast to Pid = <*>, Uid = <*> 
scheduleTimeTickEvent triggerAtTime = <*> 
<*> <*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file <*> sec level = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
onDataConn: mSubId=<*>,state=<*>,networkType=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
mSimSubId:<*> onDataActivity: direction=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
mVSimCurCardType is -<*> 
receive data len = <*> 
mStatsXtProcUid: /proc/net/comm/stats does not exist! 
QSEECom_send_cmd return! 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[enter]setLteMobileDataState state=<*> 
SND -> {<*> bandwidth <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
msg = <*> received 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
[ReceiverUtils.launchCheckVersionService] 
<*> failed to <*> <*> <*> 
<*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
<*> <*> <*> <*> <*> <*> <*> <*> <*> does not <*> 
<*> TcpCirChannel.connect(TcpCirChannel.java:<*>) Connect to server address = <*> port = <*> 
<*> <*> <*> <*> <*> <*> 
onTransact in code is: <*> 
<*> <*> <*> <*> <*> 
[UploadReceiver.onReceive] preNetStatus=-<*> 
<*> Intent { <*> <*> 
<*> is <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> is <*> 
<*> <*> is null <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
[RouteService.onStartCommand] 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
playSoundEffect effectType: <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) connected 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
cancelNotificationLocked,remove =com.tencent.mm 
turn off notificationLight due to incall or screenon 
No config file found for:/themes/diff/icons 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isMonitorCellId mInfos.size() = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
Launcher.LauncherProvider launcher-restore <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
BoostFramework() : <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
dispatch ordered broadcast [bgkeyapp] <*> <*> <*> has <*> receivers 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
[ReceiverUtils.launchOpenService] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [<*>_<*>.log] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [<*>_<*>.log] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> tunnel <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> id is <*> id is [<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<head> 
<*> <*> <*> 
<*> <*> <*> 
Launcher.Folder childCount: <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
answer call by keyCode = <*>, <*> = true, <*> = false 
<*> <*> <*> policy manager service. 
isBluetoothScoOn... 
Invalid profile no. <*>, total profiles <*> only 
<*> <*> <*> <*> <*> <*> ms 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
get the task from ActivityManager size is <*> <*> 
<*> <*> <*> <*> <*> 
at com.baidu.location.e.a.a(Unknown) 
HwLocationManager:onLocationChanged.ThirdLocation 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
clearEffects :<*>|com.android.mms|<*>|null|<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> <*> is not <*> 
<*> <*> <*> <*> <*> <*> 
setActionsBackground,null == view,mPublicLayout 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
notifyUiVisibilityChanged:vis=0xc0000600, SystemUiVisibility=0xc<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
state.clipTopAmount:<*>, i:<*> 
state.clipTopAmount:<*>, i:<*> 
updateDimmedActivatedHideSensitive overlap:true 
refreshState=rotation, BooleanState[,icon=ResourceIcon[resId=0x7f0202ed],label=自动旋转,labelTint=<*>,textChangedDelay=<*>,contentDescription=自动旋转屏幕,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=true] 
isMobileDataEnable::dateEnable=true, cotrollerEnable=true 
action:com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver, mPermissionType:<*> 
begin 
<*> <*> { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 <*> <*> 
onEntryRemovedInternal:<*>|com.android.mms|<*>|null|<*>, group=<*>|com.android.mms|g:group_key_mms 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> uid = <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
updateClipping isOverlap:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
setOverlap mOverlap:true, mDimmed:false 
BoostFramework() : <*> <*> <*> 
search 
<*> <*> <*> <*> <*> <*> 
getRecentTasks: topActivity=ComponentInfo{com.android.mms/com.android.mms.ui.ConversationList} 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
[ap] temp_new :<*> temp_old :<*> 
updateClipping isOverlap:true 
cancelNotification 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
playSoundEffect effectType: <*> 
ActivityThread,callActivityOnCreate 
<*> <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> 
[MmsProvider.query]读取彩信数据 
Create obj success use class <*> 
cancelNotification,index:-<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
FragmentMenu onPrepareOptionsMenu... 
[MmsProvider.query]读取彩信数据 
<*> <*> <*> 
<*> <*> <*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
msg = <*> received 
null 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
monitor check touch devices 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onDataActivity: direction=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
Calling fingersense_classify_touch() 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
Create obj success use class <*> 
<*> <*> <*> <*> <*> 
[MmsProvider.query]读取彩信数据 
getContactInfoForSelf 
[SmsProvider.update]修改短信数据 
[MmsProvider.query]读取彩信数据 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
ScreenState <*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = null,pkg <*> <*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
<*> <*> <*> 
setCurrentlyDisplayedThreadId: -<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
[<*>] Mms_conv 
FragmentMenu onPrepareOptionsMenu... 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
newUnreadCount:<*>,oldUnreadCount:<*> 
not 3G net type. do nothing. 
action:com.android.mms.intent.action.ACTION_NOTIFY_DATASET_CHANGED, mPermissionType:<*> 
moveTaskToTop mTaskChanged:true 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> <*> <*> cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
Create obj success use class <*> 
Create obj success use class <*> 
<*> <*> called by <*> <*> ......ID <*>,<*>-<*>,<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> = false 
<*> <*> <*> = true 
<*> = false 
MSG_QUERY_TCP_INFO called,count:<*> 
poll before: g_monitor_fd =<*> 
load icon <*> <*> <*> <*> <*> <*> 
No config file found for:/themes/diff/icons 
Launcher.Folder childCount: <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
updateDimmedActivatedHideSensitive overlap:true 
updateDimmedActivatedHideSensitive overlap:true 
state.clipTopAmount:<*>, i:<*> 
<*> <*> <*> <*> <*> <*> euid: <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
refreshState=airplane, BooleanState[,icon=ResourceIcon[resId=0x7f0201af],label=飞行模式,labelTint=<*>,textChangedDelay=<*>,contentDescription=飞行模式,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false] 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
setIsBeingDragged: false 
mSimSubId:<*> onDataActivity: direction=<*> 
handleANRFilterFIFO,uid = <*> = <*> 
getNeighboringCellInfo calling app is com.amap.android.ams 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
vel=<*>.<*>, MinimumFlingVelocity=<*> 
<*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
setProgress: <*> 
makeExpandedInvisible: mExpandedVisible=true 
<*> <*> <*> <*> <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
answer call by keyCode = <*>, <*> = true, <*> = false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
querySoundEffectsEnabled... 
moveTaskToTop mTaskChanged:true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
obtain, mHwFlags=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
Create obj success use class <*> 
<*> <*> <*> 
querySoundEffectsEnabled... 
<*> <*> <*> = false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Split enqueueing broadcast <*> <*> 
Create obj success use class <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateBluetooth:::setBluetoothBatteryEnable false. 
transitionTo:mode=<*>, isEmuiStyle=false 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> <*> <*> (has extras) } 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> <*> <*> cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
at android.database.sqlite.SQLiteDatabase.openInner(SQLiteDatabase.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> uid: <*>, pid: <*> 
<*> <*> <*> 
notifyDatasetChanged 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
current cell id is not monitor ..... cellid = <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
<*> <*> <*> <*> <*> <*> 
call onScreenTurnedOff(<*>) 
selectOutput() commonFlags for output <*>, <*> 
ACDB -> <*> 
ACDB -> <*> 
ACDB -> <*> <*> <*> 
mTiffStream skip = <*> 
<*> took <*> ms 
receive data len = <*> 
QSEECom_send_cmd return! 
<*> <*> <*> 
DisplayPowerState :OFF 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> <*> <*> 
Rac Change (PDC) data: [<*>, <*>] 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> 
need to <*> <*> <*> 
<*> <*> <*> <*> <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
<*> <*> <*> <*> <*> 
handleNotifyFinishedGoingToSleep 
onFinishedGoingToSleep 
showPrimarySecurityScreen(turningOff=false) 
showSecurityScreen(PIN) 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
pluggedStatus: <*> 
apply skiped :<*> 
writeSummaryFromParcelLocked 
<*> <*> <*> 
enter addToIdleMessage(type:<*>), mainloop is busy, add to idleMessage 
isSimPinSecure mSimDatas is null or empty 
<*> <*> <*> 
hideTraffic 
updateQsState:false 
updateQsState:false 
updateDimmedActivatedHideSensitive overlap:false 
setSystemUiVisibility <*> <*> <*> <*> <*> 
updateClipping isOverlap:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
<*> <*> <*> 
<*> <*> <*> 
LightSensor, enable, <*>: mEnabled=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
<*> <*> <*> 
<*> read from <*> <*> = <*> 
<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> = <*> 
state is UNREGISTERED 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
onSignal: mSubId=<*>,currDataSubID=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
<*> <*> <*> <*> <*> <*> 
notifyListenerHuawei::origin typeIcon:<*> <*> isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
m1: false 
Change to single clock mode! 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: true 
release:lock=<*>, flg=0x0, tag="hibernation", name=com.huawei.powergenie", ws=null, uid=<*>, pid=<*> 
https request. 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> OK ! 
Error reading charge file 
m1: false 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> = <*> to <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> = <*> 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> read from <*> <*> = <*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
Rac Change (PDC) data: [<*>, <*>] 
<*> <*> <*> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
onDataConn: mSubId=<*>,state=<*>,networkType=<*> 
<*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
m1: false 
Handle message: <*> 
Error reading charge file 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> <*> <*> 
is Beta User, userType = <*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
updateDimmedActivatedHideSensitive overlap:false 
hideTraffic 
updateNotificationShade 
generateAddAnimation:null, false 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
updateTint: tint=<*> 
cancelNotification,index:-<*> 
cancelNotification,index:-<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
Create obj success use class android.app.HwCustNotificationImpl 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
Sending non-protected broadcast <*> from system uid <*> pkg <*> 
<*>|onStandStepChanged <*> 
onShowStatusChange show:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
set notification panel padding = <*> 
sendMessage <*> 
shouldBlockLocation ret:false 
<*> <*> is invalid, do not <*> <*> <*> 
mThermalService is NULL! 
Report temperature: [ap] temp :<*> report_threshold:<*> 
updateDimmedActivatedHideSensitive overlap:false 
<*>|getTodayTotalSteps <*> 
<*>|rebuild notification 
transferRemoteInputFocus: <*> 
<*>|getTodayTotalSteps <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> trigger action = <*> package name <*> <*> 
act:android.intent.action.TIME_TICK flag:<*> FLAG_IS_FIRST_POWER_OFF_ALARM=false android.intent.extra.ALARM_COUNT=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> socket. 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
formatChinaDateTime, change to China <*> 
onShowStatusChange show:false 
<*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> <*> <*> 
<*>|compensate received 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> ==================== TCP CLIENT CONNECT [<*>] ==================== 
getTempInfo error: null, <*> 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Alarm triggering (type <*> or <*>): <*> type <*> when <*> <*> 
at java.io.FileInputStream.open(Native Method) 
<*>|calculateAltitudeWithCache datas.size=<*> 
Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:<*> android.content.ContextWrapper.sendBroadcast:<*> ah.onReceive:<*> f.run:<*> android.os.Handler.handleCallback:<*> 
poll before: g_monitor_fd =<*> 
getTempInfo error: null, <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
formatChinaDateTime equals. 
<*> <*> <*> <*> 
handleTimeUpdate 
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*> 
BatteryIntent received: android.intent.action.BATTERY_CHANGED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
c: true, w: false, t: false, l: false 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
no controller energy info supplied 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
Proxy wakelock uid = <*> pid = <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
RCV <- {<*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
RCV <- {<*> IfaceClass idle <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
handleLteCaStatusChange 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
isCurrentBySim()=false 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.open(Native Method) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
Rac Change (PDC) data: [<*>, <*>] 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
Rac Change (PDC) data: [<*>, <*>] 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
at java.io.FileInputStream.open(Native Method) 
Error reading charge file 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*> 
RefreshBatteryInfo isBatteryLow: <*> 
isCarrierConfigEnabled bundle is null 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
Error reading charge file 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<*>) 
setRequest ProviderRequest[OFF] 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
applyIconTint ignore 
isMusicActive... 
Error reading charge file 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> = false 
To broadcast an Intent via the notifier to external apps 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*>|MSG_RECORD_DATA_TO_FILE_DELAY datas.size()=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
onReceive: action = android.intent.action.LTE_CA_STATE 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
<*> <*> <*> <*> <*> <*> 
main{<*>} PushService.onStartCommand(PushService.java:<*>) Push Service <*> <*> <*> 
WatchThread{<*>} TcpCirChannel.connect(TcpCirChannel.java:<*>) Connect to server address = [uc.huawei.com,] port = <*> 
mDateString is: <*>月<*>日星期日 
isWiredHeadsetOn... 
at java.io.FileInputStream.open(Native Method) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag <*> 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
updateClipping isOverlap:false 
mDateString is: <*>月<*>日星期日 
handleTimeUpdate 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
process buffer and get message 
process buffer and get message 
<*> <*>-<*>-<*> <*>:<*>:<*> 
create: <*> 
send: <*> 
msg = <*> received 
Watch Thread{<*>} <*> <*> 
handleLteCaStatusChange 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) <<< ERROR(<*>) >>> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
setRestrictBackgroundLocked(): false 
allowVideoCallsInLowBattery: false isCarrierOneSupported: false mIsLowbattery: false 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
isMonitorCellId mInfos.size() = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onReceive: action = android.intent.action.LTE_CA_STATE 
isCurrentBySim()=false 
applyIconTint ignore 
onLayout:left=<*>, top=<*>, right=<*>, bottom=<*>, offset=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
getOrInflateState subId:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Received kernel message payload: event <*> 
poll before: g_monitor_fd =<*> 
updateClipping isOverlap:false 
updateDimmedActivatedHideSensitive overlap:false 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rac Change (PDC) data: [<*>, <*>] 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
onLayout:left=<*>, top=<*>, right=<*>, bottom=<*>, offset=<*> 
current cell id is not monitor ..... cellid = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
connect :false 
updateNotificationShade 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in fetching group <*> <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[SocketRead_<*>:<*>:<*>-<*>]broadcast(),and mReceivers <*>(android/null:<*>) 
isWiredHeadsetOn... 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Broadcasting intent ACTION_RAC_CHANGED 
<*> <*> <*> pid: <*>, uid: <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.open(Native Method) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleLteCaStatusChange 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
<*> <*> <*> <*> <*> is <*> 
set ordinal Value failed! name is not in the enum map, name = ChrVolteStatisticInfo 
at com.huawei.android.chr.ProtocolLogManager.handleMessage(ProtocolLogManager.java:<*>) 
<*> <*> <*> 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> = <*>, <*> = <*>, <*> <*> <*> = <*>, <*> = <*>, <*> = <*> 
sendStickyBroadcast: action=android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
<*> <*> <*> 
oem-qmi: recv_id_l = <*> recv_id=<*> 
come into oem_qmi_common_stream_from_modem_len --->modem 
at java.net.Socket.connect(Socket.java:<*>) 
<*> <*> <*> to uc.huawei.com:<*> 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event <*> 
msg = <*> received 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
SND -> {<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
getMobileDataEnabled()+ subId=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, <*> <*> <*> 
RCV <- {<*> <*> <*> 
<*> <*> = <*> 
<*> <*> <*> type is <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> 
<*> <*> com.android.phone broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
getProcessInfo: failed to find this proc 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=false 
<*> <*> : <*> 
update() updated: <*> 
update() updated: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateNotificationShade 
transferRemoteInputFocus: <*> 
<*> <*> size is <*> <*> <*> is <*> 
<*> pid: <*>, <*> <*> 
<*>|compensate received 
<*> <*> <*> <*> <*> <*> 
packageInstalled true! 
set notification panel padding = <*> 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
hideTraffic 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
<*>|compensate received 
updateClipping isOverlap:false 
process buffer and get message 
disableEffects=null canInterrupt=false once update: false 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
updateDimmedActivatedHideSensitive overlap:false 
motionLocked() 
enableTrigger 
applyInPlace=true shouldPeek=false alertAgain=true 
Create obj success use class android.app.HwCustNotificationImpl 
showNotificationAll 
EventHub monitor: no key events in the past <*> no motion events in the past <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
updateNotificationShade 
removeNotificationChildren 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
applyInPlace=true shouldPeek=false alertAgain=true 
<*>|after compensate: cache step_<*> 
set notification panel padding = <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateDimmedActivatedHideSensitive overlap:false 
<*>|standStepCounter report <*> steps,write fe 
showNotificationAll 
<*>|getTodayTotalSteps <*> 
<*>|compensate <*> <*> 
<*>|getTodayTotalSteps <*> 
Handle message: <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
disableEffects=null canInterrupt=false once update: false 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
updateDimmedActivatedHideSensitive overlap:false 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.open(Native Method) 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =time_tick 
chinaDateTime:下午<*>:<*> 
set notification panel padding = <*> 
Proxy wakelock uid = <*> pid = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
queryIntentActivitiesAsUser size results:<*>, for <*> 
<*> <*> <*> <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
no controller energy info supplied 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Error reading charge file 
<*> <*> <*> <*> <*> <*> <*> = <*> 
action:android.os.action.LIGHT_DEVICE_IDLE_MODE_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
Model onReceive user=UserHandle{<*>} 
set notification panel padding = <*> 
sendMessage <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
transferRemoteInputFocus: <*> 
DefaultState what=<*> 
RefreshBatteryInfo isBatteryLow: <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
onShowStatusChange show:false 
<*> is empty 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*> <*> <*> <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
collectReceiverComponents, callerApp: <*> <*> receiver size:<*>, flags: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
resetPeriodReportTimer enter. 
getKickTimerByUserType: <*> 
formatChinaDateTime, change to China <*> 
<*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
RCV <- {<*> <*> Firewall command succeeded} 
<*> <*> <*> <*> <*> 
sendMessage with obj<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
cancelNotification,index:-<*> 
getTempInfo error: null, <*> 
ACTION_PFW_WAKEUP_TIMER 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
<*> <*> <*> <*> <*> <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
<*> <*> = false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
0xcd, 0xb0, 0x24, 0x3e 
updateLightsLocked --> level:<*>, status:<*> 
updateIsPoweredLocked: wasPowered=false, mIsPowered=false, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*> 
ChargingSpeed Wattage: <*> ST: <*> --> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> 
doTemperatueWarning, health:<*> 
chinaDateTime:下午<*>:<*> 
at java.io.FileInputStream.open(Native Method) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
Remaining Num Attempts = <*> 
Error reading charge file 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> 
LightSensor, enable, <*>: flags=<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
begin 
shouldBlockLocation ret:false 
ContentChange for slot: <*> 
qsc_decode end 
Fingerprint timeout 
exit keyguard:<*> 
<*> <*> <*> ......ID <*>,<*>-<*>,<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> Occluded: false; dreaming: <*> <*> <*> 
setKeyguardViewState: false-false 
begin 
updateDimmedActivatedHideSensitive overlap:true 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
selectOutput() commonFlags for output <*>, <*> 
selectOutput() commonFlags for output <*>, <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
huawei_cust_set_parameters: exit with code(<*>) 
handleNotifyWakingUp 
<*> <*> <*> <*> <*> <*> <*> Bouncer:false; GoingToSleep: false Occluded: false; dreaming: false; Authenticated: false 
[LoginActivity.isLoggedIn]isLoggedIn:true 
<*> im app <*> <*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
removeNotificationChildren 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
create: <*> 
send data return = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
DefaultState what=<*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
no controller energy info supplied 
RTM_NEWROUTE Indication 
send: <*> 
create: <*> 
updateTint: tint=<*> 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
send: <*> 
DialpadFragment mBroadcastReceiver <*> 
begin 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
receive data len = <*> 
applyIconTint ignore 
isCurrentBySim()=false 
<*> <*> <*> 
begin 
RCV <- {<*> <*> <*> <*> 
<*> enable, <*>: mEnabled=<*> 
[ConnectivityManager-<*>]onAvailable(android/null:<*>) 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:retrieveStartupSettings type <*> of com.netease.newsreader.activity is <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of com.ss.android.article.news is <*> 
msg = <*> received 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
StartupResidentService:InnerHandler Message:<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
[enter]mapDataStateToLteDataState state=CONNECTED 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> 
<*> <*> <*> <*>-<*>-<*> <*>:<*>:<*> <*> <*> <*>-<*>-<*> <*>:<*>:<*> 
<*> <*> <*> <*> u0 euid: <*> <*> <*> euid: <*> 
networkAvailable=true 
getOrInflateState subId:<*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
action:huawei.android.intent.action.SILENTDOWNLOAD_ALARM, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[main-<*>]/checkVersionPackageType/(hwouc/HwOucUtility.java:<*>) 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
[ReceiverDispatcher-<*>]send msg to remote srv success(android/null:<*>) 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*>|logicalDealBroadcastEvent : Intent { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) } 
connect :true 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in fetching group <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path =>Access [/mnt/sdcard/sandbox/AnyOfficeSDK/sdk/QDJ7lEGuRlJb2r2mqrSExBTDjN4QhUgEPVptBL0HnX4=] real path ok 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> udp detect <*> <*> id is <*> id is [<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
at roboguice.RoboGuice.setBaseApplicationInjector(RoboGuice.java:<*>) 
<*> <*> <*> <*> pid: <*> <*> <*> 
<*> <*> : <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
<*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> (has extras) } 
onSignal: mSubId=<*>,currDataSubID=<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> is null or <*> <*> <*> <*> <*> <*> <*> is null or <*> <*> <*> <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> (has extras) } 
flush,<*>,handle <*> 
<*> <*> <*> <*> <*> pid = <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = <*> = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> <*> <*> 
KRiPeJU8OYoaXzqXqQI7z+1W9M2JlJzdB0qXf9VlnJGBO2hUQ+kh18tHV9AAVN9zwNaubJ5b0u2Y 
vh/V5FCr3gWzAYZhyfigeHJNSdKs5pA8+b9yeWJorVUMEhpNKfK3hqk7q7KH8uNdgGzRagaECasJ 
N9ckTNpuQA+AHpOhnpK/dxCoVWrLp2nzLmDFPUMjsd2S3IEtxt4ONj3Kka4ncCsPPfVtgGOC856a 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
mThermalService is NULL! 
handleANRFilterFIFO,uid = <*> = <*> 
handleANRFilterFIFO,uid = <*> = <*> 
isCloneProcess = false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> line <*> <*> 
<*> <*> line <*> <*> 
load: so=libhwuibp.so 
<*> <*> <*> 
<*> <*> <*> 
MainActivity_stop_tokennull 
<*> pid = <*>, uid = <*> 
<*> <*> <*> <*> <*> pid = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
t:false, fl: false, p: <*>, ce: true, we: false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
c: true, w: false, t: false, l: false 
<*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
stopNavigating, mStarted=true 
<*> <*> <*> 
<*> <*> <*> <*> <*> pid = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> 
nz/Ctg/Kzmg0NppyjEl1fudEIGvS4jEskPmhCae01TyBl/gt8CPr5T+rTvADPbocxgHmIDzcn8gg 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
shouldBlockLocation ret:false 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
mVSimCurCardType is -<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Create obj success use class <*> 
New <*> <*> <*> <*> <*> <*> <*> 
BaiduLocation:locType: <*> 
at android.database.sqlite.SQLiteConnectionPool.open(SQLiteConnectionPool.java:<*>) 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
Create obj success use class <*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
cleanUpApplicationRecord -- <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> <*> (has extras) } on bgkeyapp queue 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> <*> <*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
fingersense_classify_touch() finished 
mSimSubId:<*> onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
fingersense_classify_touch() finished 
updateLightsLocked --> mBatteryLight.turnOff 
Calling fingersense_touch_up() 
<*> <*> <*> 
<*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
updateClipping isOverlap:false 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
applyIconTint 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
obtain, mHwFlags=<*> 
<*> <*> device policy manager service. 
setClipY <*> 
Split enqueueing broadcast <*> <*> 
Change to single clock mode! 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
action:com.huawei.android.action.launcher_weather_icon_change, mPermissionType:<*> 
<*> <*> is <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> called by <*> <*> <*> <*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = <*> = <*> 
JGsSDx/XPjUud2i4cCkjdpm4Ucrqinzvd4JDoBlTrzd+iDCqXTxchPl9Pq1ewG+x0lSdWZZ7xWy<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<*> <*> <*> <*> euid: <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
0xcd, 0xb0, 0x24, 0x3e 
<*> <*> <*> <*> 
Moving to PAUSED: <*> <*> <*> <*> (pause <*> 
<*> <*> <*> <*> <*> <*> 
isCloneProcess = false 
[requestLocationUpdatesLocked] 定位..Wifi/基站定位 
action:android.location.LOCATION_REQUEST_CHANGE_ACTION, mPermissionType:<*> 
<*> <*> <*> <*> <*> pid = <*> 
<*> is not <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
at com.android.providers.telephony.TpProviderHw.query(TpProviderHw.java:<*>) 
at android.content.ContentResolver.query(ContentResolver.java:<*>) 
<*> <*> <*> ........ <*>,<*>-<*>,<*> <*> <*> 
shouldBlockLocation running ... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = <*> = <*> 
handleANRFilterFIFO,uid = <*> = <*> 
shouldBlockLocation running ... 
<*> <*> <*> <*> <*> pid = <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = <*> = <*> 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:true isRoaming:false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
<*> state is not <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> line <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> 
handleANRFilterFIFO,uid = <*> = <*> 
BD.Scheduler:Heartbeat start 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
cleanUpApplicationRecord -- <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
hideSecSoftInput = false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
shouldBlockLocation ret:false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
handleANRFilterFIFO,uid = 10113cmd = <*> 
poll before: g_monitor_fd =<*> 
fingersense_touch_up() finished 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> <*> <*> <*> can not <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Create obj success use class <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Calling fingersense_touch_up() 
<*> <*> <*> 
<*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
<*> <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> 
ActivityThread,callActivityOnCreate 
handleANRFilterFIFO,uid = 10113cmd = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> pid = <*> 
<*> <*> <*> <*> <*> pid = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
cancelAutohide 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
handleANRFilterFIFO,uid = 10113cmd = <*> 
<*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> line <*> <*> 
<*> <*> <*> <*> <*> pid = <*> 
isCloneProcess = false 
<*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
shouldBlockLocation ret:false 
CityActivity_destroy_android.os.BinderProxy@9dd2b1c 
shouldBlockLocation running ... 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> <*> pid = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
<*> <*> <*> 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
BoostFramework() : mPerf = <*> 
getNeighboringCellInfo calling <*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
do not support AFT because of no config 
onTransact in code is: <*> 
get the task from ActivityManager size is <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
shouldBlockLocation ret:false 
<*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
PowerHandler msg.what:<*> 
<*> <*> <*> 
reportGpsStopped: {GA:<*>,PAR1:<*>,PAR2:<*>,PAR3:null,PAR4:null,PAR5:<*>.<*>} 
<*> <*> <*> <*> 
shouldBlockLocation running ... 
is Beta User, userType = <*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
is3GCalling is false,mCdmaSlot is -<*> 
gkeeHWIFLqFW3iw87TlL78sm5VELz2dUUE3MjaUFFHS7dYo1MKiJ8DMGvwmVabriNk3xoYQF6old 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Calling fingersense_touch_up() 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
getNeighboringCellInfo calling <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> <*> uid=<*>, pid=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
handleANRFilterFIFO,uid = 10113cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
getNeighboringCellInfo calling <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
c: true, w: false, t: false, l: false 
isCurrentBySim()=false 
addFreezeProcess pkg:com.android.browser 
<*> <*> <*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
<*> <*> <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
setSystemUiVisibility <*> mask=ffffffff oldVal=<*> <*> <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
<*> <*> <*> <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
isCurrentBySim()=false 
fingersense_classify_touch() finished 
isCurrentBySim()=false 
isCurrentBySim()=false 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
Alarm triggering (type <*> or <*>): <*> type <*> when <*> <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
shouldBlockLocation ret:false 
action:com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver, mPermissionType:<*> 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:false isRoaming:false 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
HoldService:locationInfo switch is on . pid = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
c: true, w: false, t: false, l: false 
moveTaskToTop mTaskChanged:true 
ActivityThread,callActivityOnCreate 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Client requesting input be hidden, pid=<*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
is3GCalling is false,mCdmaSlot is -<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation ret:false 
hRtJSW1Jx2gmY/t9Ksvhrd0wvqej2gAWoZWdB4pnzwaC2uPSmbofSoOHjQe+hD34qJ8GEd1jVlBG 
22HQQroarjG3Uf2UBm5NqombplQS/vGCCQ== 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
isCardAbsent slot:<*> slotState:<*> 
Calling fingersense_classify_touch() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
SearchActivity_resume_android.os.BinderProxy@3f1fd<*> 
shouldBlockLocation running ... 
transitionTo: mode=MODE_OPAQUE, animate=false 
transitionTo:mode=<*>, isEmuiStyle=false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
<*> <*> <*> <*> <*> <*> <*> 
shouldBlockLocation ret:false 
fingersense_touch_up() finished 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Calling fingersense_classify_touch() 
shouldBlockLocation ret:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
shouldBlockLocation running ... 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> euid: <*> 
SearchActivity_pause_android.os.BinderProxy@3f1fd<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
setSystemUiVisibility vis=<*> mask=ffffffff oldVal=<*> newVal=<*> diff=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
HoldService:locationInfo switch is on . pid = <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = 10113cmd = <*> 
mVSimCurCardType is -<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*> <*> <*> 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
isCurrentBySim()=false 
csr 
Calling fingersense_classify_touch() 
isCurrentBySim()=false 
shouldBlockLocation ret:false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
shouldBlockLocation ret:false 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:false isRoaming:false 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> <*> euid: <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
onTransact in code is: <*> 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> <*> <*> (has extras) } 
HoldService:locationInfo switch is on . pid = <*> 
cancelAutohide 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
m1: false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
fingersense_touch_up() finished 
notifyUiVisibilityChanged:vis=0x8, SystemUiVisibility=0x<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
shouldBlockLocation running ... 
HoldService:locationInfo switch is on . pid = <*> 
notifyUiVisibilityChanged:vis=0x0, SystemUiVisibility=0x<*> 
<*> <*> = <*> 
<*> <*> = <*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
getOrInflateState subId:<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
<*> <*> <*> called by <*> <*> <*> <*> <*> <*> <*> <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Received kernel message payload: event <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
flush,<*>,handle <*> 
addSensor,mHandles:{<*>=<*>} 
handleANRFilterFIFO,uid = 10113cmd = <*> 
isCloneProcess = false 
HoldService:locationInfo switch is on . pid = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> line <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
onLayout:left=<*>, top=<*>, right=<*>, bottom=<*>, offset=<*> 
shouldBlockLocation ret:false 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation ret:false 
<*> is not <*> <*> <*> 
shouldBlockLocation ret:false 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
<*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> 
getNeighboringCellInfo calling <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
tcp.conn{<*>} XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
<*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
shouldBlockLocation running ... 
transitionTo:mode=<*>, isEmuiStyle=false 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> (has extras) } 
<*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
PowerHandler msg.what:<*> 
<*> <*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> <*> 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
SearchResultActivity_create_tokennull 
shouldBlockLocation running ... 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
transitionTo:mode=<*>, isEmuiStyle=false 
HoldService:locationInfo switch is on . pid = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
getNeighboringCellInfo calling app is <*> 
shouldBlockLocation ret:false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
fingersense_classify_touch() finished 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
Invalid profile no. <*>, total profiles <*> only 
SearchActivity_restart_android.os.BinderProxy@d090c7e 
<*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCardAbsent slot:<*> slotState:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
do not support AFT because of no config 
getOrInflateState subId:<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
is3GCalling is false,mCdmaSlot is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> <*> <*> Intent { <*> (has extras) } 
<*> <*> <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> <*> <*> (has extras) } 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onSignal: mSubId=<*>,currDataSubID=<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
kzallO397cR7UGK9pLlA4CKfMqLVX+BV9/4pKN1gC6ccM2q4r+dOK7qzkwog7v7o1ONx3VkvVx2a 
SearchActivity_stop_android.os.BinderProxy@d090c7e 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Calling fingersense_classify_touch() 
fingersense_touch_up() finished 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
m1: false 
Calling fingersense_classify_touch() 
fingersense_classify_touch() finished 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
<*> <*> <*> <*> pid: <*> <*> <*> 
shouldBlockLocation running ... 
<*> <*> <*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
shouldBlockLocation running ... 
getNeighboringCellInfo calling app is <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
getOrInflateState subId:<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> is null or <*> <*> <*> <*> <*> <*> <*> is null or <*> <*> <*> <*> <*> <*> <*> 
SearchResultActivity_attached_android.os.BinderProxy@be6c<*> 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation ret:false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation running ... 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
HoldService:locationInfo switch is on . pid = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> 
at java.net.Socket.connect(Socket.java:<*>) 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
isCardAbsent slot:<*> slotState:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
isCurrentBySim()=false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Can't find ssid. 
HoldService:locationInfo switch is on . pid = <*> 
m1: false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> 
get the task from ActivityManager size is <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
setSystemUiVisibility vis=<*> mask=ffffffff oldVal=<*> newVal=<*> diff=<*> 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
<*> <*> <*> <*> <*> <*> 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
shouldBlockLocation ret:false 
HoldService:locationInfo switch is on . pid = <*> 
getNeighboringCellInfo calling app is <*> 
m1: false 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
getRecentTasks: topActivity=ComponentInfo{com.sankuai.meituanhd/com.meituan.android.base.ui.CommonWebViewActivity} 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
<*> <*> <*> <*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
HoldService:locationInfo switch is on . pid = <*> 
<*> <*> <*> <*> 
shouldBlockLocation ret:false 
<*> <*> <*> <*> is not <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> <*> <*> <*> 
Client requesting input be <*> <*> 
getStatic,count:<*>,work status:false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
fingersense_touch_up() finished 
fingersense_touch_up() finished 
csr 
<*> = true 
<*> = <*> 
<*> <*> <*> 
mIsEffect:false 
<*> <*> = <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
ImsServiceSub : handleSsac voice = <*> 
received cell-signal:<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
fingersense_classify_touch() finished 
Broadcasting intent ACTION_RAC_CHANGED 
fingersense_touch_up() finished 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
HoldService:locationInfo switch is on . pid = <*> 
Can't find ssid. 
m1: false 
ImsServiceSubHandler : Message received: what = <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> <*> is not <*> <*> <*> 
Calling fingersense_classify_touch() 
getOrInflateState subId:<*> 
c: true, w: false, t: false, l: false 
Client requesting input be hidden, pid=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> euid: <*> 
<*> <*> <*> 
<*> <*> <*> visible: false 
JIT profile information will not be recorded: profile file does not exits. 
hideSecSoftInput = false 
fingersense_classify_touch() finished 
transitionTo: mode=MODE_OPAQUE, animate=false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> <*> is not <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
getOrInflateState subId:<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> <*> is not <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Calling fingersense_touch_up() 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> <*> is not <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> <*> <*> <*> 
not in link monitoring mode, ignore TCP result . 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> is not <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
<*> <*> <*> <*> is not <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> <*> is not <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> is not <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught <*> <*> <*> <*> source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught <*> <*> <*> <*> source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending broadcast to Pid = <*>, Uid = <*> 
RCV <- {<*> <*> Tethering stats list completed} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
setOverlap mOverlap:true, mDimmed:false 
updateDimmedActivatedHideSensitive overlap:false 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
allowVideoCallsInLowBattery: false isCarrierOneSupported: false mIsLowbattery: false 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
process buffer and get message 
onCreate 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bmp is null : false 
bmp is null : false 
[INFO:CONSOLE(<*>)] "Uncaught <*> <*> <*> <*> source: (<*>) 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> : <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
Client requesting input be hidden, pid=<*> 
setProgress: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
updateClipping isOverlap:true 
setBackgroundAlpha:alpha=<*>.<*> 
<*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught <*> <*> <*> <*> source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
transitionTo:mode=<*>, isEmuiStyle=false 
<*> <*> <*> 
<*> need to <*> <*> 
updateQsState:false 
refreshState=bt, BooleanState[,icon=ResourceIcon[resId=0x7f0201b7],label=蓝牙,labelTint=<*>,textChangedDelay=<*>,contentDescription=蓝牙关闭。,打开蓝牙设置。,dualLabelContentDescription=蓝牙,minimalContentDescription=蓝牙：%s。,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false] 
refreshState=airplane, BooleanState[,icon=ResourceIcon[resId=0x7f0201af],label=飞行模式,labelTint=<*>,textChangedDelay=<*>,contentDescription=飞行模式,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false] 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
updateDimmedActivatedHideSensitive overlap:false 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
<*> <*> line <*> QMI_LOC_GET_BEST_AVAILABLE_POSITION_REQ_V<*> 
notifyInterfaceLinkStateChanged <*> 
<*> <*> <*> <*> such file or <*> 
<*> <*> = <*> 
<*> is not <*> <*> <*> <*> 
isSystemBootComplete =true 
ensure_entropy_file_exists 
Start "p2p_supplicant" 
action:android.net.conn.TETHER_STATE_CHANGED, mPermissionType:<*> 
<*> action = <*> 
isSystemBootComplete =true 
<*> is not <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> <*> <*> 
nl80211: <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
RCV <- {<*> Iface linkstate <*> <*> 
<*> state change <*> <*> pid = <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
update_config=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL_IFACE: Failed to get <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
CTRL_IFACE: Failed to get <*> <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
CTRL_IFACE: Failed to get <*> <*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
action:android.net.wifi.CONFIGURED_NETWORKS_CHANGE, mPermissionType:<*> 
wlan0: Control interface command <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
onReceive, action:android.net.wifi.p2p.CONNECTION_STATE_CHANGE 
<*> cmd:'IFNAME=wlan0 <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
no controller energy info supplied 
power log dlsym ok 
collectReceiverComponents, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, <*> receiver size:<*>, flags: <*> 
<*> Control interface command <*> 
<*> <*> <*> 
JIT profile information will not be recorded: profile file does not exits. 
wifi_send_command: cmd:'SAVE_CONFIG' 
<*> <*> <*> <*> id <*> <*> <*> <*> <*> <*> <*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WifiMonitor:wlan0 <*> <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
<*> <*> <*> <*> <*> 
WPS: attr <*> <*> 
bssid=<*>:f4:<*>:a0:ff:<*>;freq=<*>;level=<*>;flags=<*>;ssid=ChinaNet-eciP; 
WPS: attr <*> <*> 
onReceive: action = <*> 
<*> <*> <*> 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
<*> = false, <*> = false, <*> = false, <*> = true, <*> = true, <*> = true, <*> = false 
transitionTo: mode=MODE_OPAQUE, animate=false 
Client requesting input be hidden, pid=<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
setProgress: <*> 
updateDimmedActivatedHideSensitive overlap:false 
updateDimmedActivatedHideSensitive overlap:false 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> <*> 
apply skiped :<*> 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
<*> <*> <*> <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
bssid=<*>:bd:5f:6c:7d:7e;freq=<*>;level=<*>;flags=<*>;ssid=<*>; 
WPS: attr <*> <*> 
bssid=e4:d3:<*>:8b:1e:a4;freq=<*>;level=<*>;flags=<*>;ssid=<*>; 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
main{<*>} onReceive:android.net.wifi.STATE_CHANGE 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
fingersense_touch_up() finished 
<*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>}, <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>}, <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
scheduleCheckFreezeScreen sendMessageDelayed 
handleANRFilterFIFO,uid = 10113cmd = <*> 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
querySoundEffectsEnabled... 
HoldService:locationInfo switch is on . pid = <*> 
getRecentTasks: topActivity=ComponentInfo{com.sankuai.meituanhd/com.meituan.android.base.ui.CommonWebViewActivity} 
notifyUiVisibilityChanged:vis=0x0, SystemUiVisibility=0x<*> 
<*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught <*> <*> <*> <*> <*> <*> <*> source: (<*>) 
updateDimmedActivatedHideSensitive overlap:false 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> <*> <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
isCurrentBySim()=false 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> 2d <*> <*> <*> <*> <*> <*> <*> <*> 0c <*> <*> <*> <*> <*> 0b <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
Add randomness: count=<*> entropy=<*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
<*> <*> <*> <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
bssid=<*>:eb:<*>:e4:<*>:3e;freq=<*>;level=<*>;flags=<*>;ssid=NO; 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
<*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
received cell-signal:<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Calling fingersense_classify_touch() 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Client requesting input be hidden, pid=<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> <*> 
<*> <*> <*> <*> id <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Add randomness: count=<*> entropy=<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
<*> <*> <*> <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
bssid=<*>:<*>:<*>:a3:5e:<*>;freq=<*>;level=<*>;flags=<*>;ssid=KJS; 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr type=0x1054 len=<*> 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
action:android.net.wifi.supplicant.STATE_CHANGE, mPermissionType:<*> 
fingersense_classify_touch() finished 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
c: true, w: <*> t: false, l: false 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
updateLight --> mIsNotificationExisting: false ledOnMS: <*> ledOffMS :<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
updateClipping isOverlap:false 
transitionTo: mode=MODE_OPAQUE, animate=false 
transitionTo: mode=MODE_OPAQUE, animate=false 
updateDimmedActivatedHideSensitive overlap:false 
updateClipping isOverlap:false 
<*> <*> <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
onExpandingStarted 
Returning system default Launcher 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
BoostFramework() : mPerf = <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
BoostFramework() : mPerf = <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> is null or <*> <*> <*> <*> <*> <*> <*> is null or <*> <*> <*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:true 
c: true, w: <*> t: false, l: false 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
updateDimmedActivatedHideSensitive overlap:true 
Split enqueueing broadcast <*> <*> 
resumeSuspendedAutohide 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
can not <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
can not <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
shouldBlockLocation running ... 
HoldService:locationInfo switch is on . pid = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> <*> <*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
Add randomness: count=<*> entropy=<*> 
Add randomness: count=<*> entropy=<*> 
Add randomness: count=<*> entropy=<*> 
<*> <*> <*> <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
<*> <*> <*> <*> <*> 
WPS: attr <*> <*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
<*> <*> <*> <*> <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr type=0x104a len=<*> 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
WPS: attr type=0x1023 len=<*> 
WPS: attr <*> <*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x104a len=<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
<*> <*> <*> <*> = <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> = true, <*> <*> <*> <*> = false, <*> = false, reason = <*>, <*> 
ZHYE8GIq1kP5rI9puUz0FkD1KqWoi86PgQJNLVCZt/fKXuBxMPh3kwR04xAB6QaWh+R0HAy9eKLq 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> 
shouldBlockLocation ret:false 
HoldService:locationInfo switch is on . pid = <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
acquire lock=<*>, flags=0x1, <*> <*> <*> uid=<*>, pid=<*> 
BoostFramework() : mPerf = <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
cancelAutohide 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> = true, <*> = <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
notifyUiVisibilityChanged:vis=0x40000700, SystemUiVisibility=0x<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
getCSubChrVolteStatisticCategory enter. 
<*> <*> : <*> 
<*> <*> : <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
update() updated: <*> 
Split enqueueing broadcast <*> <*> 
update() updated: <*> 
is Beta User, userType = <*> 
at com.huawei.android.chr.ProtocolLogManager.handleMessage(ProtocolLogManager.java:<*>) 
msg = <*> received 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
onSignal: mSubId=<*>,currDataSubID=<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
fingersense_classify_touch() finished 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL_IFACE: Failed to get <*> <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL_IFACE: Failed to get <*> <*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
wifi_send_command: cmd:'IFNAME=wlan0 <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> 0f <*> <*> <*> <*> <*> 0f <*> <*> <*> <*> <*> 0f <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
WifiMonitor:wlan0 <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
scheduleWatchdogTimer 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
send_cmd_kernel: cmd=<*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> id = <*> = <*> <*> = <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
receive:android.net.wifi.STATE_CHANGE 
SND -> {<*> <*> <*> <*> <*> 
<*> <*> = false, <*> = false, <*> = <*> 
can not <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> type is : <*> 
<*> <*> <*> <*> <*> <*> <*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
can not <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
.handleEvent().received action:android.net.wifi.STATE_CHANGE 
addOrUpdateApInfoRecord enter. 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
AwareAppMngSort: <*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
RTM_NEWROUTE Indication 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ENTER: handleNetworkConnected() 
<*> <*> = false, <*> = false, <*> = <*> 
loss[<*>]=<*>%, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
<*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
onReceive, action:android.net.wifi.STATE_CHANGE 
<*> <*> = false, <*> = false, <*> = <*> 
<*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
updateDNS:<*>.<*>.<*>.<*> 
setSystemUiVisibility vis=<*> mask=ffffffff oldVal=<*> newVal=<*> diff=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> type is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> = <*> 
Sending non-protected broadcast <*> from system <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> <*> = false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
onReceive: action = <*> 
<*> <*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:retrieveStartupSettings type <*> of com.ss.android.article.news is <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
<*> <*> = true, <*> <*> <*> <*> = false, <*> = false, reason = <*>, <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
isNetworkAvailable::netInfo isConnected! 
<*> = false, <*> = false, <*> = true, <*> = true, <*> = true, <*> = true, <*> = false 
wlan0: Control interface command <*> 
getTypeIcon type:<*> 
HwLogUpload exist 
<*> TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
SND -> {<*> bandwidth <*> <*> 
create: <*> 
ActivityThread,attachApplication 
queryIntentActivitiesAsUser size results:<*>, for package:com.huawei.espacev<*> 
c: true, w: <*> t: false, l: false 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
Launcher.IconCache, cacheLocked Utilities.createIconBitmap <*> <*> <*> <*> <*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
CollectorManager--isCollectorEnabled--getBoolean: false 
CollectorManager--isCollectorEnabled--getBoolean: false 
stopSelfIfIdle: STOP! 
StartupResidentService:InnerHandler Message:<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> <*> <*> <*> 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) Login_By_Step-> at <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
StartupResidentService:InnerHandler Message:<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
Dispatching event to interface: wlan<*> 
Add randomness: count=<*> entropy=<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
<*> surface <*> called by com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> <*> <*> <*> <*> <*> <*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr type=0x1023 len=<*> 
<*> <*> <*> <*> <*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr <*> <*> 
WPS: attr <*> <*> 
WPS: attr type=0x104a len=<*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
<*> <*> <*> <*> <*> 
WPS: attr type=0x1021 len=<*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> = <*> 
<*> <*> = true, <*> <*> <*> <*> = false, <*> = false, reason = <*>, <*> 
<*> <*> <*> 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
<*> <*> = true, <*> <*> <*> <*> = false, <*> = false, reason = <*>, <*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*> 
4G, isCAState=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true <*> activityIn:false activityOut:false isRoaming:false 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
netType<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: <*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> uid: <*>, pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
ordered broadcast[background] <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
No config file found <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> 
<*> <*> is null <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> = <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set local private IP is:[<*>.<*>.<*>.<*>] 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
obtain, mHwFlags=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
{"status":"<*>"}(/HttpCommunicator.java:<*>) 
<*> uid = <*> <*> = <*> 
Start session 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:WriteSdkGroupItem: hash <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=WorkSource{<*>}, uid=<*>, pid=<*> 
Returning system default Launcher 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> Intent { <*> <*> (has extras) } <*> <*> <*> <*> <*> <*> due to <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
<*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> = <*> 
connect :true 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:libcSeekFile => fseek[<*>]:[<*>][<*>][EA60465C] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
getSentSize id=<*> 
<*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> = <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set mode to <*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> = <*> <*> <*> <*> <*> <*> = <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
fingersense_classify_touch() finished 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> <*> <*> 
PackAutoLog onPrePack 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
msg = <*> received 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> 
wlan0: Control interface command <*> <*> 
<*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
msg = <*> received 
<*> <*> <*> <*> <*> * <*> <*> do not <*> 
Calling fingersense_touch_up() 
acquire lock=<*>, flags=0x1, <*> <*> ws=WorkSource{<*>}, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
HoldService:locationInfo switch is on . pid = <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0c <*> <*> <*> <*> <*> 0b <*> <*> <*> <*> <*> <*> <*> <*> 0f <*> <*> <*> <*> <*> ... 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr <*> <*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1021 len=<*> 
<*> <*> = <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
attemptAutoConnect: false 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> 6c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 6c <*> <*> <*> <*> <*> 0c <*> <*> <*> <*> ... 
Add randomness: count=<*> entropy=<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> 
WPS: attr type=0x1024 len=<*> 
bssid=<*>:fc:<*>:7a:f3:b2;freq=<*>;level=<*>;flags=<*>;ssid=SD2; 
WPS: attr <*> <*> 
WPS: attr type=0x1044 len=<*> 
bssid=<*>:d3:8d:c6:c7:<*>;freq=<*>;level=<*>;flags=<*>;ssid=WirelessAP; 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
querySoundEffectsEnabled... 
BoostFramework() : mPerf = <*> 
<*> <*> <*> <*> <*> <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
sending broadcast to Pid = <*>, Uid = <*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
PoiDetailActivity_stop_android.os.BinderProxy@ed1bee<*> 
key:version value:<*> 
key:zipTime value:<*> 
key:zipTime value:<*> 
nspFileSize<*> 
key:version value:<*> 
key:zipTime value:<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> = null <*> = <*> 
[TbdtsAccess.getUserReportSetListFromWeb]Start... 
tmp: nsp-callback=http://logservice.vmall.com/osg/logServerAction!uf.htm?lsId=<*>&st=RmaRXVeJGy9IHFxcSQDo9KtlS7eY8GFcF07hTRK28as%3D&dsKey=<*>&tblName=<*>&nsp-callback-status=<*>&nsp-file-md5=29de26091d76d276231dd20c7b01f447&nsp-file-size=<*>&nsp-ts=<*> 
key: nsp-file-size 
huawei_antiTheft_manager_init succeed 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
nspContentRange0-<*>/<*> 
Handler Thread:com.huawei.lcagent.service.LogTrack 
packAllLogInDoneDir 
begin 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
[INFO:CONSOLE(<*>)] "Uncaught <*> <*> <*> <*> <*> <*> <*> source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
send: <*> 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
SND -> {<*> bandwidth <*> <*> 
moveToUploaingDir 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
<*> <*> <*> <*> euid: <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
shouldBlockLocation running ... 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW dat=file:///storage/emulated/<*>/tencent/TMAssistantSDK/Download/com.tencent.mm/1a41cb224d6d4b020176381a7c790891 typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
netmask =<*> 
<*> <*> <*> 
### mPktChkBadCnt=<*> 
<*> <*> <*> <*> 
<*> <*> <*>, uid: <*>, pid: <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
<*> <*> <*> <*> <*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
showCurrentInputLocked: mCurToken=android.os.Binder@cb2bac<*> 
wifi_send_command: cmd:'IFNAME=wlan0 <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> in the <*> <*> <*> <*> <*> 
<*> <*> <*> IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> 0f <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> = <*> 
handleOverSize() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1023 len=<*> 
<*> <*> <*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1054 len=<*> 
transitionTo:mode=<*>, isEmuiStyle=false 
<*> <*> <*> <*> <*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> id = <*> 
<*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
SND -> {<*> bandwidth <*> <*> 
RCV <- {<*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
wifi_send_command: cmd:'IFNAME=wlan0 <*> 
doCheckAccessInternet 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
wlan0: Control interface command <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> = <*>.<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Client requesting input be hidden, pid=<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
onSignal: mSubId=<*>,currDataSubID=<*> 
Client requesting input be hidden, pid=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
LeisureTrafficSetting:result is empty 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Received kernel message payload: event <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
onFling::not valid gesture or touch plus on, false, return! 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
send_cmd_kernel: cmd=<*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*> 
<*> <*> <*> <*> 
<*> <*> <*> need to <*> <*> 
<*> pid = <*>, uid = <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> uid = <*> <*> = <*> 
Create obj success use class <*> 
cancelAutohide 
<*> <*> action = <*> 
<*> <*> <*> <*> <*> <*> [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Start proc <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> 
<*> <*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> : <*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> <*> 
shouldBlockLocation running ... 
HoldService:locationInfo switch is on . pid = <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
LfbQT1UiIQfWV1AIiNSJ1MEn8ph2W+K47aYZU/mO8qAp7JAflMTwEQKbZ3PS9AHTd6Z2kSVNZsv<*> 
reN6C0v9S9BNg3rDQYYA6eG+PLxzLgqKJKhUlBZgc345ryQfDUC5Olb05p9d1ZU22W+QcAsr5x<*> 
GAJV+XG8P/l8KgREoF/QjMhVDDV/GOssYR/PXcNFLJJj5SO9fqJ2npldb2yys7uvZ3+v+tQvtIJY 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Calling fingersense_classify_touch() 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> pid = <*>, uid = <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
cancelNotification,index:-<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
search 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> app:id/msim_status_bar_operators_card_one_id} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Launcher onStop() 
<*> pid = <*>, uid = <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
mActiveIface: wlan<*> 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Change in state from: <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Calling fingersense_touch_up() 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
hideSecSoftInput = false 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
InputDispatcher::monitor frozen check! 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
result = <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> #<*> A=com.tencent.mm U=<*> StackId=<*> sz=<*>}, <*> <*> #<*> A=com.tencent.mm U=<*> StackId=<*> sz=<*>}, <*> #<*> A=com.tencent.mm U=<*> StackId=<*> sz=<*>} 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> <*> <*> #<*> A=com.huawei.android.launcher U=<*> StackId=<*> sz=<*>} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
action:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, mPermissionType:<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> <*> <*> need to <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> 
moveTaskToTop mTaskChanged:true 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> <*> <*> <*> <*> 
Moving to <*> <*> <*> <*> <*> <*> <*> <*> 
Create obj success use class <*> 
BoostFramework() : mPerf = <*> 
BoostFramework() : mPerf = <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Split enqueueing broadcast [callerApp]:ProcessRecord{fddc75d <*>:com.huawei.android.totemweather/u0a28} 
<*> is empty 
Change to single clock mode! 
bmp is null : false 
bmp is null : false 
bmp is null : false 
bmp is null : false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
mScreenBrightnessOverrideFromWindowManager=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> : <*> <*> : false <*> : <*> <*> <*> <*>-<*>-<*> <*>:<*>:<*> <*> : false 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
MyOrientationListener: updateRotation. 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
<*> <*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Application com.baidu.input_huawei is depended by other app, delay to H! 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
update_Flag=true,filteredlux=<*>.<*>,time=<*>,nextBTime=<*>,nextDTime=<*>,nextInOutTime=<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
updateRotationUnchecked(alwaysSendConfiguration=false) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<*>) 
<*> <*> <*> 
<*> <*> <*> 
at com.huawei.systemmanager.rainbow.comm.request.AbsServerRequest.processResponse(AbsServerRequest.java:<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
RCV <- {<*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
netmask =<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
send_cmd_kernel: cmd=<*> 
<*> <*> RTT[<*>]=<*>, volume=<*> 
### mPktChkBadCnt=<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
value: http://logservice.vmall.com/osg/logServerAction!uf.htm?lsId=<*>&st=I7AAet5yNnKFm88%2FDxOrd%2FSrb6m%2BzKJqBwZnoe4jakc%3D&dsKey=<*>&tblName=<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
value: <*>-<*>/<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> <*> 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0b <*> <*> <*> <*> 6c <*> <*> ... 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 6c <*> <*> <*> <*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> 6c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 6c <*> <*> <*> <*> <*> 0c <*> <*> <*> <*> ... 
BSS: last_scan_res_used=<*>/<*> 
random pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr <*> <*> 
WPS: attr type=0x1011 len=<*> 
bssid=d4:ee:<*>:<*>:3b:c6;freq=<*>;level=<*>;flags=<*>;ssid=tianrong2; 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1049 len=<*> 
bssid=<*>:<*>:<*>:a3:5d:2e;freq=<*>;level=<*>;flags=<*>;ssid=KJS; 
bssid=<*>:<*>:<*>:a3:5d:<*>;freq=<*>;level=<*>;flags=<*>;ssid=KJS; 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
bssid=<*>:f4:<*>:a1:<*>:7a;freq=<*>;level=<*>;flags=<*>;ssid=ChinaNet-u2yr; 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*>, <*>), <*> <*> <*> 
Action:start, CurrentState:MEDIA_PLAYER_STARTED 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> <*> <*> <*> 
<*> Speaker protection disabled 
<*> <*> <*> <*> 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
enable_audio_route: exit 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
updateNotificationShade 
generateAddAnimation:null, false 
onNotificationExpansionChanged called 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
BoostFramework() : mPerf = <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
CommandQueue, setBarBackgroundColor 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
send_cmd_kernel: cmd=<*> 
Workspace updateCustomizeShortcuts <*> <*> <*> 
Launcher.Folder childCount: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> <*>, <*>), <*> <*> <*> 
<*> <*> <*> uid: <*>, pid: <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
action:android.net.wifi.RSSI_CHANGED, mPermissionType:<*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> = <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
key: nsp-ts 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
setBackgroundAlpha:alpha=<*>.<*> 
action:com.android.systemui.statusbar.visible.change, mPermissionType:<*> 
collapsePanel:false 
closeQs 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
wlan0: Control interface command <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
MyOrientationListener: updateRotation. 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
suspendAutohide 
Canceling vibration. 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateClipping isOverlap:true 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
updateDimmedActivatedHideSensitive overlap:true 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
back light level before map = <*> 
<*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
back light level before map = <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*>|after compensate: cache step_<*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*>|REPORT : <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
updateClipping isOverlap:true 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
CommandQueue, setBarBackgroundColor 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Reporting <*> <*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Create obj success use class android.app.HwCustNotificationImpl 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
handleDreamLocked 
StaEnabledState what=<*> 
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*> 
RefreshBatteryInfo isBatteryLow: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> uid: <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
cleanUpApplicationRecord -- <*> 
cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*> 
<*> <*> OK ! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
netmask =<*> 
m1: false 
c: true, w: false, t: false, l: false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
m1: false 
<*> <*> = false 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
collectReceiverComponents, callerApp: ProcessRecord{<*> <*>:com.baidu.input_huawei/u0a74}, intent:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, receiver size:<*>, flags: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
updateSlider1 seekBarProgress:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*>,<*>/<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
obtain, mHwFlags=<*> 
scheduleCheckFreezeScreen sendMessageDelayed 
<*> <*> <*> <*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
power log dlsym ok 
SND -> {<*> <*> <*> <*> <*> <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> reason = <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Calling fingersense_touch_up() 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, <*> <*> <*> <*> eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
new ThermalAction 
<*> <*> mode = <*> <*> = <*> 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW dat=file:///storage/emulated/<*>/tencent/TMAssistantSDK/Download/com.tencent.mm/1a41cb224d6d4b020176381a7c790891 typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*>|REPORT : <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[msg_type] <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
ContentChange for slot: <*> 
updateSlider1 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
updateSlider1 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
updateSlider2 seekBarProgress:<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
ContentChange for slot: <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
ContentChange for slot: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
updateSlider1 seekBarProgress:<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
wifi_send_command: cmd:'IFNAME=wlan0 <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
updateSlider1 seekBarProgress:<*> 
<*> <*> <*> <*> <*> <*> <*> 
updateSlider2 seekBarProgress:<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*>|compensate received 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Calling fingersense_classify_touch() 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> <*> <*> #<*> A=com.huawei.android.launcher U=<*> StackId=<*> sz=<*>}, <*> <*> #<*> A=com.tencent.mm U=<*> StackId=<*> sz=<*>}, <*> #<*> A=com.tencent.mm U=<*> StackId=<*> sz=<*>} 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
resumeTopActivityLocked: <*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
<*> = <*>, <*> <*> <*> <*> <*> <*> 
new ThermalAction 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Create obj success use class <*> 
<*> <*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
ContentChange for slot: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*>|after compensate: cache step_<*> 
updateSlider2 seekBarProgress:<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
transferRemoteInputFocus: <*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
mSeekListener onProgressChanged progress:<*> fromUser:false 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
MyOrientationListener: updateRotation. 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
ContentChange for slot: <*> 
ContentChange for slot: <*> 
updateSlider2 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
updateSlider2 seekBarProgress:<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
fingersense_touch_up() finished 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
updateSlider2 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*> 
querySoundEffectsEnabled... 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
<*> <*> reason = <*> 
<*> to device policy manager service. 
queryIntentActivitiesAsUser size results:<*>, for <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
answer call by keyCode = <*>, <*> = true, <*> = false 
obtain, mHwFlags=<*> 
Invalid profile no. <*>, total profiles <*> only 
fingersense_touch_up() finished 
handleTouchEvent:MotionEvent { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
obtain, mHwFlags=<*> 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, metaState=<*>, flags=0x68, <*> repeatCount=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
new ThermalAction 
<*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Skipping, home stack task: TaskRecord{37babfb #<*> A=com.huawei.android.launcher U=<*> StackId=<*> sz=<*>} 
wlan0: Control interface command <*> 
dumpTcpResult: len=<*>,rtt=<*>,rttPkt=<*>,rttWn=<*>,cgt=<*>,cgtWn=<*> 
obtain, mHwFlags=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
fingersense_touch_up() finished 
<*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = <*> = <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.tencent.mm,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> V.ED..... ........ <*>,<*>-<*>,<*> <*> app:id/battery_outside_percent} 
<*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> <*> 
shouldBlockLocation running ... 
HoldService:locationInfo switch is on . pid = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
getNeighboringCellInfo calling app is <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
total/<*>/<*>,android.uid.system:<*>/<*>/<*>,com.sankuai.meituanhd/<*>/<*>,unknown:<*>/<*>/<*>,com.tencent.mm/<*>/<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
CommonWebViewActivity_resume_tokennull 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
<*> <*> = -<*> 
<*> <*> <*> <*> 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> reason = <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
[ap] temp_new :<*> temp_old :<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Transact:getHwAdminCachedValue to device policy manager service. 
obtain, mHwFlags=-<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
shouldBlockLocation running ... 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
HoldService:locationInfo switch is on . pid = <*> 
getNeighboringCellInfo calling app is <*> 
shouldBlockLocation ret:false 
shouldBlockLocation ret:false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
m1: false 
answer call by keyCode = <*>, down = true, isSupVolumnkeyAnswerCall = false 
transitionTo:mode=<*>, isEmuiStyle=false 
<*> <*> <*> , <*> : <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> 
send_cmd_kernel: cmd=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
transitionTo: mode=MODE_OPAQUE, animate=false 
fingersense_touch_up() finished 
HoldService:locationInfo switch is on . pid = <*> 
obtain, mHwFlags=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
sendEvent:action=<*>, flag=<*> 
obtain, mHwFlags=<*> 
batch,<*>,handle <*>, timeout:<*> ,period_ns:<*> 
HoldService:locationInfo switch is on . pid = <*> 
I/===> int <*> <*> line <*> 
isCloneProcess = false 
HoldService:locationInfo switch is on . pid = <*> 
fingersense_classify_touch() finished 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
onTransact in code is: <*> 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
<*> <*> <*> <*> <*> false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
HoldService:locationInfo switch is on . pid = <*> 
Transact:getHwAdminCachedValue to device policy manager service. 
MainActivity_pause_android.os.BinderProxy@fc92a<*> 
Launcher dynamicIconsRegister 
<*> <*> V.ED..... ........ <*>,<*>-<*>,<*> #7f14004e app:id/msim_status_bar_operators_card_one_id} 
<*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
random pool - hexdump(len=<*>): [REMOVED] 
Add randomness: count=<*> entropy=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
HoldService:locationInfo switch is on . pid = <*> 
bssid=<*>:c3:<*>:<*>:4d:d6;freq=<*>;level=<*>;flags=<*>;ssid=SD; 
PowerHandler msg.what:<*> 
clearAppTrackerData AppName:com.sankuai.meituanhd 
<*> <*> <*> <*> 
stopNavigating, mStarted=true 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr <*> <*> 
<*> <*> is: <*> 
<*> msg = <*> received 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
3e8n7PVvTe8HaG5vqIBVsLqoGVW9nn2ZzSAqox9Z49EYCl5D7g17j1U1T1IulR1fJdlS0GYySJNU 
FPSMonitor endScroll 
handleANRFilterFIFO,uid = <*> = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.tencent.mm,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> y = <*> 
mLogUploadInfo.getUploadErrCode(): 
key:deviceType value:MLA-AL<*> 
key:encryptType value:<*> 
key:logType value:<*> 
mLogUploadInfo.getLogDetailInfo():[{},{},{}] 
msg = <*> received 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> y = <*> 
Moving to PAUSED: <*> <*> <*> <*> (pause complete) 
<*> <*> <*> <*> <*> Intent { <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> 
Uploader 
not encrypt 
<*> <*> state = <*>, <*> <*> <*> <*> = <*>, <*> <*> = <*> 
isCloneProcess = false 
isCloneProcess = false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
value: <*>-<*>/<*> 
<*> <*> <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
getNeighboringCellInfo calling app is com.sankuai.meituanhd 
shouldBlockLocation running ... 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
Received kernel message payload: event <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
HoldService:locationInfo switch is on . pid = <*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation ret:false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> <*> <*> id <*> <*> <*> <*> <*> due to no <*> <*> <*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
Add randomness: count=<*> entropy=<*> 
Add randomness: count=<*> entropy=<*> 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr <*> <*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1024 len=<*> 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x104a len=<*> 
<*> <*> <*> <*> <*> *, const <*> *, const <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
uploadLocationAction:actionType:0actionMsg:PROVIDER:all,PN:com.sankuai.meituanhd,HC:99791f<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> state is not <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
fingersense_classify_touch() finished 
<*> <*> <*> <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
do not support AFT because of no config 
HoldService:locationInfo switch is on . pid = <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
<*> <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
dzOuHX3SEmnO4Fa0hC3+Er+W30iogtAKGZQIGA20JDvGfld3OFVkeLD55jEZdgdGp+bjjIRKmTN<*> 
kwMUBOsvqvOFnngv4FlvK28DzZrY3xUFLX4xWQ5CG5/u2a5EbSERYW4BX3ZAw+vYinWB3a3UA0Bi 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
<*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
key: nsp-file-md<*> 
value: <*> 
wlan0: Control interface command <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
handleANRFilterFIFO,uid = 10113cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
37ivnjbjkDabN1xPvK6JoLQKDj2loKXQhGNEBCVpNMjIxBESO1CVYe5+YRK0L1vt8t93aaWZgFWa 
shouldBlockLocation ret:false 
<*> <*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
getNeighboringCellInfo calling app is com.sankuai.meituanhd 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation running ... 
HoldService:locationInfo switch is on . pid = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
getNeighboringCellInfo calling app is com.sankuai.meituanhd 
wifi_send_command: cmd:'IFNAME=wlan0 <*> 
wlan0: Control interface command <*> 
Create obj success use class <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> is null or <*> <*> <*> <*> <*> <*> <*> is null or <*> <*> <*> <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> (has extras) } 
handleANRFilterFIFO,uid = 10113cmd = <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
pkg <*> <*> <*> pid: <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
total/<*>/<*>,android.uid.system:<*>/<*>/<*>,unknown:<*>/<*>/<*> 
gettimer:interval=<*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at com.google.locate.b.g.a(GoogleHttpClient.java:<*>) 
at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<*>) 
<*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> <*> <*> 
poll before: g_monitor_fd =<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
actionUrl:http://<*>.<*>.<*>.<*>/dlv2/psrv01/hwdevlogbeta/<*>/<*>/<*>/<*>/<*>/8a4f3446-44d3-4d0e-ab76-3c478d99d499.zip 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
value: <*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> <*> <*> : <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Calling fingersense_touch_up() 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
updateClipping isOverlap:false 
received broadcast android.intent.action.TIME_TICK 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
Add randomness: count=<*> entropy=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1011 len=<*> 
bssid=c8:3a:<*>:3a:<*>:<*>;freq=<*>;level=<*>;flags=<*>;ssid=鸿运住宿一楼; 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr <*> <*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1011 len=<*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
obtain, mHwFlags=-<*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:<*>) 
at com.google.locate.b.doInBackground(GoogleLocationClient.java:<*>) 
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
wifi_send_command: cmd:'IFNAME=wlan0 <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
send_cmd_kernel: cmd=<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
PoiDetailActivity_resume_android.os.BinderProxy@11c0b0e 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> OK ! 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
CommonWebViewActivity_stop_android.os.BinderProxy@148f<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
csr 
HoldService:locationInfo switch is on . pid = <*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
onFling::not valid gesture or touch plus on, false, return! 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
handleTouchEvent:MotionEvent { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*> 
<*> <*> <*> 
shouldBlockLocation ret:false 
shouldBlockLocation ret:false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>}, <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>}, <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
moveTaskToTop mTaskChanged:true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = 10113cmd = <*> 
obtain, mHwFlags=<*> 
eoizC7+J5yT7Xf7rbHpd052GwSoLxrDYVJEXOYlYNQtnRXe4BW1l70a1Y/p7rwdPmdCC0ZnPL1fz 
q9+N+OWVISGADkvhgNxbCVLi2sfaBGedyCY5kmk+hm3U9O3R0RhDXr6BuyuxplGfIjzvMSrcb2Xt 
uUYZpTHHuGs77kdPbr++21qVmn7iBgU9ufjvuUIGI9k2gcOizpRkqGQxzQeSurbUDYwi6/xb6Y8F 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Calling fingersense_touch_up() 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
onTouchEvent: code=<*>, action=<*>, <*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
<*> <*> <*> <*> <*> <*> <*> 
Transact:getHwAdminCachedValue to device policy manager service. 
<*> <*> <*> <*> <*> <*> <*> 
0x0, 0x0, 0x0, 0x<*> 
start 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
uploadLocationAction:actionType:1actionMsg:PROVIDER:gps,PN:com.sankuai.meituanhd,HC:3bae2d<*> 
HwLocalLocationManager requestLocation 
<*> <*> <*> <*> <*> 
<*> <*> is null 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> line <*> <*> 
<*> <*> <*> 
AwareMem_EventTracker: [APP_ACTIVITY_FINISH_<*>] is abandoned for <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
getNeighboringCellInfo calling app is com.sankuai.meituanhd 
handleANRFilterFIFO,uid = 10113cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
Transact:getHwAdminCachedValue to device policy manager service. 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{fddc75d <*>:com.huawei.android.totemweather/u0a28} 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 6c <*> <*> <*> 
random pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr <*> <*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr <*> <*> 
WPS: attr type=0x1008 len=<*> 
bssid=f4:<*>:cd:<*>:c8:<*>;freq=<*>;level=<*>;flags=<*>;ssid=CSDJ; 
CommandQueue, setBarBackgroundColor 
shouldBlockLocation running ... 
WPS: attr type=0x1021 len=<*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> app:id/battery_outside_percent} 
action:android.net.wifi.SCAN_RESULTS, mPermissionType:<*> 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
<*> <*> mask=ffffffff oldVal=<*> <*> <*> 
<*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
obtain, mHwFlags=<*> 
<*> <*> <*> 
HoldService:locationInfo switch is on . pid = <*> 
<*> <*> <*> 
is Beta User, userType = <*> 
<*> <*> <*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> <*> <*> 
wlan0: Control interface command <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> Intent { <*> <*> 
<*> <*> <*> <*> <*> 
Moving to <*> <*> <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
shouldBlockLocation ret:false 
<*> <*> <*> <*> <*> <*> <*> <*> line <*> <*> 
getNeighboringCellInfo calling app is com.sankuai.meituanhd 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation running ... 
HoldService:locationInfo switch is on . pid = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
<*> <*> <*> <*> 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
nspFileSize<*> 
value: http://logservice.vmall.com/osg/logServerAction!uf.htm?lsId=<*>&st=fcQe7L4m7GYCu0Jte8Hbva%2BnQ2KZT3zshg4xtdTqay8%3D&dsKey=<*>&tblName=<*> 
HoldService:locationInfo switch is on . pid = <*> 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> 6c <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> <*> <*> <*> 6c <*> <*> <*> 2a <*> <*> <*> <*> 0c <*> ... 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1008 len=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
csr 
<*> <*> <*> <*> 
<*> <*> <*> add to <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
Report temperature: [ap] temp :<*> report_threshold:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
HoldService:locationInfo switch is on . pid = <*> 
qLpt8blgG/z37GQqKu/9CXiCaMxJ/3gFCM7BAQZsb2Q/Nyhm4dS7XVqXvQoDK2rjfBHxS+tJ6wOS 
wfyvHx2zDFsvDbHBrsjsHbKOpozMelwwUtWRPzfptxFRrpVkYt3DE5J7QCZkQZTTSsjSfg2Z0g6f 
doCheckAccessInternet 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateClipping isOverlap:false 
<*> <*> <*> <*> 
send_cmd_kernel: cmd=<*> 
gettimer:interval=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> 
<*>|after compensate: cache step_<*> 
transferRemoteInputFocus: <*> 
msg = <*> received 
<*> <*> = -<*> 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> 
handleTouchEvent:MotionEvent { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
HwPhoneWindowManager has intercept Key : <*>, <*> <*> <*> <*> : <*> 
Calling fingersense_touch_up() 
updateBarBgColor 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
answer call by keyCode = <*>, down = false, isSupVolumnkeyAnswerCall = false 
<*> <*> = <*> 
onReceive: action = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> 
PowerManagerNotifier onWakefulnessChangeStarted: wakefulness=<*>, reason=<*>, <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> format <*>, channelMask <*>, flags <*> 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
<*> <*> <*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> <*> type = <*> 
ACDB -> <*> 
ACDB -> <*> 
start_output_stream: pcm_prepare 
mTiffStream skip = <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
qsc_decode end 
<*> <*> <*> <*> <*> 
at android.os.Handler.handleCallback(Handler.java:<*>) 
at android.os.Looper.loop(Looper.java:<*>) 
DisplayPowerController updatePowerState <*> useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
Animating brightness: target=<*>, rate=<*> 
during_ms:<*>,period_ms:<*> 
Calling fingersense_on_pause() 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
updateLightsLocked --> mBatteryLight.turnOff 
HDebug print <*> <*> <*> 
<*> <*> <*> 
wifiSleepPolicy:<*> 
<*> <*> id = <*> <*> <*> <*> <*> 
<*> <*> <*> 
writeSummaryFromParcelLocked, IType:<*>, mGsmCsCallTimeLen:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> is null 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
onShowStatusChange show:false 
disable: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> 
process buffer and get message 
updateClipping isOverlap:false 
msg = <*> received 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
"freeday":[<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>]} ] 
<*> <*> : <*> 
syncCalendar end! 
<*> <*> <*> <*> : <*> <*> : false <*> : <*> <*> <*> <*>-<*>-<*> <*>:<*>:<*> <*> : false 
<*> <*> <*> <*> changed bounds; rebatching 
<*> <*> <*> <*> <*> 
handleDreamLocked 
getTempInfo error: null, <*> 
updateClipping isOverlap:false 
Error reading charge file 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
send_cmd_kernel: cmd=<*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
allowVideoCallsInLowBattery: false isCarrierOneSupported: false mIsLowbattery: false 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
onShowStatusChange show:false 
set notification panel padding = <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*>|rebuild notification 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
Create obj success use class android.app.HwCustNotificationImpl 
onShowStatusChange show:false 
at java.io.FileInputStream.open(Native Method) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:<*>) 
<*> <*> <*> <*> <*> , <*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at com.google.locate.b.doInBackground(GoogleLocationClient.java:<*>) 
at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:<*>) 
wifi_send_command: cmd:'IFNAME=wlan0 <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> = -<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> when=<*> what=<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
loss[<*>]=<*>%, volume=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
RTT[<*>]=<*>, volume=<*> 
<*> is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
SND -> {<*> <*> <*> <*> 
at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:<*>) 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
at com.huawei.logupload.state.StateMachine$SmHandler.processMsg(StateMachine.java:<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
isSystemBootComplete =true 
wlan0: Control interface command <*> <*> 
upstreamIfaceTypes.add:<*> 
<*> <*> <*> rt=<*>/<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> [<*>, <*>] 
<*> <*> <*> <*> type <*> <*> <*> <*> <*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:isUnderControll third party not in whitelist: com.netease.newsreader.activity 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
sending broadcast to Pid = <*>, Uid = <*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
<*> <*> size is <*> <*> <*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
StartupResidentService:InnerHandler Message:<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*>|before compensate: cache step_<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
StartupResidentService:InnerHandler Message:<*> 
<*>|compensate received 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
disableEffects=null canInterrupt=false once update: false 
<*> <*> <*> <*> <*> <*> <*> 
updateTint: tint=<*> 
[IssueTypeParser.parseRndIssueType]load configuration 
<*> uid <*> is not <*> 
action =android.net.conn.CONNECTIVITY_CHANGE 
AppLogManager onCreate 
trim <*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
RCV <- {<*> <*> <*> 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of com.ss.android.article.news is <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Unproxy wakelock uid = <*> pid = <*> 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
onStartCommand com.huawei.lcagent.RESUME_UPLOAD 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
[ConnectivityChangeReceiver.onReceive]Start! 
Watch Thread{<*>} <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
[main-<*>]Network changed(hwouc/DownloadReceiver.java:<*>) 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
[SocketRead_<*>:<*>:<*>-<*>]conetEntity.channelType:ChannelType_Secure(android/null:<*>) 
actionUrl:http://<*>.<*>.<*>.<*>/dlv2/psrv01/hwdevlogbeta/<*>/<*>/<*>/<*>/<*>/37f4a36a-ff69-4d5a-a5fc-da027f5661c6.zip?resume 
[ReceiverDispatcher-<*>]send msg to remote srv success(android/null:<*>) 
Launcher.Folder childCount: <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
key: nsp-file-size 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
keyAppBroadcastQueueForIntent intent Intent { <*> flg=0x10 (has extras) } on bgkeyapp queue 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
[ReceiverDispatcher-<*>]send msg to remote srv success(android/null:<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
contentRanger[<*>,<*>] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> changed bounds; rebatching 
<*>|rebuild notification 
set notification panel padding = <*> 
<*> <*> <*> 
<*> <*> <*> to uc.huawei.com:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
pool-<*>-thread-<*>{<*>} BaseBroadcast.sendBroadcast(BaseBroadcast.java:<*>) no receiver for <*> 
setAlarmsPending ... 
CallObjectMethod strat 
OEMINFO_TPCOLOR_TYPE FAIL! 
[CheckNewVersionThread-<*>]retrieve newversioninfo.xml: 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> type is <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> => [END] <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> failed to <*> <*> <*> <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
No config file found for:/themes/diff/icons 
Launcher.Folder childCount: <*> 
onShowStatusChange show:false 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
<*>|after compensate: cache step_<*> 
Create obj success use class android.app.HwCustNotificationImpl 
set notification panel padding = <*> 
Error reading charge file 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
new ScenarioAction sPoolSize: <*> 
sending alarm <*> type <*> when <*> com.tencent.mm},repeatInterval = <*>,listenerTag =null 
stopNavigating, mStarted=false 
handleTimeUpdate 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*>|getTodayTotalSteps <*> 
updateClipping isOverlap:false 
updateDimmedActivatedHideSensitive overlap:false 
[HttpClient.getDataWithRetryNoLogin] success 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
QSEECom_send_cmd return! 
receive data len = <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*>|getTodayTotalSteps <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
disableEffects=null canInterrupt=false once update: false 
ACTION_BATTERY_CHANGED pluggedType: <*> 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> id <*> <*> <*> <*> <*> due to <*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
at java.io.FileInputStream.open(Native Method) 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Error reading charge file 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
RCV <- {<*> IfaceClass idle <*> <*>} 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
formatChinaDateTime equals. 
chinaDateTime:下午<*>:<*> 
setAlarmsPending ... 
proxyBroadcast:[com.huawei.appmarket] proxy:true 
<*> <*> <*> OK ! 
<*>| ## MSG_DEAL_SYSTEM_EVENT android.intent.action.TIME_TICK 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> Heartbeat timer.timers{<*>} 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in fetching group <*> <*> 
monitor check touch devices 
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*> 
onReceive intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: true 
<*>|MSG_RECORD_DATA_TO_FILE 
updateTint: tint=<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
there are no wakeup alarms and the screen is off, we can delay what we have so far until the future 
Error reading charge file 
Unproxy wakelock uid = <*> pid = <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
release:lock=<*>, flg=0x0, tag="hibernation", name=com.huawei.powergenie", ws=null, uid=<*>, pid=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
shouldBlockLocation ret:false 
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*> 
isCarrierConfigEnabled bundle is null 
sending broadcast to Pid = <*>, Uid = <*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
updateClipping isOverlap:false 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
<*> <*> <*> 
<*>|getTodayTotalSteps <*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
updateNotificationShade 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
trim <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to ip address uc.huawei.com/<*>.<*>.<*>.<*> 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
<*>|before compensate: cache step_<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000011000000514f454d484f4f4bfa0308000100000000] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|onStandStepChanged <*> 
<*> <*> <*> <*> <*> 
set notification panel padding = <*> 
DefaultState what=<*> 
<*> <*> pluggedType: <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Error reading charge file 
getTempInfo error: null, <*> 
sendMessage with obj<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
at java.io.FileInputStream.open(Native Method) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*>|REPORT : <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
csr 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
isCurrentBySim()=false 
Broadcasting intent ACTION_RAC_CHANGED 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
onStepCounterChange stepsNum:<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
handleMessage what = <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
at java.io.FileInputStream.open(Native Method) 
battery changed pluggedType: <*> 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
onShowStatusChange show:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
applyIconTint ignore 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
sending broadcast to Pid = <*>, Uid = <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Error reading charge file 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
Watch Thread{<*>} <*> <*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
Create obj success use class android.app.HwCustNotificationImpl 
need to force refresh view 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at com.huawei.ecs.mip.proxy.TcpSocket.connect(TcpSocket.java:<*>) 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
Broadcasting intent ACTION_RAC_CHANGED 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
mVSimCurCardType is -<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
<*>|compensate <*> <*> 
Error reading charge file 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
scheduleTimeTickEvent triggerAtTime = <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
RCV <- {<*> IfaceClass idle <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
updateDimmedActivatedHideSensitive overlap:false 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
handleMessage(<*>) 
<*>|compensate received 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
transferRemoteInputFocus: <*> 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) Login_By_Step-> at <*> 
<*>|rebuild notification 
main{<*>} PushService.onStartCommand(PushService.java:<*>) Push Service <*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
CallObjectMethod strat 
RecentLogic{<*>} RecentLogic.addConversationEntity(RecentLogic.java:<*>) add chat recent! 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> socket. 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
<*> <*> <*> 
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<*>) 
https request. 
at org.json.JSONObject.<init>(JSONObject.java:<*>) 
<*>|getTodayTotalSteps <*> 
pkg <*> <*> <*> pid: <*> <*> <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
Rac Change (PDC) data: [<*>, <*>] 
t:false, fl: false, p: <*>, ce: true, we: <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.open(Native Method) 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
updateLightsLocked --> level:<*>, status:<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
cancelNotificationWithTag pid <*>,uid = <*>,tag = low_battery,pkg =com.android.systemui,id =<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
onReceive: action = android.intent.action.LTE_CA_STATE 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
applyIconTint ignore 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
t:false, fl: false, p: <*>, ce: true, we: <*> 
m1: false 
Rac Change (PDC) data: [<*>, <*>] 
<*> <*> <*> <*> <*> <*> <*> 
sending broadcast to Pid = <*>, Uid = <*> 
applyIconTint ignore 
Create obj success use class android.app.HwCustNotificationImpl 
handleLteCaStatusChange 
received cell-signal:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
<*>|REPORT : <*> <*> <*> <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
hideTraffic 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
disableEffects=null canInterrupt=false once update: false 
updateLightsLocked --> level:<*>, status:<*> 
isCarrierConfigEnabled bundle is null 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> pid: <*>, uid: <*> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, tag="hibernation", name=com.huawei.powergenie", ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
begin of formatChinaDateRange <*> 
formatChinaDateTime equals. 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
create: <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
shouldBlockLocation ret:false 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Rac Change (PDC) data: [<*>, <*>] 
onSignal: mSubId=<*>,currDataSubID=<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
applyIconTint ignore 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*>|compensate received 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*>|getTodayTotalSteps <*> 
Error reading charge file 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> mReceivers <*>(android/null:<*>) 
showNotificationAll 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
<*>|compensate received 
hideTraffic 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
c: true, w: false, t: false, l: false 
<*>|compensate received 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateTint: tint=<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> 
<*> <*> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
getOrInflateState subId:<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*>|compensate <*> <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
onStepCounterChange stepsNum:<*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
<*>|REPORT : <*> <*> <*> <*> 
updateNotificationShade 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
set notification panel padding = <*> 
<*> temp_new :<*> temp_old :<*> 
uid:<*> pid:<*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*>|onStandStepChanged <*> 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
getOrInflateState subId:<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
BatteryIntent received: android.intent.action.BATTERY_CHANGED 
handleBatteryUpdate 
onReceive, action:android.intent.action.BATTERY_CHANGED 
getTempInfo error: null, <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
send: <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
msg = <*> received 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
RCV <- {<*> IfaceClass idle <*> <*>} 
formatChinaDateTime, change to China <*> 
Application com.baidu.input_huawei is depended by other app, delay to H! 
chinaDateTime:下午<*>:<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
<*> <*> OK ! 
removeNotificationChildren 
sendMessage <*> 
hideTraffic 
WatchThread{<*>} TcpCirChannel.connect(TcpCirChannel.java:<*>) Connect to server address = [uc.huawei.com,] port = <*> 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
Change to single clock mode! 
Change to single clock mode! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
updateTint: tint=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
at java.io.FileInputStream.open(Native Method) 
<*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
updateLight <*> <*> <*> <*> <*> ledOffMS :<*> 
MediaExtractor::CreateFromService (null) 
<*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
ACDB -> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
isCloneProcess = false 
onShowStatusChange show:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at java.io.FileInputStream.open(Native Method) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
RCV <- {<*> IfaceClass idle <*> <*>} 
<*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
at com.huawei.ecs.mtk.util.SimpleThread.onLoop_i(SimpleThread.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> 
set notification panel padding = <*> 
handleLteCaStatusChange 
isCurrentBySim()=false 
onCellLocationChanged 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
Received kernel message payload: event <*> 
<*>|getTodayTotalSteps <*> 
removeNotificationChildren 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to ip address <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Response ID <*> is not served in this process. 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
updateTint: tint=<*> 
set notification panel padding = <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag <*> 
<*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
onStepCounterChange stepsNum:<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> <*> <*> <*> <*> 
onReceive, action:android.net.wifi.STATE_CHANGE 
getTempInfo error: null, <*> 
Handle message: <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
onReceive: action = <*> 
hideTraffic 
<*>|getTodayTotalSteps <*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
handleMessage(<*>) 
<*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
bssid=<*>:<*>:<*>:8d:f7:8e;freq=<*>;level=<*>;flags=<*>;ssid=PW_<*>.4G; 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1047 len=<*> 
collectReceiverComponents, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, <*> receiver size:<*>, flags: <*> 
mIntentReceiver begin 
<*> <*> : <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> = false, <*> = false, <*> = false, <*> = true, <*> = true, <*> = true, <*> = false 
action:android.os.action.LIGHT_DEVICE_IDLE_MODE_CHANGED, mPermissionType:<*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
<*> <*> <*> <*> <*> <*> <*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1008 len=<*> 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onReceive, action:android.net.wifi.STATE_CHANGE 
at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:<*>) 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> 0c <*> <*> <*> <*> <*> 0b <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
<*> BSS: <*> <*> id <*> BSSID <*> <*> <*> <*> <*> 
WPS: attr <*> <*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1024 len=<*> 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
CtrlSocket Receiver,disable: false locked: <*> <*> <*> mSmartKeyguardLevel: normal_level mStartPowerSaving: <*> 
<*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> - hexdump(len=<*>): <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:WriteSdkGroupItem: hash <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:WriteSdkGroupItem: hash has same <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> <*> <*> disconnecting to uc.huawei.com:<*> 
Error reading charge file 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
onSignal: mSubId=<*>,currDataSubID=<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
To broadcast an Intent via the notifier to external apps 
is3GCalling is false,mCdmaSlot is -<*> 
<*>|upLoadOneMinuteDataToEngine mDeviceHuuid=db72ce0a35db8d3b 
<*>|REPORT : <*> <*> <*> <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
updateClipping isOverlap:false 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
transferRemoteInputFocus: <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
transferRemoteInputFocus: <*> 
<*>|onStandStepChanged <*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.open(Native Method) 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000011000000514f454d484f4f4bfa0308000100000000] 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
<*>|compensate <*> <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
isCardAbsent slot:<*> slotState:<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
updateNotificationShade 
onShowStatusChange show:false 
handleMessage what = <*> 
isCurrentBySim()=false 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
Rac Change (PDC) data: [<*>, <*>] 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
onReceive: action = android.intent.action.LTE_CA_STATE 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
hideTraffic 
handleMessage what = <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*>|before compensate: cache step_<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
updateNotificationShade 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
Rac Change (PDC) data: [<*>, <*>] 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Report temperature: [ap] temp :<*> report_threshold:<*> 
onShowStatusChange show:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.open(Native Method) 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
mVSimCurCardType is -<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
Broadcasting intent ACTION_RAC_CHANGED 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*>|getTodayTotalSteps <*> 
hideTraffic 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sendMessage with obj<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
applyIconTint ignore 
applyInPlace=true shouldPeek=false alertAgain=true 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
mVSimCurCardType is -<*> 
updateTint: tint=<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
at com.huawei.ecs.mip.proxy.TcpSocket.connect_i(TcpSocket.java:<*>) 
updateClipping isOverlap:false 
updateClipping isOverlap:false 
is Beta User, userType = <*> 
ChargingSpeed Wattage: <*> ST: <*> --> <*> 
getTempInfo error: null, <*> 
<*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> 
WifiMonitor:wlan0 cnt=<*> dispatchEvent: <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
hideTraffic 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mFilterMsgFlag: <*>,msg.arg1: <*> 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) changed bounds; rebatching 
removeNotificationChildren 
<*> <*> <*> [<*>, <*>, <*> 
onShowStatusChange show:false 
updateDimmedActivatedHideSensitive overlap:false 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*> 
Handle message: <*> 
getConfigForPhoneId phoneId is invalid 
trim <*> <*> <*> <*> <*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
removeFreezeProcess pkg:com.huawei.espacev<*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: <*> 
"freeday":[<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>]} ] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
shouldBlockLocation ret:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
RCV <- {<*> <*> Tethering stats list completed} 
<*> mReceivers <*>(android/null:<*>) 
RCV <- {<*> Iface linkstate <*> <*> 
collectReceiverComponents, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, <*> receiver size:<*>, flags: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of com.ss.android.article.news is <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of com.ss.android.article.news is <*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
is3GCalling is false,mCdmaSlot is -<*> 
updateClipping isOverlap:false 
<*> <*> <*> 
applyIconTint ignore 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true <*> activityIn:false activityOut:false isRoaming:false 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
onDataConn: mSubId=<*>,state=<*>,networkType=<*> 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*> <*> <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
<*>|compensate received 
StartupResidentService:InnerHandler Message:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ActivityThread,attachApplication 
onShowStatusChange show:false 
<*> Intent { <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> is not <*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
csr 
<*> <*> <*> <*> 
<*>|compensate <*> <*> 
monitor check touch devices 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
<*>|before compensate: cache step_<*> 
transferRemoteInputFocus: <*> 
<*>|compensate received 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
removeNotificationChildren 
Handle message: <*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
updateClipping isOverlap:false 
at com.huawei.svn.sdk.socket.SvnPlainSocketImpl.connect(SvnPlainSocketImpl.java:<*>) 
msg = <*> received 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> is: <*> 
Alarm triggering (type <*> or <*>): <*> type <*> when <*> android}] 
action:android.os.action.LIGHT_DEVICE_IDLE_MODE_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
scheduleLightAlarmLocked(<*>) 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
updateTint: tint=<*> 
becomeInactiveIfAppropriateLocked() 
<*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
RCV <- {<*> <*> Tethering stats list completed} 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
begin of formatChinaDateRange <*> 
getTempInfo error: null, <*> 
begin of formatChinaDateRange <*> 
chinaDateTime:下午<*>:<*> 
getTempInfo error: null, <*> 
process buffer and get message 
updateClipping isOverlap:false 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> 
send: <*> 
send: <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
handle_exception_events enter 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =time_tick 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
retrieveServiceLocked, callerApp: ProcessRecord{2b38b6e <*>:com.huawei.systemmanager:service/<*>}, flags: <*> 
formatChinaDateTime, change to China <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> <*> 
set ordinal Value failed! name is not in the enum map, name = ChrVolteStatisticInfo 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
updateClipping isOverlap:false 
<*> <*> : <*> 
process buffer and get message 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
update() updated: <*> 
<*> <*> <*> 
Can't find ssid. 
<*> output <*> 
<*> <*> <*> <*> <*> 
process buffer and get message 
msg = <*> received 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> size is <*> <*> <*> is <*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
Handle message: <*> 
t:false, fl: false, p: <*>, ce: true, we: <*> 
<*>|after compensate: cache step_<*> 
Report temperature: <*> temp :<*> report_threshold:<*> 
is Beta User, userType = <*> 
onShowStatusChange show:false 
<*>|getTodayTotalSteps <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
DefaultState what=<*> 
handleBatteryUpdate 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.open(Native Method) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
enableTrigger 
setRestrictBackgroundLocked(): false 
at java.io.FileInputStream.open(Native Method) 
<*> <*> = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
mDateString is: <*>月<*>日星期日 
<*>|logicalDealBroadcastEvent : Intent { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) } 
trim and enqueue <*> <*> <*> <*> <*> 
disableEffects=null canInterrupt=false once update: false 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Error reading charge file 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
set(null) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
set notification panel padding = <*> 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
sendMessage <*> 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
Create obj success use class android.app.HwCustNotificationImpl 
sendMessage <*> 
onStepCounterChange stepsNum:<*> 
monitor check touch devices 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
scheduleLightAlarmLocked(<*>) 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
formatChinaDateTime, change to China <*> 
formatChinaDateTime, change to China <*> 
hideTraffic 
mDateString is: <*>月<*>日星期日 
shouldBlockLocation ret:false 
at java.io.FileInputStream.open(Native Method) 
isWiredHeadsetOn... 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
<*> <*> = <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = false 
[SmsProvider.query]读取短信数据 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = true 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> = false 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> = <*>, <*> = <*> 
onTransact in code is: <*> 
kWhatReset 
<*> <*> <*> <*> 
Pid:<*> deleteTrackName(<*>) 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> <*> type = <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
start_output_stream: exit 
BadgeContentObserver getBadgeNumber: <*> mComponentName <*> 
Launcher.Folder childCount: <*> 
<*> <*> <*> <*> <*> = <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
received cell-signal:<*> 
no controller energy info supplied 
no controller energy info supplied 
DefaultState what=<*> 
process buffer and get message 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*> <*> <*> 
<*> <*> <*> : <*> 
<*> <*> <*> 
<*> <*> is not <*> 
becomeActiveLocked, reason = <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
KGSvcFp onAuthenticationAcquired.<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Fingerprint timeout 
receive data len = <*> 
Apply window Height MATCH_PARENT 
<*> <*> <*> took <*> ms 
qsc_send_cmd finish 
begin 
refreshState=rotation, BooleanState[,icon=ResourceIcon[resId=0x7f0202ed],label=自动旋转,labelTint=<*>,textChangedDelay=<*>,contentDescription=自动旋转屏幕,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=true] 
<*> <*> = true <*> = true 
<*> <*> <*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> 
showNotificationAll 
removeNotificationChildren 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
0x0, 0x0, 0x0, 0x<*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
[UserPresentReceiver.onReceive]Start! 
<*> <*> <*> = true <*> <*> 
platform_can_split_snd_device: snd_device(<*>) num devices(<*>) new_snd_devices(<*>) 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
applyIconTint ignore 
QSEECom_send_cmd return! 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> false 
loadMagazine 
<*> <*> <*> 
<*> updateGroupList <*> move high <*> <*> 
platform_set_parameters: exit with code(<*>) 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
sendScreenOnEvent enter. 
Reading a NULL string not supported here. 
cancelNotificationWithTag pid <*>,uid = <*>,tag = null,pkg <*> <*> 
SND -> {<*> bandwidth gettetherstats} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
out_get_latency: Latency <*> 
RTM_NEWROUTE Indication 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> <*> <*> <*> 
ITrafficInfo:ITrafficInfo create 301updateBytes = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
WifiMonitor:wlan0 cnt=<*> dispatchEvent: <*> <*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> <*> <*>} 
at com.android.server.am.ActivityManagerService.finishReceiver(ActivityManagerService.java:<*>) 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
updateDataConnectionState: state=<*>,networkType=<*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
RCV <- {<*> <*> <*> <*> 
getMobileDataEnabled()+ subId=<*> 
WifiMonitor:wlan0 cnt=<*> dispatchEvent: <*> <*> <*> <*> 
isCurrentBySim()=false 
<*> <*> - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
SND -> {<*> bandwidth gettetherstats} 
wlan0: Control interface command <*> <*> 
<*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
MagicLink2-BroadcastReceiver:====>WIFI_P2P_CONNECTION_CHANGED_ACTION 
<*> when=<*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
WifiScanGenie handleWiFiDisconnected 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> in the <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> = null 
<*> <*> <*> <*> <*> <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: com.netease.newsreader.activity 
AutoStartupDataMgr:isUnderControll third party not in whitelist: com.netease.newsreader.activity 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:retrieveStartupSettings type <*> of com.ss.android.article.news is <*> 
<*> <*> <*> <*> 
[enter]handleLteMobileDataStateChange type=<*>,subType=<*> 
SND -> {<*> bandwidth <*> <*> <*> 
PFW.HwPFWAppRestartPolicy:receive action = <*> 
msg = <*> received 
isNetworkAvailable::netInfo isConnected! 
NetworkAgent connected 
<*> <*> id = <*> = <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
<*> <*> <*> <*> <*> 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
InactiveState<*> 
mVSimCurCardType is -<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1008 len=<*> 
<*> <*> <*> <*> <*> due to <*> <*> 
mIntentReceiver begin 
<*> <*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
WifiMonitor:wlan0 cnt=<*> dispatchEvent: <*> <*> <*> <*> <*> 
<*> = false, <*> = false, <*> = false, <*> = true, <*> = true, <*> = true, <*> = false 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
<*> <*> <*> 
receive:android.net.wifi.STATE_CHANGE 
<*> : <*> <*> <*> <*> <*> <*> <*> : false 
CollectorManager--isCollectorEnabled--getBoolean: false 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
[Thread-<*>-<*>]isAllFirmwareInstallingStatus(hwouc/HwOucUtility.java:<*>) 
<*> <*> <*> <*> <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
[LogUploadService.onCreate] 
[UploadReceiver.doRun] sizeLimit=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> is not <*> <*> u0 euid: <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
random pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1024 len=<*> 
receive:android.net.wifi.STATE_CHANGE 
collectReceiverComponents, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, <*> receiver size:<*>, flags: <*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> is not <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*>.<*>.<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
at android.os.Looper.loop(Looper.java:<*>) 
stop(0xeb117d80) 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) connecting max 30000ms to uc.huawei.com:<*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
state.clipTopAmount:<*>, i:<*> 
state.clipTopAmount:<*>, i:<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, <*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> BaseBroadcast.sendBroadcast(BaseBroadcast.java:<*>) no receiver for <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
updateClipping isOverlap:true 
<*> is not <*> so return <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> 
setBackgroundColor:new=<*>, old=-<*> 
isCurrentBySim()=false 
Provider.call: getPrefString 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
getProcessInfo: failed to find this proc 
autohasloglist<*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
ActivityThread,attachApplication 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> => [END] <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: <*> <*> <*> id = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace : <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace : getkey <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
sending alarm <*> type <*> when <*> com.tencent.mm},repeatInterval = <*>,listenerTag =null 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
======onPolling start=== 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
acquire lock=<*>, flags=0x1, <*> <*> ws=WorkSource{<*>}, uid=<*>, pid=<*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.plugin.subapp.ui.friend.FMessageConversationUI} 
updateDimmedActivatedHideSensitive overlap:true 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, <*> 
updateDimmedActivatedHideSensitive overlap:true 
Split enqueueing broadcast [callerApp]:ProcessRecord{<*> <*>:com.baidu.input_huawei/u0a74} 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
collapsePanel<*> 
<*> <*> <*> <*> 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
CtrlSocket Receiver,disable: false locked: <*> <*> <*> mSmartKeyguardLevel: normal_level mStartPowerSaving: false 
StartupResidentService:InnerHandler Message:<*> 
ActivityThread,attachApplication 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
P2P: cli_channels: 
remove(null) changed bounds; rebatching 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1049 len=<*> 
LOAD QC_HUAWEI_ANTITHEFT_TA_PATH 
<*> <*> reason = <*> 
Calling fingersense_touch_up() 
<*> is not <*> <*> <*> 
<*> = <*>, <*> = <*> 
end 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
formatChinaDateTime, change to China <*> 
chinaDateTime:下午<*>:<*> 
handleTimeUpdate 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
cancelNotification,index:-<*> 
------------startInput-------------- 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
action:android.os.action.POWER_SAVE_TEMP_WHITELIST_CHANGED, mPermissionType:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
need to force refresh view 
isCardAbsent slot:<*> slotState:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
APS: 2DSDR: AbsListView.FlingRunnable.endFling, we will clear SDR ratio 
<*> <*> <*> <*> <*> 
onTransact in code is: <*> 
instantCollapse 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
BadgeContentObserver newBadgeNumber:<*>,oldBadgeNumber:<*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
receive:android.net.wifi.STATE_CHANGE 
random pool - hexdump(len=<*>): [REMOVED] 
Add randomness: count=<*> entropy=<*> 
Add randomness: count=<*> entropy=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x103c len=<*> 
bssid=6c:<*>:<*>:<*>:<*>:3a;freq=<*>;level=<*>;flags=<*>;ssid=MERCURY_563A; 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1008 len=<*> 
CtrlSocket Receiver,disable: false locked: <*> <*> <*> mSmartKeyguardLevel: normal_level mStartPowerSaving: false 
monitorWifiNetworkState: stopped. 
acquire lock=<*>, flags=0x1, tag="*launch*", name=android, ws=WorkSource{<*>}, uid=<*>, pid=<*> 
Invalid profile no. <*>, total profiles <*> only 
getOrInflateState subId:<*> 
isCardAbsent slot:<*> slotState:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
mVSimCurCardType is -<*> 
m1: false 
fingersense_classify_touch() finished 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Launcher.LauncherProvider launcher call - method:setAppBadgeCount arg:null <*> uid =<*> pid =<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
csr 
CFG_DIRS length : <*> 
<*> <*> <*> <*> <*> app 
mSimSubId:<*> onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
sending alarm <*> type <*> when <*> com.tencent.mm},repeatInterval = <*>,listenerTag =null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
suspendAutohide 
<*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>}, <*> <*> #<*> A=com.huawei.android.launcher U=<*> StackId=<*> sz=<*>}, <*> #<*> A=com.huawei.android.launcher U=<*> StackId=<*> sz=<*>} 
<*> pid = <*>, uid = <*> 
DeviceStateListener:MyCityChanged: false 
<*> <*> <*> 
shouldBlockLocation ret:false 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> open file <*> line <*> of <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{fddc75d <*>:com.huawei.android.totemweather/u0a28} 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
updateClipping isOverlap:true 
state.clipTopAmount:<*>, i:<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{fddc75d <*>:com.huawei.android.totemweather/u0a28} 
state.clipTopAmount:<*>, i:<*> 
<*> <*> is <*> 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
state.clipTopAmount:<*>, i:<*> 
updateDimmedActivatedHideSensitive overlap:true 
bmp is null : false 
bmp is null : false 
isCurrentBySim()=false 
<*> is null <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> state is not <*> 
"workday":[<*>,<*>,<*>,<*>,<*>,<*>], 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Provider.call: getPrefString 
isCurrentBySim()=false 
<*> <*> <*> <*> changed bounds; rebatching 
csr 
onExpandingStarted 
cancelNotificationLocked:<*>|com.android.mms|<*>|null|<*> 
<*> pid = <*>, uid = <*> 
setBackgroundColor:new=<*>, old=<*> 
Create obj success use class <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
do not support AFT because of no config 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
state.clipTopAmount:<*>, i:<*> 
updateNotificationShade 
apply skiped :<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
action:com.android.systemui.statusbar.visible.change, mPermissionType:<*> 
updateQsState:false 
instantCollapse 
apply skiped :<*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
<*> = false, <*> = <*> 
<*> <*> <*> = false 
<*> <*> <*> <*> 
<*> pid = <*>, uid = <*> 
Report temperature: [ap] temp :<*> report_threshold:<*> 
Create obj success use class <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
Launcher.LauncherProvider launcher-restore query - uri:content://com.huawei.android.launcher.settings/badge 
Launcher.LauncherProvider launcher-restore query - uri:content://com.huawei.android.launcher.settings/badge 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
Transact:getHwAdminCachedValue to device policy manager service. 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> 
<*> <*> <*> is empty 
APS: 2DSDR: AbsListView.FlingRunnable.endFling, we will clear SDR ratio 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=WorkSource{<*>}, uid=<*>, pid=<*> 
Returning system default Launcher 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
<*> <*> <*> is not <*> <*> u0 euid: <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> == null?true 
<*> <*> <*> <*> <*> <*> 
onEntryRemoved:<*>|com.huawei.systemmanager|<*>|null|<*> 
<*> <*> <*> <*> u0 euid: <*> <*> <*> euid: <*> 
<*> count: <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> <*> <*> 
at com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl.get(CustomConcurrentHashMap.java:<*>) 
<*> received <*> <*> <*> false 
<*> <*> <*> <*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> app:id/battery_outside_percent} 
<*> <*> is <*> 
send_cmd_kernel: cmd=<*> 
search 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
main{<*>} onReceive:android.net.wifi.STATE_CHANGE 
<*> = false, <*> = false, <*> = false, <*> = true, <*> = true, <*> = true, <*> = false 
is3GCalling is false,mCdmaSlot is -<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
Add randomness: count=<*> entropy=<*> 
P2P: cli_channels: 
WPS: attr type=0x1047 len=<*> 
bssid=<*>:<*>:<*>:c3:8c:<*>;freq=<*>;level=<*>;flags=<*>;ssid=shuilin; 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1054 len=<*> 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
<*> <*> rt=<*>/<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
mIntentReceiver begin 
<*> <*> <*> <*> <*> <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
Client requesting input be hidden, pid=<*> 
Launcher onStart() 
setBackgroundColor:new=<*>, old=<*> 
setBackgroundColor:new=<*>, old=<*> 
<*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
Background partial concurrent mark sweep <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
fingersense_classify_touch() finished 
updateClipping isOverlap:true 
setProgress: <*> 
suspendAutohide 
transitionTo:mode=<*>, isEmuiStyle=false 
onFling::not valid gesture or touch plus on, false, return! 
<*> <*> <*> 
isCurrentBySim()=false 
<*> = <*> 
<*> <*> <*> <*> 
wifi_send_command: cmd:'IFNAME=wlan0 <*> <*> <*> 
at com.android.systemui.qs.QSTile$H.handleMessage(QSTile.java:<*>) 
wlan0: Control interface command <*> <*> <*> 
mIntentReceiver begin 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
receive:android.net.wifi.STATE_CHANGE 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mVSimCurCardType is -<*> 
register_com_android_bluetooth_a2dp 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
transitionTo:mode=<*>, isEmuiStyle=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
BtChrStatisticsManager:READ_AFTER_BT_STARTED event. 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> pool - hexdump(len=<*>): [REMOVED] 
updateClipping isOverlap:true 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
stop VERIFY_WITH_NOT_DATA_LINK 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> delta = <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> Intent { <*> <*> <*> <*> <*> <*> 
moveTaskToTop mTaskChanged:true 
<*> <*> <*> <*> <*> <*> <*> <*> euid: <*> 
Create obj success use class com.huawei.android.totemweather.utils.HwCustTotemLocationImpl 
handleANRFilterFIFO,uid = 10113cmd = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
<*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
shouldBlockLocation running ... 
HoldService:locationInfo switch is on . pid = <*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
HoldService:locationInfo switch is on . pid = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
release:lock=<*>, flg=0x0, <*> <*> ws=WorkSource{<*>}, uid=<*>, pid=<*> 
Welcome_destroy_tokennull 
shouldBlockLocation running ... 
I/===> int <*> <*> <*> <*> line <*> 
I/===> int ulp_dr_stop_engine() line <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
<*> <*> <*> <*> <*> <*> <*> <*> line <*> <*> 
getNeighboringCellInfo calling app is com.sankuai.meituanhd 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
Calling fingersense_touch_up() 
getOrInflateState subId:<*> 
m1: false 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
<*> = <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> is not <*> <*> <*> 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
<*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
shouldBlockLocation running ... 
<*> <*> <*> = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
getNeighboringCellInfo calling app is com.sankuai.meituanhd 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
transitionTo: mode=MODE_OPAQUE, animate=false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HwDPMS received <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
Can't find ssid. 
shouldBlockLocation running ... 
getNeighboringCellInfo calling app is com.sankuai.meituanhd 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
HoldService:locationInfo switch is on . pid = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
RCV <- {<*> <*> Firewall command succeeded} 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
getOrInflateState subId:<*> 
<*> <*> <*> <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
<*> <*> <*> 
formatChinaDateTime equals. 
chinaDateTime:下午<*>:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
mVSimCurCardType is -<*> 
Can't find ssid. 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
HoldService:locationInfo switch is on . pid = <*> 
getNeighboringCellInfo calling app is com.sankuai.meituanhd 
is3GCalling is false,mCdmaSlot is -<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
t:false, fl: false, p: <*>, ce: true, we: false 
sn2Xmae47Iu6LMqeiKfvRf5/TvhT2QojOxGsHwDAp13GF+89bLy6qcRIOb3HWP44uz4dLqDNC4jq 
L7N0bjYXrGNRJQ9dqeZvpjEvqFTUupAzCYsjEjhoW9Ufwyb6WKNVtCNrXsrBh3YQo802m+Sxg+D<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
AwareMem_Kill: updateGroupList <*> move high <*> <*> 
cleanUpApplicationRecord -- <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
querySoundEffectsEnabled... 
HwDPMS received <*> <*> <*> 
moveTaskToTop mTaskChanged:true 
BoostFramework() : mPerf = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> 
showSoftInput() 
transitionTo: mode=MODE_OPAQUE, animate=false 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
mVSimCurCardType is -<*> 
fingersense_classify_touch() finished 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
<*> msg = <*> received 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
poll before: g_monitor_fd =<*> 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
obtain, mHwFlags=-<*> 
[INFO:CONSOLE(<*>)] "Uncaught SyntaxError: Unexpected token var", source: (<*>) 
Cannot call determinedVisibility() - never saw a connection for the pid: <*> 
sending:{"handlerName":"getRegisteredJsHandler","callbackId":"java_cb_<*>","data":null} 
[INFO:CONSOLE(<*>)] "Uncaught ReferenceError: WebViewJavascriptBridge is not defined", source: (<*>) 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
HoldService:locationInfo switch is on . pid = <*> 
getNeighboringCellInfo calling app is com.sankuai.meituanhd 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10113cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
GZeuYqV1VxUJdH8L9PrbTFi2bJfjSn3ihBF4kxkAiLRyFbDxAn6ehYfXVM+8IKH/t3fdbjVG4he<*> 
u/LBO7Z2qiSFkLvLf67Xr36N9fjtPDN5hfQ/KUjzJrLN2BKwsDDRmrgKP/1kVoRNoE5UOM3yHyG<*> 
is3GCalling is false,mCdmaSlot is -<*> 
querySoundEffectsEnabled... 
handleANRFilterFIFO,uid = 10113cmd = <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
shouldBlockLocation ret:false 
Can't find ssid. 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
HoldService:locationInfo switch is on . pid = <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
Client requesting input be hidden, pid=<*> 
shouldBlockLocation running ... 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation running ... 
obtain, mHwFlags=<*> 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Destroying surface <*> called by com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> <*> <*> <*> <*> <*> <*> 
<*> <*> reason = <*> 
interceptKeyTq keycode=<*> <*> <*> <*> <*> <*> <*> <*> 
moveTaskToTop mTaskChanged:true 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10113cmd = <*> 
getNeighboringCellInfo calling app is com.sankuai.meituanhd 
handleANRFilterFIFO,uid = 10113cmd = <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
shouldBlockLocation ret:false 
onSignal: mSubId=<*>,currDataSubID=<*> 
HoldService:locationInfo switch is on . pid = <*> 
HoldService:locationInfo switch is on . pid = <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10113cmd = <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
fingersense_touch_up() finished 
<*> <*> <*> <*> <*> <*> <*> 
statusBarIconTint=#B3000000,navigationBarIconTint=#<*> 
<*> <*> <*> 
WeatherDynamicUpdater update before : <*> <*> <*> <*>, <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=WorkSource{<*>}, uid=<*>, pid=<*> 
MainActivity_stop_android.os.BinderProxy@f132d3f 
Can't find ssid. 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituanhd,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
+CiZBXmWxJXQK7OqQ7nSoB/4NzSkui1K0jAWDY4TE3rjHk4rj48TpwF8sIGt4VLlq2gI5Gdg15aC 
U3u67ywNm5ghfI8chYDb99teA82Kx7vEAoxkh6UtZfyFPb97Ut7D0+u8MevKzfaMgO+7dE6/lDYQ 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
isCardAbsent slot:<*> slotState:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
csr 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
mVSimCurCardType is -<*> 
getTempInfo error: null, <*> 
process buffer and get message 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
mVSimCurCardType is -<*> 
Ending session 
isCurrentBySim()=false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
received cell-signal:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
Invalid profile no. <*>, total profiles <*> only 
<*> code = <*> 
<*> <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> <*> ws=WorkSource{<*>}, uid=<*>, pid=<*> 
WatchThread{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown output: java.net.SocketException: Socket is closed 
WatchThread{<*>} TcpCirChannel.connect(TcpCirChannel.java:<*>) Connect to server address = [uc.huawei.com,] port = <*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
moveTaskToTop mTaskChanged:true 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Skipping, home stack task: TaskRecord{37babfb #<*> A=com.huawei.android.launcher U=<*> StackId=<*> sz=<*>} 
svn_fclose return:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
load icon id : <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
onProposedRotationChanged, rotation=<*> 
getOrInflateState subId:<*> 
updateClipping isOverlap:false 
c: true, w: false, t: false, l: false 
send_cmd_kernel: cmd=<*> 
Calling fingersense_classify_touch() 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
chinaDateTime:下午<*>:<*> 
begin of formatChinaDateRange <*> 
formatChinaDateTime, change to China <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
csr 
monitor check touch devices 
######### CMD_QUERY_PKTS ######## 
Calling fingersense_classify_touch() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCurrentBySim()=false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
m1: false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
interceptKeyBeforeQueueing: key <*> , result : <*> 
<*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> output <*> 
<*> <*> <*> <*> <*> 
NumTracks(<*>) 
<*> <*> <*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
RecentLogic{<*>} RecentLogic.addConversationEntity(RecentLogic.java:<*>) add chat recent! 
qsc_decode end 
fpc_tac_begin_identify---need_liveness_authentication: <*> 
receive data len = <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.0967255E-<*> 
set(null) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> <*> 
Apply window Height MATCH_PARENT 
<*> <*> rt=<*>/<*> <*> <*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> <*> mMaxValue=<*>, mMinValue=<*> 
writeSummaryFromParcelLocked, duration: <*> 
writeSummaryFromParcelLocked, duration: <*> 
<*> <*> <*> <*> is <*> 
setBarState:<*> 
updateQsState:false 
hideTraffic 
transitionTo: mode=MODE_OPAQUE, animate=false 
set navBarVisible 
show 
<*> <*> <*> <*> <*> <*> 
setKeyguardWallpaperAVGColor:<*> 
c: true, w: false, t: false, l: false 
updateDimmedActivatedHideSensitive overlap:false 
The tag is null error! 
screen off <*> delay to <*> 
I/LocTech-Label :: OSOBSERVER :: Data Items In 
isCurrentBySim()=false 
Get no-perm <*> <*> <*> 
Unproxy wakelock uid = <*> pid = <*> 
bmp is null : false 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> 
onServiceStateChanged 
<*> <*> <*> <*> changed bounds; rebatching 
<*> <*> <*> <*> : <*> <*> : false <*> : <*> <*> <*> <*>-<*>-<*> <*>:<*>:<*> <*> : false 
<*> <*> <*> <*> changed bounds; rebatching 
battery changed pluggedType: <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
onShowStatusChange show:false 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> does not <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
m1: false 
Failing getSupportedFeatureset because HAL isn't started 
Systrace:: buffer is full and will reset. 
<*> <*> <*> <*> 
SND -> {<*> <*> <*> <*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
LocalReceiver receives:android.intent.action.PACKAGE_RESTARTED,pkg:com.sankuai.meituanhd,uid:<*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
sending broadcast to Pid = <*>, Uid = <*> 
begin 
write <*> failed 
mode <*> <*> <*> 
<*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
stopScanAp mIsScaning = false 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Animating brightness: target=<*>, rate=<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=true, brightnessWaitRet=false, screenAutoBrightness=<*>, userId=<*> 
qsc_send_cmd finish 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
getRemainingChance <*> 
Display ready! 
begin 
<*>|calculateCaloriesWithCache totalCalories=<*> 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
FpPerformance FpUtils.fingerTurnOnScreen():true 
release:lock=<*>, flg=0x0, <*> <*> <*> ws=null, uid=<*>, pid=<*> 
Display ready! 
<*> <*> <*> <*> <*> <*> <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
platform_can_split_snd_device: snd_device(<*>) num devices(<*>) new_snd_devices(<*>) 
disable: < expand <*> <*> <*> <*> <*> <*> clock navigationbar <*> quick_settings <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
state.clipTopAmount:<*>, i:<*> 
<*> <*> <*> <*> type <*> for Event <*>, with Raise=<*> 
<*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
[ReceiverUtils.resumeLogUpload] 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> euid: <*> 
showTraffic 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
<*> <*> <*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
getTempInfo error: null, <*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
mSimSubId:<*> onDataActivity: direction=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
disableEffects=null canInterrupt=false once update: false 
unproxy app:com.tencent.mm,uid:<*>,result:true 
mVSimCurCardType is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
updateNotificationShade 
updateDimmedActivatedHideSensitive overlap:false 
formatChinaDateTime equals. 
<*> <*> <*> <*> <*> <*> 
<*> output <*>, stream <*>, <*> <*> 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
<*> pid = <*>, uid = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
is3GCalling is false,mCdmaSlot is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> mode to <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> <*> <*> <*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
obtain, mHwFlags=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Calling fingersense_touch_up() 
sendEvent:action=<*>, flag=<*> 
sending alarm <*> type <*> when <*> com.tencent.mm},repeatInterval = <*>,listenerTag =null 
sending alarm <*> type <*> when <*> com.tencent.mm},repeatInterval = <*>,listenerTag =null 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
<*> package name <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Returning system default Launcher 
moveTaskToTop mTaskChanged:true 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
queryIntentActivitiesAsUser size results:<*>, for package:com.huawei.espacev<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
onTouchEvent: code=<*>, action=<*>, <*> <*> <*> actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
querySoundEffectsEnabled... 
Reporting <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, metaState=<*>, flags=0x68, <*> repeatCount=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
<*> pid = <*>, uid = <*> 
DynamicUpdater call updateFolder 
action:com.huawei.android.action.launcher_weather_icon_change, mPermissionType:<*> 
shouldBlockLocation running ... 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, metaState=<*>, flags=0x68, <*> repeatCount=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
WeatherDynamicUpdater update before : <*> <*> <*> <*>, <*> 
Skipping, home stack task: TaskRecord{37babfb #<*> A=com.huawei.android.launcher U=<*> StackId=<*> sz=<*>} 
at android.database.sqlite.SQLiteConnection.open(SQLiteConnection.java:<*>) 
at android.os.HandlerThread.run(HandlerThread.java:<*>) 
onDataActivity: direction=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
<*> <*> <*> <*> <*> <*> is: <*> 
is3GCalling is false,mCdmaSlot is -<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
Calling fingersense_touch_up() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
turn off notificationLight due to incall or screenon 
updateLightsLocked --> mBatteryLight.turnOff 
Split enqueueing broadcast [callerApp]:ProcessRecord{506ad58 <*>:com.android.systemui/u0a33} 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> <*> 
<*> <*> <*> to true 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:isUnderControll third party not in whitelist: com.netease.newsreader.activity 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
getMobileDataEnabled()+ subId=<*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
Start proc <*> <*> <*> <*> 
<*> <*> id = <*> = <*> <*> = <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> { action=ACTION_DOWN, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 <*> <*> 
<*> = <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
I/LocTech-Label :: OSOBSERVER :: Data Items In 
<*> <*> <*> <*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = null,pkg <*> <*> 
SystemManagerApplication:onCreate 
Received kernel message payload: event <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
upstreamIfaceTypes.add:<*> 
upstreamIfaceTypes.add:<*> 
RCV <- {<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> = <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
TafficState:default sub id = 0slotIndex = <*> subscriptionId = <*> 
wapi_type='qualcomm' 
<*> <*> <*> <*> 
nl80211: <*> <*> <*> <*> <*> 
<*> is <*> 
wifi_connect_on_socket_path: path:@android:wpa_wlan<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
<*> <*> does not support <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
P2P: cli_channels: 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> - hexdump(len=<*>): 
<*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
wifi_send_command: cmd:'IFNAME=wlan0 <*> <*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
CTRL_IFACE: Failed to get network variable <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
action:android.net.wifi.supplicant.CONNECTION_CHANGE, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
wifi_send_command: cmd:'IFNAME=wlan0 <*> <*> <*> 
WifiScanGenie handleWiFiDisconnected 
<*> <*> <*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> 
status: <*> 
<*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, <*> receiver size:<*>, flags: <*> 
<*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x103c len=<*> 
bssid=1c:fa:<*>:c5:7b:ce;freq=<*>;level=<*>;flags=<*>;ssid=TP-LINK_C57BCE; 
WPS: attr type=0x1047 len=<*> 
<*> <*> <*> <*> <*> = null 
Dispatching event to interface: wlan<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
MagicLink2-BroadcastReceiver:====>NETWORK_STATE_CHANGED_ACTION 
querySoundEffectsEnabled... 
<*> <*> <*> <*> <*> <*> uid <*> <*> <*> <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
updateClipping isOverlap:false 
removeNotificationChildren 
random pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x103c len=<*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1023 len=<*> 
bssid=d8:<*>:ac:<*>:e7:dc;freq=<*>;level=<*>;flags=<*>;ssid=HX; 
WPS: attr type=0x1042 len=<*> 
<*> <*> do not <*> <*> 
New <*> <*> <*> <*> <*> <*> <*> 
JIT profile information will not be recorded: profile file does not exits. 
<*> <*> <*> 
<*> Speaker protection disabled 
begin 
huawei_antiTheft_manager_init succeed 
qsc_send_cmd finish 
Connected. 
act:android.intent.action.TIME_TICK flag:<*> FLAG_IS_FIRST_POWER_OFF_ALARM=false android.intent.extra.ALARM_COUNT=<*> 
formatChinaDateTime, change to China <*> 
begin of formatChinaDateRange <*> 
<*> <*> <*> <*> 
<*> <*> does not <*> <*> <*> 
<*> = <*>, <*> = <*> 
operator:<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> = false <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
No config file found for:/themes/diff/icons 
begin 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>}, <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>}, <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
Create obj success use class <*> 
mIsEffect:false 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
at android.app.FragmentManagerImpl.dispatchActivityCreated(FragmentManager.java:<*>) 
at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<*>) 
<*> <*> <*> <*> <*> in the <*> <*> <*> <*> <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
<*> <*> <*> <*> <*> = null 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
transitionTo: mode=MODE_OPAQUE, animate=false 
cancelAutohide 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> took <*> <*> 
AwareAppMngSort: <*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
<*> <*> <*> <*> <*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x103b len=<*> 
<*> <*> <*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x104a len=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Access denied finding property <*> 
<*> <*> <*> <*> <*> trigger action = <*> package name <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> = true, <*> <*> <*> <*> = false, <*> = false, reason = <*>, <*> 
[CloudAlbumService] onBind 
RCV <- {<*> <*> Firewall command succeeded} 
onSignal: mSubId=<*>,currDataSubID=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
getNeighboringCellInfo calling app is com.amap.android.ams 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> 
onFling::not valid gesture or touch plus on, false, return! 
fingersense_classify_touch() finished 
fingersense_touch_up() finished 
queryIntentActivitiesAsUser size results:<*>, for <*> 
stopNavigating, mStarted=false 
fingersense_classify_touch() finished 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
scheduleCheckFreezeScreen sendMessageDelayed 
acquire lock=<*>, flags=0x1, tag="*launch*", name=android, ws=WorkSource{<*>}, uid=<*>, pid=<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
Skipping, home stack task: TaskRecord{37babfb #<*> A=com.huawei.android.launcher U=<*> StackId=<*> sz=<*>} 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> <*> 
action:android.net.wifi.STATE_CHANGE, mPermissionType:<*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
CtrlSocket Receiver,disable: false locked: <*> <*> <*> mSmartKeyguardLevel: normal_level mStartPowerSaving: false 
ActivityThread,attachApplication 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
random pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1011 len=<*> 
Dispatching event to interface: wlan<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x1023 len=<*> 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
<*> <*> <*> 
begin 
qsc_send_cmd finish 
receive data len = <*> 
begin 
begin 
QSEECom_send_cmd return! 
receive data len = <*> 
qsc_send_cmd finish 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
Calling fingersense_classify_touch() 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
fingersense_classify_touch() finished 
AwareMem_Kill: execute: killing count=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
c: true, w: <*> t: false, l: false 
fingersense_classify_touch() finished 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
isWifiProEvaluatingAP, <*> <*> <*> <*> = null 
onReceive, action:android.net.wifi.STATE_CHANGE 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> <*> <*> <*> 6c <*> <*> <*> 2a <*> <*> <*> <*> 0c <*> <*> <*> 2d <*> <*> <*> <*> <*> <*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
random pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x104a len=<*> 
bssid=<*>:5a:<*>:<*>:bf:c2;freq=<*>;level=<*>;flags=<*>;ssid=FAST_BFC2; 
WifiMonitor:wlan0 cnt=<*> dispatchEvent: <*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1021 len=<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
hasEverConnected: false 
PairwiseCiphers: 
<*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
wlan0: Control interface command 'GET_NETWORK <*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL_IFACE: Failed to get network variable <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL_IFACE: Failed to get network variable <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL_IFACE: GET_NETWORK id=<*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
CTRL_IFACE: Failed to get network variable <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> when=<*> what=<*> <*> <*> 
<*> <*> <*> 
<*> = false, <*> = false, <*> = false, <*> = true, <*> = false, <*> = false, <*> = false 
<*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
<*> <*> <*> 
<*> <*> - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> 
CtrlSocket Receiver,disable: false locked: <*> <*> <*> mSmartKeyguardLevel: normal_level mStartPowerSaving: false 
<*> <*> <*> <*> 
main{<*>} onReceive:android.net.wifi.STATE_CHANGE 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
StartupResidentService:InnerHandler Message:<*> 
receive:android.net.wifi.STATE_CHANGE 
InactiveState<*> 
<*> <*> <*> <*> 
onReceive: action = <*> 
<*> <*> <*> 
isWifiProEvaluatingAP, <*> <*> <*> <*> = null 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
set(null) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
remove(null) changed bounds; rebatching 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
onReceive, action:android.net.wifi.STATE_CHANGE 
<*> = false, <*> = false, <*> = true, <*> = true, <*> = false, <*> = false, <*> = false 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
RTT[<*>]=<*>, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
mVSimCurCardType is -<*> 
NetworkInfo.State.CONNECTED 
Destroying surface <*> called by com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> <*> <*> <*> <*> <*> <*> 
MagicLink2-BroadcastReceiver:====>NETWORK_STATE_CHANGED_ACTION 
<*> = <*> 
<*> <*> <*> <*> <*> 
Dispatching event to interface: wlan<*> 
RCV <- {<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = false, <*> = false, <*> = false, <*> = false 
<*> <*> <*> <*> <*> state = <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AppAutoStartupPolicy:prevent start receiver of package com.netease.newsreader.activity for action android.net.conn.CONNECTIVITY_CHANGE 
<*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
<*> <*> = true, <*> = null, <*> = false, <*> = false, reason = <*>, <*> 
<*> <*> = true, <*> = null, <*> = false, <*> = false, reason = <*>, <*> 
NDA_LLADDR received 
<*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
StartupResidentService:InnerHandler Message:<*> 
<*> <*> <*> 
<*> <*> <*> <*> 
[Thread-<*>-<*>]isApplicationInForeground false.(hwouc/HwOucUtility.java:<*>) 
<*> pid = <*>, uid = <*> 
[SocketRead_<*>:<*>:<*>-<*>]conetEntity.channelType:ChannelType_Secure(android/null:<*>) 
<*> = <*> <*> = <*> <*> = <*> <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path =>Access <*> real path ok 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ACTION_NETWORK_CONDITIONS_MEASURED 
Enter InternetReadyState 
ACTION_NETWORK_CONDITIONS_MEASURED 
<*> <*> <*> <*> 
<*> <*> <*> can not <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
getCurrentCellid type type = PHONE_TYPE_GSM 
wifi_send_command: cmd:'IFNAME=wlan0 PKTCNT_POLL' 
addCurrentApInfo addApInfos 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1054 len=<*> 
<*> <*> <*> <*> <*> 
WPS: attr type=0x1023 len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> <*> <*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1049 len=<*> 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x103b len=<*> 
bssid=c8:3a:<*>:4b:c9:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Tenda_4BC990; 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> = false, <*> = false, <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set local private IP is:[<*>.<*>.<*>.<*>] 
getCurrentCellid type is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = true, <*> = null, <*> = false, <*> = false, reason = <*>, <*> 
[CheckNewVersionThread-<*>]FeatureOption.MTK_GEMINI_SUPPORT Exception(hwouc/MultiCardFactory.java:<*>) 
<*> <*> do nothing. 
<*> <*> = true, <*> = null, <*> = false, <*> = false, reason = <*>, <*> 
onBindView linkPlus = true, detailedState = null, noInternet = false, noHandover = false, reason = <*>, <*> 
TencentAntiVirusEngine:check Finish 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:svn_closeAll <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> = <*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
getThreshold: <*> 
<*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [<*>_<*>.log] 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file <*> sec level = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
CallObjectMethod strat 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
statusLineopenresty 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
endPos<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
upstreamIfaceTypes.add:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> 
[Binder:<*>_<*>-<*>]BaseSearchIndexProvider()(hwouc/BaseSearchIndexProvider.java:<*>) 
<*> <*> <*> <*> <*> 
at com.huawei.hwvplayer.app.HwVPlayerApp.onConfigurationChanged(HwVPlayerApp.java:<*>) 
remove(null) changed bounds; rebatching 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
begin of formatChinaDateRange <*> 
VolumeDialogController.Callbacks onConfigurationChanged 
moveToUploaingDir 
moveToUploaingDir 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
setBackgroundColor:new=<*>, old=<*> 
<*> <*> does not <*> <*> <*> 
New app record <*> <*> <*> <*> <*> 
triggerBuildingIndex(): invalid id, return. 
triggerBuildingIndex(): invalid id, return. 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: write app bundle id = &<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> tunnel <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
triggerBuildingIndex(): invalid id, return. 
upload<*> 
triggerBuildingIndex(): invalid id, return. 
CFG_DIRS length : <*> 
triggerBuildingIndex(): invalid id, return. 
mLogUploadInfo.getUserType():<*> 
at android.graphics.Typeface.createFromFile(Typeface.java:<*>) 
<*> <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
formatChinaDateTime equals. 
nspFileMd58ee110d7c4c3f42a328f6090d6665b6f 
<*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
triggerBuildingIndex(): invalid id, return. 
triggerBuildingIndex(): invalid id, return. 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> Speaker protection disabled 
triggerBuildingIndex(): invalid id, return. 
shouldDisplay:true|isSimCardPresent:true|supportCallEncryption:true|isChineseVersion:true 
triggerBuildingIndex(): invalid id, return. 
Create obj success use class <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
processOp opType: <*>, uid: <*>, pid: <*> 
setRequest ProviderRequest[OFF] 
<*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> 6c <*> <*> <*> <*> <*> <*> 8b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1047 len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1011 len=<*> 
onBindView linkPlus = true, detailedState = null, noInternet = false, noHandover = false, reason = <*>, <*> 
obtain, mHwFlags=<*> 
triggerBuildingIndex(): invalid id, return. 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> onDismissRequested reason = <*> 
transitionTo:mode=<*>, isEmuiStyle=true 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> <*> <*> age=<*> est=<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1042 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
<*> <*> <*> 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> 0c <*> <*> <*> <*> <*> <*> 2a <*> <*> <*> <*> <*> <*> <*> ... 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> <*> flags=0xb age=<*> est=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1011 len=<*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
<*> <*> home <*> 
<*> <*> <*> <*> <*> <*> <*> 
CommandQueue, setBarBackgroundColor 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
BaiduLocation:locType: <*> 
<*> <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
<*> <*> = <*>.<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> is not <*> <*> <*> 
<*> <*> <*> id = <*> 
receive data len = <*> 
qsc_send_cmd finish 
begin 
<*> <*> <*> 
receive data len = <*> 
getCurRoamingState 
Start proc <*> <*> <*> <*> <*> 
getRecentTasks: topActivity=ComponentInfo{com.android.browser/com.UCMobile.main.UCMobile} 
CommandQueue, setBarBackgroundColor 
"freeday":[<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>,<*>]} ] 
<*> = <*> 
getProcessInfo: failed to find this proc 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
Calling fingersense_classify_touch() 
Transact:getHwAdminCachedValue to device policy manager service. 
<*> <*> <*> 
obtain, mHwFlags=<*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
wifi_send_command: cmd:'IFNAME=wlan0 <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
wlan0: Control interface command <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> 
<*> <*> <*> <*> 
performPollAndLog: 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
wlan0: Control interface command <*> 
<*> <*> level = <*> 
wlan0: Control interface command <*> 
Alarm triggering (type <*> or <*>): <*> type <*> when <*> android}] 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Calling fingersense_classify_touch() 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1044 len=<*> 
reportWifiExceptionLog: <*> 
PackAutoLog onPrePack 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: <*> 
<*> <*> is: <*> 
<*> <*> <*> = <*> 
msg = <*> received 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
m1: false 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
during_ms:<*>,period_ms:<*> 
<*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onSignal: mSubId=<*>,currDataSubID=<*> 
new ScenarioAction sPoolSize: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
setAlarmsPending ... 
ImsServiceSubHandler : Message received: what = <*> 
gettimer:interval=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
onFling::not valid gesture or touch plus on, false, return! 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
suspendAutohide 
obtain, mHwFlags=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> 
Launcher dynamicIconsRegister 
<*> <*> <*> <*> <*> 
DynamicUpdater call updateFolder 
Launcher onResume() 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> <*> 
c id:<*> 
<*> <*> <*> <*> <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] <*> <*> <*> <*> 
AwareMem_Kill: updateGroupList package: move high <*> <*> 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
wlan0: Control interface command <*> 
<*> <*> <*> 
LM mrssi=-<*> 
<*> <*> = <*>.<*> 
<*> <*> = <*>.<*> 
BoostFramework() : mPerf = <*> 
<*> <*> <*> 
onProposedRotationChanged, rotation=<*> 
t:false, fl: false, p: <*>, ce: true, we: <*> 
<*> <*> <*> <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
BroadcastReceiver android.intent.action.PACKAGE_REMOVED 
<*> <*> data for <*> <*> 
power log dlsym ok 
<*> <*> <*> <*> <*> 
ActivityManagerService,attachApplication,callingPid = <*> 
JIT profile information will not be recorded: profile file does not exits. 
<*>|logicalDealBroadcastEvent : Intent { <*> <*> 
ActivityThread,attachApplication 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> = <*> , <*> = <*> , <*> <*> = <*> <*> 
<*> <*> <*> <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> <*> <*> Intent { <*> <*> 
setSystemUiVisibility vis=<*> mask=ffffffff oldVal=<*> <*> <*> 
ActivityManagerService,attachApplication,callingPid = <*> 
<*> <*> <*> <*> <*> 
begin 
######### CMD_QUERY_PKTS ######## 
begin 
<*> <*> type is <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
Create obj success use class <*> 
<*> is <*> 
begin 
huawei_antiTheft_manager_init enter 
hwpaysdk isLower 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
QSEECom_send_cmd return! 
<*> <*> <*> <*> <*> <*> 
begin 
qsc_start_app end 
receive data len = <*> 
m1: false 
send data return = <*> 
QSEECom_send_cmd return! 
<*> <*> <*> 
<*> <*> <*> <*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
BoostFramework() : mPerf = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateBarBgColor:emuiStyle=<*>,statusBarColor=#FFFCFCFC,navigationBarColor=#FFFCFCFC, isEmuiLight=<*> 
setBackgroundColor:new=<*>, old=-<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
during_ms:<*>,period_ms:<*> 
mStatsXtProcUid: /proc/net/comm/stats does not exist! 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
@@@@@@@@@@@@ uid :<*> download <*> 
received broadcast android.intent.action.BATTERY_CHANGED 
at java.io.FileInputStream.open(Native Method) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Error reading charge file 
<*> <*> <*> <*> <*> <*> is not <*> 
<*> = <*> <*> <*> <*> 
wifi_send_command: cmd:'IFNAME=wlan0 <*> 
Rac Change (PDC) data: [<*>, <*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
Add randomness: count=<*> entropy=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1008 len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> = false, <*> = false, <*> = <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> <*> 
c: true, w: false, t: false, l: false 
isHasPermission true 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
doCheckAccessInternet 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Application com.baidu.input_huawei is depended by other app, delay to H! 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> 
addCurrentApInfo addCellIdInfo 
<*> <*> <*> <*> 
at android.app.ContextImpl.enforce(ContextImpl.java:<*>) 
shouldBlockLocation running ... 
<*> <*> loss[<*>]=<*>%, volume=<*> 
<*> <*> <*> <*> 
poll before: g_monitor_fd =<*> 
gettimer:interval=<*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
<*> <*> = <*> 
<*> <*> <*> rt=<*>/<*> <*> <*> 
sendResultBroadcast policy:null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
gettimer:interval=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
<*> <*> <*> <*> <*> 
fingersense_touch_up() finished 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
setOverlap mOverlap:true, mDimmed:false 
getNeighboringCellInfo calling app is com.amap.android.ams 
shouldBlockLocation ret:false 
showNotificationAll 
Create obj success use class android.app.HwCustNotificationImpl 
mActiveIface: null 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
showNotificationAll 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotificationShade 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, <*> <*> <*> 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
poll before: g_monitor_fd =<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
updateTint: tint=<*> 
updateNotificationShade 
<*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*> 
onEntryUpdated:<*>|com.android.browser|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateDimmedActivatedHideSensitive overlap:true 
reusing notification for key: <*> 
Create obj success use class android.app.HwCustNotificationImpl 
onEntryAdded:<*>|com.android.browser|<*>|null|<*>, group=<*>|com.android.browser|g:nf_type_<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
updateNotificationShade 
SND -> {<*> bandwidth gettetherstats} 
removeNotificationChildren 
No peeking: not <*> <*> <*> 
onEntryUpdated:<*>|com.android.browser|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> <*> 
wifi_send_command: cmd:'IFNAME=wlan0 PKTCNT_POLL' 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
need to force refresh view 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
onEntryAdded:<*>|com.android.browser|<*>|null|<*>, group=<*>|com.android.browser|g:nf_type_<*> 
updateNotificationShade 
transferRemoteInputFocus: <*> 
updateDimmedActivatedHideSensitive overlap:true 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
removeNotificationChildren 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
ITrafficInfo:ITrafficInfo create 301updateBytes = <*> 
disableEffects=null canInterrupt=false once update: false 
showNotificationAll 
removeNotificationChildren 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*> <*> <*> 
transitionTo:mode=<*>, isEmuiStyle=true 
state.clipTopAmount:<*>, i:<*> 
updateDimmedActivatedHideSensitive overlap:true 
updateClipping isOverlap:true 
<*> <*> <*> = <*> 
removeNotificationChildren 
Create obj success use class android.app.HwCustNotificationImpl 
getTypeIcon type:<*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
bmp is null : false 
bmp is null : false 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> = <*> 
No peeking: not <*> <*> <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
reusing notification for key: <*> 
csr 
c: true, w: false, t: false, l: false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, <*> <*> <*> 
getOrInflateState subId:<*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
updateClipping isOverlap:false 
applyInPlace=true shouldPeek=false alertAgain=true 
transferRemoteInputFocus: <*> 
disableEffects=null canInterrupt=false once update: false 
transferRemoteInputFocus: <*> 
transferRemoteInputFocus: <*> 
reusing notification for key: <*> 
RCV <- {<*> <*> <*> <*> <*> 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
wlan0: Control interface command 'PKTCNT_POLL' 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
removeNotificationChildren 
showNotificationAll 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null <*> defaults=0x0 flags=0x2 color=0x00000000 <*> <*> <*> 
updateNotificationShade 
updateNotificationShade 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> = null 
<*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null <*> defaults=0x0 flags=0x2 color=0x00000000 <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
ExtraTrafficSetting:result is empty 
onEntryRemovedInternal:<*>|com.android.browser|<*>|null|<*>, group=<*>|com.android.browser|g:nf_type_<*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
enqueueNotificationInternal: n.getKey = <*> 
removeNotificationChildren 
updateNotificationShade 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
NormalTrafficAnalysis:alert byte = <*>, so return 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
updateTint: tint=<*> 
showNotificationAll 
Create obj success use class android.app.HwCustNotificationImpl 
applyInPlace=true shouldPeek=false alertAgain=true 
Create obj success use class android.app.HwCustNotificationImpl 
transferRemoteInputFocus: <*> 
removeNotificationChildren 
NormalTrafficAnalysis:alert byte = <*>, so return 
LeisureTrafficSetting:result is empty 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
removeNotificationChildren 
updateClipping isOverlap:false 
addFreezeProcess pkg:com.huawei.wallet 
Create obj success use class android.app.HwCustNotificationImpl 
transferRemoteInputFocus: <*> 
sending broadcast to Pid = <*>, Uid = <*> 
RCV <- {<*> <*> <*> <*> <*> 
onEntryUpdated:<*>|com.android.browser|<*>|null|<*> 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
<*> <*> <*> <*> 
updateTint: tint=<*> 
No peeking: not <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
removeNotificationChildren 
transferRemoteInputFocus: <*> 
<*> <*> = -<*> 
Create obj success use class android.app.HwCustNotificationImpl 
transferRemoteInputFocus: <*> 
connect :true 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null <*> defaults=0x0 flags=0x2 color=0x00000000 <*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
enqueueNotificationInternal: n.getKey = <*> 
transferRemoteInputFocus: <*> 
showNotificationAll 
updateNotificationShade 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
onEntryUpdated:<*>|com.android.browser|<*>|null|<*> 
m1: false 
isCardAbsent slot:<*> slotState:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateClipping isOverlap:false 
Create obj success use class android.app.HwCustNotificationImpl 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
No peeking: not <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
removeNotificationChildren 
updateNotificationShade 
removeNotificationChildren 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
create: <*> 
<*> <*> = <*> 
msg = <*> received 
updateTint: tint=<*> 
updateNotificationShade 
transferRemoteInputFocus: <*> 
onEntryUpdated:<*>|com.android.browser|<*>|null|<*> 
wlan0: Control interface command 'PKTCNT_POLL' 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
skip-low-Level:<*>(<*>),DataDisable;use level-<*> 
<*> = <*> 
begin 
QSEECom_send_cmd return! 
KGSvcFp onAuthenticationAcquired.<*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.0967255E-<*> 
<*> <*> <*> <*> is <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper$<*>.onMagazinePicLoaded(KeyguardWallpaper.java:<*>) 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper.-wrap4(KeyguardWallpaper.java) 
onNotificationVisibilityChanged called 
The tag is null error! 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
SleepPolicy:<*> 
<*> <*> rt=<*>/<*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
acquire lock=<*>, flags=0x1, tag="hibernation", name=com.huawei.powergenie, ws=null, uid=<*>, pid=<*> 
onEntryAdded:<*>|com.android.browser|<*>|null|<*>, group=<*>|com.android.browser|g:nf_type_<*> 
RCV <- {<*> <*> Firewall command succeeded} 
showNotificationAll 
queryIntentActivitiesAsUser size results:<*>, for <*> 
updateNotificationShade 
Remaining Num Attempts = <*> 
handleNotifyScreenTurningOn 
onEntryAdded:<*>|com.android.browser|<*>|null|<*>, group=<*>|com.android.browser|g:nf_type_<*> 
receive data len = <*> 
KGSvcFp onAuthenticationAcquired.<*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
need to <*> <*> <*> 
send data return = <*> 
receive data len = <*> 
template id:<*> 
<*> <*> <*> <*> <*> <*> <*> 
PowerManagerNotifier onWakefulnessChangeStarted: wakefulness=<*>, reason=<*>, <*> <*> <*> 
PowerManagerNotifier <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> took <*> ms 
<*> <*> <*> : <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
mIntentReceiver begin 
<*> <*> rt=<*>/<*> <*> <*> 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
PFW.HwPFWAppRestartPolicy:receive action = android.intent.action.SCREEN_ON 
<*> <*> <*> <*> <*> 
onReceive, action:android.intent.action.SCREEN_ON 
<*> when=<*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
NormalTrafficAnalysis:alert byte = <*>, so return 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
process buffer and get message 
RCV <- {<*> <*> Firewall command succeeded} 
begin 
receive data len = <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
reusing notification for key: <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
showNotificationAll 
removeNotificationChildren 
<*> <*> <*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
random pool - hexdump(len=<*>): [REMOVED] 
<*> <*> <*> <*> <*> <*> <*> <*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x103b len=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ExtraTrafficSetting:result is empty 
removeNotificationChildren 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
showNotificationAll 
transferRemoteInputFocus: <*> 
reusing notification for key: <*> 
<*> = null 
updateNotificationShade 
<*> <*> <*> <*> <*> 
<*>|after compensate: cache step_<*> 
updateNotificationShade 
acquire lock=<*>, flags=0x1, tag="hibernation", name=com.huawei.powergenie, ws=null, uid=<*>, pid=<*> 
ambient lux=<*>.<*>,timeStamp =<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> MotionEvent { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
scheduleCheckFreezeScreen sendMessageDelayed 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateLightsLocked --> mBatteryLight.turnOff 
<*> <*> <*> <*> <*> <*> <*> 
load icon id : <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
setProgress: <*> 
state.clipTopAmount:<*>, i:<*> 
state.clipTopAmount:<*>, i:<*> 
Sending non-protected broadcast <*> from system <*> <*> <*> 
android.content.pm.PackageManager$NameNotFoundException: com.sankuai.meituan 
at com.huawei.systemmanager.rainbow.db.CloudDBAdapter.applyDefaultPolicy(CloudDBAdapter.java:<*>) 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
QOS_level:<*>(<*>),DataDisable;use level-<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
at com.android.server.pm.Settings.getInstallerPackageNameLPr(Settings.java:<*>) 
cleanUpApplicationRecord -- <*> 
removeFreezeProcess pkg:com.huawei.appmarket 
querySoundEffectsEnabled... 
acquire lock=<*>, flags=0x1, tag="*launch*", name=android, ws=WorkSource{<*>}, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
poll before: g_monitor_fd =<*> 
gettimer:interval=<*> 
mVSimCurCardType is -<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1054 len=<*> 
wlan0: Control interface command <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*> <*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
<*> <*> <*> <*> <*> <*> <*> do not <*> <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
StartupResidentService:InnerHandler Message:<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
com.amap.android.ams useCivilNlpPackage 
<*> <*> <*> found in app 
<*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, <*> <*> ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
AbsProtectAppControl:handleMessage:<*> 
<*> <*> <*> 
removeNotificationChildren 
Calling fingersense_classify_touch() 
VirusAppsManager:begin isVirusAppExist 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
Sending non-protected broadcast <*> from system <*> <*> <*> 
<*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
<*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
chinaDateTime:下午<*>:<*> 
handleTimeUpdate 
Model onReceive user=UserHandle{<*>} 
<*> <*> <*> 
mIsEffect:false 
querySoundEffectsEnabled... 
<*> <*> <*> <*> <*> <*> <*> <*> uid <*> <*> display <*> 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> uid: <*>, pid: <*> 
closeQs 
JIT profile information will not be recorded: profile file does not exits. 
at com.dianping.nvnetwork.i.a(NVGlobal.java:<*>) 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
at com.android.providers.settings.SettingsProvider.mutateSystemSetting(SettingsProvider.java:<*>) 
at android.provider.Settings$System.putString(Settings.java:<*>) 
at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<*>) 
<*> <*> <*> <*> 
<*> <*> state = <*>, <*> <*> <*> <*> = <*>, <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> = <*>, <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> = <*> <*> = <*> 
<*> <*> <*> <*> <*> <*> = <*>, <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> = <*> <*> = <*> 
<*> <*> line <*> <*> 
handleANRFilterFIFO,uid = <*> = <*> 
at android.os.Binder.execTransact(Binder.java:<*>) 
<*> <*> <*> = <*> 
<*> <*> <*> is not in the <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*>, <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
@@@@@@@@@@@@ uid :<*> download :true 
<*> <*> <*> <*> 
statusBarIconTint=#B3FFFFFF,navigationBarIconTint=#FF<*> 
random pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1054 len=<*> 
bssid=1c:fa:<*>:c5:7b:ce;freq=<*>;level=<*>;flags=<*>;ssid=TP-LINK_C57BCE; 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x103b len=<*> 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
loadFileCache... 
<*> <*> <*> <*> <*> <*> <*> 
makeDefaultPlaylist 
shouldBlockLocation running ... 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> <*> = <*> 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = <*> = <*> 
<*> <*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = <*> = <*> 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> line <*> <*> 
<*> <*> <*> <*> 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleANRFilterFIFO,uid = <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = <*> = <*> 
<*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = <*> = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
onFling::not valid gesture or touch plus on, false, return! 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
search 
<*> <*> <*> duration=<*> } transition to: <*> <*> 
<*> <*> <*> 
at com.android.providers.settings.SettingsProvider.insertGlobalSetting(SettingsProvider.java:<*>) 
get the task from ActivityManager size is <*> <*> 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = <*> = <*> 
shouldBlockLocation ret:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*>, <*> <*> <*> <*> <*> <*> <*> 
at com.android.providers.settings.SettingsProvider.enforceWritePermission(SettingsProvider.java:<*>) 
at android.content.ContentProvider$Transport.call(ContentProvider.java:<*>) 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
HwLocalLocationManager requestLocation 
<*> <*> <*> 
getNeighboringCellInfo calling app is <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
IEs - hexdump(len=<*>): <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> <*> <*> <*> 6c <*> <*> <*> 2a <*> <*> <*> <*> ... 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1008 len=<*> 
bssid=fc:d7:<*>:a5:e5:dc;freq=<*>;level=<*>;flags=<*>;ssid=想连wifi，臣妾做不到; 
t:false, fl: false, p: <*>, ce: true, we: true 
cancelNotification,index:<*> 
updateTint: tint=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
getInstalledApplications blocked 
<*> <*> <*> 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
QOS_level:<*>(<*>),DataDisable;use level-<*> 
playSoundEffect effectType: <*> 
querySoundEffectsEnabled... 
Failure getting entry for <*> (t=<*> e=<*>) (error <*>) 
Launcher.LauncherProvider queried count: <*> 
at com.android.providers.settings.SettingsProvider.enforceWritePermission(SettingsProvider.java:<*>) 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = <*> = <*> 
getInstalledApplications blocked 
handleANRFilterFIFO,uid = 10146cmd = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
handleANRFilterFIFO,uid = 10146cmd = <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10146cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10146cmd = <*> 
at android.support.v4.content.al.call(ModernAsyncTask.java:<*>) 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
handleANRFilterFIFO,uid = 10146cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10146cmd = <*> 
at android.content.ContentProvider.enforceReadPermissionInner(ContentProvider.java:<*>) 
at android.os.Binder.execTransact(Binder.java:<*>) 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10146cmd = <*> 
at android.content.ContentProvider$Transport.enforceReadPermission(ContentProvider.java:<*>) 
handleANRFilterFIFO,uid = 10146cmd = <*> 
getNeighboringCellInfo calling app is <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10146cmd = <*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10146cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation running ... 
getNeighboringCellInfo calling app is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10146cmd = <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
<*> <*> <*> 
at android.content.ContentProvider$Transport.query(ContentProvider.java:<*>) 
gettimer:interval=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
querySoundEffectsEnabled... 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
<*> <*> <*> size is <*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation ret:false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> = false, <*> = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
shouldBlockLocation running ... 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10146cmd = <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1054 len=<*> 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1047 len=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10146cmd = <*> 
shouldBlockLocation ret:false 
getNeighboringCellInfo calling app is <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
Returning system default Launcher 
scheduleCheckFreezeScreen sendMessageDelayed 
handleANRFilterFIFO,uid = 10146cmd = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*>, <*> <*> <*> <*> <*> <*> <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = 10146cmd = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Access denied finding property <*> 
Access denied finding property <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
wifi_send_command: cmd:'IFNAME=wlan0 PKTCNT_POLL' 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
shouldBlockLocation running ... 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
handleANRFilterFIFO,uid = 10146cmd = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
HoldService:locationInfo switch is on . pid = <*> 
<*> <*> <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> <*> flags=0xb age=<*> est=<*> 
IEs - hexdump(len=<*>): <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> <*> <*> <*> 6c <*> <*> <*> 2a <*> <*> <*> <*> ... 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
Add randomness: count=<*> entropy=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1049 len=<*> 
bssid=bc:d1:<*>:bb:c9:e2;freq=<*>;level=<*>;flags=<*>;ssid=TP-LINK_fen; 
bssid=6c:<*>:<*>:<*>:<*>:3a;freq=<*>;level=<*>;flags=<*>;ssid=MERCURY_563A; 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
bssid=<*>:3f:5d:<*>:a5:<*>;freq=<*>;level=<*>;flags=<*>;ssid=WAVLINK_A507; 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> 6c <*> <*> <*> <*> <*> <*> 8b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
BSS: last_scan_res_used=<*>/<*> 
Add randomness: count=<*> entropy=<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x103b len=<*> 
WPS: WFA subelement id=<*> len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1049 len=<*> 
<*> <*> <*> <*> <*> <*> <*> 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10146cmd = <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
m1: false 
mThermalService is NULL! 
setAlarmsPending ... 
<*> ok, pid: <*> 
release:lock=<*>, flg=0x0, tag="hibernation", name=com.huawei.powergenie", ws=null, uid=<*>, pid=<*> 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
random pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x104a len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1008 len=<*> 
start expired. level:-<*> 
mVSimCurCardType is -<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
<*> <*> = <*> 
getQueryTcpResult failed. 
<*> <*> <*> <*> 
fingersense_classify_touch() finished 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
QOS_level:<*>(<*>),DataDisable;use level-<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
total/<*>/<*>,android.uid.system:<*>/<*>/<*>,com.android.packageinstaller/<*>/<*>,unknown:<*>/<*>/<*>,com.android.browser/<*>/<*>,com.sankuai.meituan/<*>/<*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> = <*> 
InputDispatcher::monitor frozen check! 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
Add randomness: count=<*> entropy=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1049 len=<*> 
bssid=fc:d7:<*>:a5:e5:dc;freq=<*>;level=<*>;flags=<*>;ssid=想连wifi，臣妾做不到; 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1023 len=<*> 
Received kernel message payload: event <*> 
fingersense_classify_touch() finished 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: true 
fingersense_classify_touch() finished 
fingersense_touch_up() finished 
shouldBlockLocation running ... 
at android.content.ContentProvider.enforceReadPermissionInner(ContentProvider.java:<*>) 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> <*> <*> <*> 6c <*> <*> <*> 2a <*> <*> <*> <*> 0c <*> <*> <*> 2d <*> <*> <*> <*> <*> <*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
Add randomness: count=<*> entropy=<*> 
<*> <*> <*> <*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1042 len=<*> 
action:android.net.wifi.SCAN_RESULTS, mPermissionType:<*> 
send_cmd_kernel: cmd=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
RCV <- {<*> <*> Firewall command succeeded} 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
power log dlsym ok 
<*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
netmask =<*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
notifyUiVisibilityChanged:vis=0x8608, SystemUiVisibility=0x<*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1024 len=<*> 
<*> <*> = <*> 
<*> <*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
AwareMem_Kill: updateGroupList package: move high <*> <*> 
Received kernel message payload: event <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
random pool - hexdump(len=<*>): [REMOVED] 
Dispatching event to interface: wlan<*> 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1008 len=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> <*> <*> 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10146cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
onTouchEvent: code=<*>, action=<*>, <*> { action=ACTION_DOWN, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
fingersense_touch_up() finished 
obtain, mHwFlags=<*> 
scheduleCheckFreezeScreen sendMessageDelayed 
handleANRFilterFIFO,uid = 10146cmd = <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
<*> <*> = <*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
transitionTo:mode=<*>, isEmuiStyle=false 
handleANRFilterFIFO,uid = 10146cmd = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
handleTouchEvent:MotionEvent { action=ACTION_DOWN, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
Calling fingersense_touch_up() 
HwPhoneWindowManager has intercept Key : <*>, <*> <*> <*> <*> : <*> 
at android.content.ContentProvider$Transport.call(ContentProvider.java:<*>) 
HoldService:PHONE_CODE_PERMISSION is allowed . <*> <*> <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
shouldBlockLocation running ... 
handleANRFilterFIFO,uid = 10146cmd = <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
obtain, mHwFlags=<*> 
shouldBlockLocation ret:false 
fingersense_touch_up() finished 
answer call by keyCode = <*>, down = false, isSupVolumnkeyAnswerCall = false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onForegroundActivitiesChanged pid = <*>, uid = <*> 
Received kernel message payload: event <*> 
<*> <*> RTT[<*>]=<*>, volume=<*> 
<*> <*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> 
at android.content.ContentProviderNative.onTransact(ContentProviderNative.java:<*>) 
handleANRFilterFIFO,uid = 10146cmd = <*> 
interceptKeyTq keycode=<*> interactive=true keyguardActive=false <*> <*> <*> <*> <*> 
<*> <*> <*> 
handleTouchEvent:MotionEvent { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
obtain, mHwFlags=-<*> 
Client requesting input be hidden, pid=<*> 
<*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1021 len=<*> 
bssid=1c:fa:<*>:c5:7b:ce;freq=<*>;level=<*>;flags=<*>;ssid=TP-LINK_C57BCE; 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1024 len=<*> 
c: true, w: <*> t: false, l: false 
wlan0: Control interface command <*> 
######### CMD_QUERY_PKTS ######## 
<*> <*> <*> <*> <*> <*> <*> <*> 
start expired. level:-<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Calling fingersense_touch_up() 
<*> <*> <*> 
DynamicUpdater registerReceiver 
DynamicUpdater call updateFolder 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
notifyUiVisibilityChanged:vis=0xc0000700, SystemUiVisibility=0xc<*> 
at android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(SQLiteDatabase.java:<*>) 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onTransact in code is: <*> 
<*> <*> <<< ERROR(<*>) >>> <*> <*> <*> <*> <*> 
connect :true 
fingersense_classify_touch() finished 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
transitionTo:mode=<*>, isEmuiStyle=false 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
state.clipTopAmount:<*>, i:<*> 
<*> <*> <*> <*> <*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
updateDimmedActivatedHideSensitive overlap:true 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
state.clipTopAmount:<*>, i:<*> 
state.clipTopAmount:<*>, i:<*> 
t:false, fl: false, p: <*>, ce: true, we: true 
Split enqueueing broadcast <*> <*> 
<*> <*> <*> <*> <*> <*> <*> need to <*> <*> <*> = <*> , <*> = <*> 
Split enqueueing broadcast <*> <*> 
bmp is null : false 
<*> <*> <*> 
<*> <*> : <*> 
<*> <*> <*> 
<*> <*> <*> <*> changed bounds; rebatching 
<*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
m1: false 
fingersense_touch_up() finished 
setProgress: <*> 
updateClipping isOverlap:true 
<*> <*> V.ED..... ........ <*>,<*>-<*>,<*> #7f14004e app:id/msim_status_bar_operators_card_one_id} 
updateClipping isOverlap:false 
<*> <*> <*> <*> 
<*> <*> RTT[<*>]=<*>, volume=<*> 
<*> = <*> <*> <*> <*> 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
Dispatching event to interface: wlan<*> 
WPS: attr type=0x1049 len=<*> 
bssid=c8:3a:<*>:4b:c9:<*>;freq=<*>;level=<*>;flags=<*>;ssid=Tenda_4BC990; 
WPS: attr type=0x1008 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1049 len=<*> 
wsr 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> = <*>.<*> 
Change in state from: <*> <*> <*> 
check perfhub service fail! 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> to get AllImpl object <*> <*> 
moveTaskToTop mTaskChanged:true 
<*> <*> <*> <*> <*> <*> uid = <*>, <*> = <*> 
getRecentTasks: topActivity=ComponentInfo{com.android.browser/com.uc.browser.InnerUCMobile} 
Destroying surface <*> called by com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> <*> <*> <*> <*> <*> <*> 
applyIconTint ignore 
onForegroundActivitiesChanged pid = <*>, uid = <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Launcher.LauncherProvider queried count: <*> 
<*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
csr 
IEs - hexdump(len=<*>): <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> <*> <*> <*> 6c <*> <*> <*> 2a <*> <*> <*> <*> ... 
Beacon IEs - hexdump(len=<*>): <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> <*> <*> <*> 6c <*> <*> 0d <*> <*> 0c <*> <*> ... 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
IEs - hexdump(len=<*>): <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0b <*> <*> <*> <*> 6c <*> <*> 0b 2a <*> <*> <*> <*> ... 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1008 len=<*> 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag <*> <*> <*> <*> <*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> <*> <*> age=<*> est=<*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1044 len=<*> 
bssid=c0:<*>:<*>:6c:db:<*>;freq=<*>;level=<*>;flags=<*>;ssid=XTC-20140620ZII_Network_<*>; 
WPS: attr type=0x1024 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
wifi_send_command: cmd:'IFNAME=wlan0 SIGNAL_POLL' 
<*> <*> <*> <*> 
<*> <*> = <*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
<*> = <*> <*> <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace : getkey <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: <*> <*> <*> <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Beacon IEs - hexdump(len=<*>): <*> 0b <*> <*> 2d <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> 0c <*> <*> <*> <*> <*> 0b <*> <*> <*> <*> <*> <*> ... 
BSS: last_scan_res_used=<*>/<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
bssid=c0:<*>:<*>:6c:db:<*>;freq=<*>;level=<*>;flags=<*>;ssid=XTC-20140620ZII_Network_<*>; 
<*> <*> <*> <*> 
Change in state from: <*> <*> <*> 
Proxy wakelock uid = <*> pid = <*> 
handleTimeUpdate 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
nspFileSize<*> 
value: <*> 
tmp: nsp-callback=http://logservice.vmall.com/osg/logServerAction!uf.htm?lsId=<*>&st=8GizDMFJTvMVAqA1o8peOOoOnD6yUZIPlgy6gbNIi3M%3D&dsKey=<*>&tblName=<*>&nsp-callback-status=<*>&nsp-file-md5=8ccc2277d7a200c1b4bc6d85150b0e70&nsp-file-size=<*>&nsp-ts=<*> 
LM mrssi=-<*> 
<*> <*> loss[<*>]=<*>%, volume=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
nspFileSize<*> 
wlan0: Control interface command 'SIGNAL_POLL' 
ITrafficInfo:ITrafficInfo create 301updateBytes = <*> 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> 6c <*> <*> <*> <*> <*> <*> 8b <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 0d <*> 2a <*> ... 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
Add randomness: count=<*> entropy=<*> 
Add randomness: count=<*> entropy=<*> 
Add randomness: count=<*> entropy=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x104a len=<*> 
bssid=5c:<*>:bf:7f:2a:5c;freq=<*>;level=<*>;flags=<*>;ssid=MERCURY_7F2A5C; 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1008 len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> = -<*> 
<*> = <*> <*> <*> <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> <*> = <*>, <*> = <*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x1042 len=<*> 
Can't find <*> <*> <*> 
netmask =<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
t:false, fl: false, p: <*>, ce: true, we: true 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> id is <*> id is [<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> rtt_tcp_packets=<*>, rtt_tcp_duration=<*>, rtt_lan_duration=<*>, rtt_lan_failures=<*>, rtt_lan_succ=<*>, rtt_lan_max=<*>, rtt_lan_min=<*>,same_area_frequency=<*>,adjacent_area_frequency=<*>] 
wlan0: Control interface command <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
netmask =<*> 
m2: false, m3: false 
<*> freq=<*> qual=<*> noise=<*>~ level=<*> snr=<*> flags=0xb age=<*> est=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1021 len=<*> 
bssid=1c:fa:<*>:c5:7b:ce;freq=<*>;level=<*>;flags=<*>;ssid=TP-LINK_C57BCE; 
WPS: attr type=0x104a len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1011 len=<*> 
c: true, w: true, t: false, l: false 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> delay to H! 
<*> <*> loss[<*>]=<*>%, volume=<*> 
gettimer:interval=<*> 
Calling fingersense_classify_touch() 
CTRL-DEBUG: ctrl_sock-sendmsg: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
IEs - hexdump(len=<*>): <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ... 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1042 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1024 len=<*> 
AwareUserHabit: getTopList is called 
c: true, w: true, t: false, l: false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<*>) 
after exceptionCatchSetup 
<*> <*> RTT[<*>]=<*>, volume=<*> 
<*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
<*> called by <*> 
<*> <*> <*> <*> <*> 
<*> <*> is null 
shouldBlockLocation ret:false 
isCloneProcess = false 
set(null) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
shouldBlockLocation running ... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
handleANRFilterFIFO,uid = 10146cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
wlan0: BSS: <*> <*> <*> <*> <*> 
random pool - hexdump(len=<*>): [REMOVED] 
Add randomness: count=<*> entropy=<*> 
random pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1011 len=<*> 
bssid=fc:d7:<*>:a5:e5:dc;freq=<*>;level=<*>;flags=<*>;ssid=想连wifi，臣妾做不到; 
bssid=<*>:<*>:<*>:c3:8c:<*>;freq=<*>;level=<*>;flags=<*>;ssid=shuilin; 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x103b len=<*> 
<*> <*> <*> <*> <*> *, const <*> *, const void <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
action:android.location.GPS_ENABLED_CHANGE, mPermissionType:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> is not <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
<*> <*> <*> : <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
<*> <*> RTT[<*>]=<*>, volume=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
HoldService:locationInfo switch is on . pid = <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = 10146cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> line <*> <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
shouldBlockLocation ret:false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x1011 len=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: attr type=0x103c len=<*> 
WPS: attr type=0x1024 len=<*> 
bssid=<*>:fc:<*>:<*>:<*>:ee;freq=<*>;level=<*>;flags=<*>;ssid=TP-LINK_90EE; 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1021 len=<*> 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
<*> <*> is im app and connected ok, delay to H! 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
start expired. level:-<*> 
<*> <*> <*> <*> <*> <*> = <*>, <*> <*> <*> <*> <*> <*> = <*>, <*> = <*>, <*> = <*> <*> = <*> 
<*> void <*> uint32_t, const <*> void *) line <*> <*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
[ReceiverDispatcher-<*>]isSupportsMultipleUsers: true(android/null:<*>) 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
Split enqueueing broadcast <*> <*> 
<*> pid = <*>, uid = <*> 
wlan0: Control interface command 'PKTCNT_POLL' 
send_cmd_kernel: cmd=<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
RCV <- {<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
formatChinaDateTime equals. 
formatChinaDateTime equals. 
formatChinaDateTime equals. 
<*> <*> <*> <*> rtt_tcp_packets=<*>, rtt_tcp_duration=<*>, rtt_lan_duration=<*>, rtt_lan_failures=<*>, rtt_lan_succ=<*>, rtt_lan_max=<*>, rtt_lan_min=<*>,same_area_frequency=<*>,adjacent_area_frequency=<*>] 
Received kernel message payload: event <*> 
<*> <*> RTT[<*>]=<*>, volume=<*> 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Application com.tencent.mm is im app and connected ok, delay to H! 
wlan0: Control interface command 'SIGNAL_POLL' 
DisplayPowerController updatePowerState <*> useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, <*> screenAutoBrightness=<*>, userId=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Client requesting input be hidden, pid=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
wlan0: Control interface command 'SIGNAL_POLL' 
<*> <*> <*> <*> 
<*> <*> RTT[<*>]=<*>, volume=<*> 
<*> <*> <*> <*> <*> 
m2: false, m3: false 
c: true, w: true, t: false, l: false 
<*> <*> <*> = <*>, <*> = <*> 
<*> <*> <*> 
received cell-signal:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
######### CMD_QUERY_PKTS ######## 
<*> <*> <*> 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
<*> <*> <*> 
<*> <*> <*> <*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
WatchThread{<*>} TcpCirChannel.connect(TcpCirChannel.java:<*>) Connect to server address = [uc.huawei.com,] port = <*> 
netmask =<*> 
m1: false 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*> 
new ScenarioAction sPoolSize: <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*> <*> <*> <*> rtt_tcp_packets=<*>, rtt_tcp_duration=<*>, rtt_lan_duration=<*>, rtt_lan_failures=<*>, rtt_lan_succ=<*>, rtt_lan_max=<*>, rtt_lan_min=<*>,same_area_frequency=<*>,adjacent_area_frequency=<*>] 
<*> <*> <*> = <*>, <*> = <*> 
monitor check touch devices 
EventHub monitor: no key events in the past <*> 
wlan0: Control interface command 'PKTCNT_POLL' 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
Invalid profile no. <*>, total profiles <*> only 
c: true, w: false, t: false, l: false 
Invalid profile no. <*>, total profiles <*> only 
<*> <*> <*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
key: nsp-callback 
key: nsp-callback-status 
new ScenarioAction sPoolSize: <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> is im app and connected ok, delay to H! 
poll before: g_monitor_fd =<*> 
<*> <*> RTT[<*>]=<*>, volume=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
wlan0: Control interface command 'SIGNAL_POLL' 
begin of formatChinaDateRange <*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
<*> <*> <*> <*> 
Calling fingersense_touch_up() 
<*> <*> <*> <*> <*> <*> delay to H! 
m1: false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
answer call by keyCode = <*>, down = false, isSupVolumnkeyAnswerCall = false 
obtain, mHwFlags=<*> 
during_ms:<*>,period_ms:<*> 
Client requesting input be hidden, pid=<*> 
netmask =<*> 
m2: false, m3: false 
<*> <*> <*> <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
start expired. level:-<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> is null 
start expired. level:-<*> 
updateTcpSummery mRSSI:<*> HwCHRWifiRSSIGroup [rssi_index=<*>, rtt_tcp_packets=<*>, rtt_tcp_duration=<*>, rtt_lan_duration=<*>, rtt_lan_failures=<*>, rtt_lan_succ=<*>, rtt_lan_max=<*>, rtt_lan_min=<*>,same_area_frequency=<*>,adjacent_area_frequency=<*>] 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
[SocketRead_<*>:<*>:<*>-<*>]broadcast(),and mReceivers <*>(android/null:<*>) 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
wlan0: Control interface command 'SIGNAL_POLL' 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
WatchThread{<*>} TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
Dispatching event to interface: wlan<*> 
Add randomness: count=<*> entropy=<*> 
Add randomness: count=<*> entropy=<*> 
WPS: attr type=0x1047 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x103c len=<*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
<*> <*> <*> <*> = <*>, <*> = <*> 
Invalid profile no. <*>, total profiles <*> only 
c: true, w: false, t: false, l: false 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<*> = <*> <*> <*> 
<*> <*> = <*>.<*> 
dumpTcpResult: len=<*>,rtt=<*>,rttPkt=<*>,rttWn=<*>,cgt=<*>,cgtWn=<*> 
<*> <*> <*> = <*> 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
Invalid profile no. <*>, total profiles <*> only 
updateTcpSummery mRSSI:<*> HwCHRWifiRSSIGroup [rssi_index=<*>, rtt_tcp_packets=<*>, rtt_tcp_duration=<*>, rtt_lan_duration=<*>, rtt_lan_failures=<*>, rtt_lan_succ=<*>, rtt_lan_max=<*>, rtt_lan_min=<*>,same_area_frequency=<*>,adjacent_area_frequency=<*>] 
<*> <*> <*> <*> <*> 
m1: false 
<*> <*> <*> <*> <*> <*> <*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
gettimer:interval=<*> 
netmask =<*> 
wlan0: Control interface command 'SIGNAL_POLL' 
<*> <*> loss[<*>]=<*>%, volume=<*> 
<*> <*> <*> 
start expired. level:-<*> 
formatChinaDateTime equals. 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
fingersense_touch_up() finished 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
performPollAndLog: 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Invalid profile no. <*>, total profiles <*> only 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
value: http://logservice.vmall.com/osg/logServerAction!uf.htm?lsId=<*>&st=8GizDMFJTvMVAqA1o8peOOoOnD6yUZIPlgy6gbNIi3M%3D&dsKey=<*>&tblName=<*> 
mStatsXtProcUid: /proc/net/comm/stats does not exist! 
setTracingEnabled:<*> 
total/<*>/<*>,android.uid.system:<*>/<*>/<*>,com.android.browser/<*>/<*>,unknown:<*>/<*>/<*> 
<*> <*> <*> <*> <*> <*> 
poll before: g_monitor_fd =<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Invalid profile no. <*>, total profiles <*> only 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Invalid profile no. <*>, total profiles <*> only 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
wlan0: Control interface command 'PKTCNT_POLL' 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
onFling::not valid gesture or touch plus on, false, return! 
during_ms:<*>,period_ms:<*> 
netmask =<*> 
Application com.huawei.espacev2 is im app and connected ok, delay to H! 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
<*> <*> level = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
HwDPMS received transaction_isHwFrameworkAdminAllowed, the ret: false 
handleTouchEvent:MotionEvent { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
Client requesting input be hidden, pid=<*> 
LM mrssi=-<*> 
<*> <*> RTT[<*>]=<*>, volume=<*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
RCV <- {<*> <*> <*> <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
c: true, w: false, t: false, l: false 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
fingersense_classify_touch() finished 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
wifi_send_command: cmd:'IFNAME=wlan0 SIGNAL_POLL' 
<*> = <*> <*> <*> 
<*> <*> <*> <*> <*> 
gettimer:interval=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
Received kernel message payload: event <*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
<*> <*> <*> = <*>, <*> = <*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> = <*>, <*> = <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Broadcasting intent ACTION_RAC_CHANGED 
shouldBlockLocation ret:false 
LM mrssi=-<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*>-<*> <*>:<*>:<*><浏览器>[com.android.browser]:[query]读取浏览器历史 
<*> <*> <*> <*> 
SND -> {<*> bandwidth gettetherstats} 
SND -> {<*> bandwidth <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
Calling fingersense_touch_up() 
<*> <*> <*> 
new ScenarioAction sPoolSize: <*> 
<*> <*> <*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
shouldBlockLocation ret:false 
m2: false, m3: false 
onSignal: mSubId=<*>,currDataSubID=<*> 
shouldBlockLocation ret:false 
<*> <*> <*> : <*> 
shouldBlockLocation running ... 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
received cell-signal:<*> 
m1: false 
onSignal: mSubId=<*>,currDataSubID=<*> 
fingersense_classify_touch() finished 
total/<*>/<*>,android.uid.system:<*>/<*>/<*>,com.android.browser/<*>/<*>,unknown:<*>/<*>/<*> 
start expired. level:-<*> 
m1: false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
netmask =<*> 
<*> <*> <*> <*> <*> <*> <*> WEBERRSEGS=<*> WEBOUTRSTS=<*> WEBESTABLISRST=<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
netmask =<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
hash_str: [B@b76b<*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
dispatch ordered broadcast [bgkeyapp] <*> <*> <*> has <*> receivers 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
JIT profile information will not be recorded: profile file does not exits. 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
syncCalendar begin! 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> : <*> 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> WEBERRSEGS=<*> WEBOUTRSTS=<*> WEBESTABLISRST=<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
wifi_send_command: cmd:'IFNAME=wlan0 SIGNAL_POLL' 
<*> <*> <*> <*> <*> 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
onTransact in code is: <*> 
wifi_send_command: cmd:'IFNAME=wlan0 SIGNAL_POLL' 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
fingersense_classify_touch() finished 
obtain, mHwFlags=<*> 
handleTouchEvent:MotionEvent { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
<*>-<*> <*>:<*>:<*><浏览器>[com.android.browser]:[query]读取浏览器历史 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
wlan0: Control interface command 'SIGNAL_POLL' 
updateTcpSummery mRSSI:<*> HwCHRWifiRSSIGroup [rssi_index=<*>, rtt_tcp_packets=<*>, rtt_tcp_duration=<*>, rtt_lan_duration=<*>, rtt_lan_failures=<*>, rtt_lan_succ=<*>, rtt_lan_max=<*>, rtt_lan_min=<*>,same_area_frequency=<*>,adjacent_area_frequency=<*>] 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
WatchThread{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is closed 
Received kernel message payload: event <*> 
DeviceStateListener:MyCityChanged: true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
onReceive, action:android.intent.action.BATTERY_CHANGED 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
StaEnabledState what=<*> 
battery changed pluggedType: <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
Rac Change (PDC) data: [<*>, <*>] 
Broadcasting intent ACTION_RAC_CHANGED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m2: false, m3: false 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] <*> <*> <*> <*> 
AwareMem_Kill: updateGroupList <*> move high <*> <*> 
m2: false, m3: false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
setGateWay <*>.<*>.<*>.<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
<*> <*> <*> <*> <*> 
Calling fingersense_classify_touch() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
new ScenarioAction sPoolSize: <*> 
<*> <*> <*> <*> 
<*> <*> level = <*> 
RSSI=<*>;LINKSPEED=<*>;NOISE=<*>;FREQUENCY=<*>; 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Invalid profile no. <*>, total profiles <*> only 
fingersense_classify_touch() finished 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*> <*> <*> <*> <*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
<*> = <*> <*> <*> <*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
sending broadcast to Pid = <*>, Uid = <*> 
TafficState:default sub id = 0slotIndex = <*> subscriptionId = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
fingersense_touch_up() finished 
gettimer:interval=<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
gettimer:interval=<*> 
fingersense_classify_touch() finished 
<*> <*> <*> <*> <*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
gettimer:interval=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, <*> <*> <*> 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> 0b <*> <*> 2d <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> 0c <*> <*> <*> <*> <*> 0b <*> <*> <*> <*> <*> <*> ... 
IEs - hexdump(len=<*>): <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> <*> <*> <*> 6c <*> <*> 0d 2a <*> <*> <*> <*> ... 
WPS: attr type=0x1042 len=<*> 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x1047 len=<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
AwareUserHabit: getTopList is called 
onFling::not valid gesture or touch plus on, false, return! 
send_cmd_kernel: cmd=<*> 
received cell-signal:<*> 
Calling fingersense_touch_up() 
csr 
4G, isCAState=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Calling fingersense_touch_up() 
Invalid profile no. <*>, total profiles <*> only 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
during_ms:<*>,period_ms:<*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
wlan0: Control interface command 'SIGNAL_POLL' 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
wlan0: Control interface command 'PKTCNT_POLL' 
onFling::not valid gesture or touch plus on, false, return! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> id is [<*>],ack id is [<*>]! 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> <*> 
total/<*>/<*>,android.uid.system:<*>/<*>/<*>,com.android.browser/<*>/<*> 
wlan0: Control interface command 'SIGNAL_POLL' 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
platform_can_split_snd_device: snd_device(<*>) num devices(<*>) new_snd_devices(<*>) 
ACDB -> <*> <*> <*> <*> 
worker idle 
start_output_stream: exit 
qsc_send_cmd finish 
receive data len = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
Model onReceive <*> <*> <*> <*> <*> 
Model onReceive user=UserHandle{<*>} 
<*> <*> rt=<*>/<*> <*> <*> 
<*> when=<*> what=<*> <*> <*> 
updateLight --> mIsNotificationExisting: false ledOnMS: <*> ledOffMS :<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = false 
enter addToIdleMessage(type:<*>), mainloop is busy, add to idleMessage 
setBackgroundColor:new=<*>, old=<*> 
setBackgroundColor:new=<*>, old=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
chinaDateTime:下午<*>:<*> 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
<*> <*> <*> <*> <*> <*> <*> 
setBarState:<*> 
transitionTo:mode=<*>, isEmuiStyle=true 
Apply window without WALLPAPER 
set navBarVisible 
sendImmediateMessage <*> 
Dis-Feature : <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bmp is null : false 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bmp is null : false 
<*> <*> <*> = <*>.<*> 
<*> <*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, <*> dataConnected=false, isRoaming=false 
onShowStatusChange show:false 
updateClipping isOverlap:false 
<*> <*> RTT[<*>]=<*>, volume=<*> 
<*> <*> = -<*> 
######### CMD_QUERY_PKTS ######## 
WebMonitor [mNetWorkIsSuck=<*> mUIDIsSuck=] WebSpeed [WEBSENDSEGS=<*> WEBRESENDSEGS=<*> WEBRECVSEGS=<*> WEBERRSEGS=<*> WEBOUTRSTS=<*> WEBESTABLISRST=<*> WEBRTTDURATION=<*> WEBRTTSEGS=<*> WEBSRTT=<*> WEBSNDDUPACKS=<*> SENDSEGS=<*> RESENDSEGS=<*> RECVSEGS=<*> ERRSEGS=<*> OUTRSTS=<*> ESTABLISRST=<*> RTTDURATION=<*> RTTSEGS=<*> SNDDUPACKS=<*> suckTimes=<*> recovage_times=<*>] 
generateAddAnimation:null, false 
showNotificationAll 
hideTraffic 
<*> <*> <*> 
<*> <*> <*> <*> 
action=android.intent.action.PACKAGE_RESTARTED queryReplace=false 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
<*> <*> <*> <*> <*> <*> is not <*> 
isCarrierConfigEnabled bundle is null 
result = <*> 
not encrypt 
/storage/emulated/<*>/log/LogService/uploading/MLA-AL00_MLA-AL00C00B318-log_D470C2EF_<*>_ALL.zip 
transfLength<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> OK ! 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
sending broadcast to Pid = <*>, Uid = <*> 
RCV <- {<*> <*> Firewall command succeeded} 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> 
key: nsp-content-range 
hideTraffic 
stopNavigating, mStarted=false 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: true 
total/<*>/<*>,android.uid.system:<*>/<*>/<*>,com.android.browser/<*>/<*>,unknown:<*>/<*>/<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> loss[<*>]=<*>%, volume=<*> 
######### CMD_QUERY_PKTS ######## 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
RCV unsolicited event from native daemon, event = <*> <*> <*> <*> <*> 
count:<*>,rx_sum:<*>,tx_sum:<*>,rxBytes:<*>,during_ms:<*>,rx_speed:<*>.<*>,tx_speed:<*>.<*>,rto:<*>.<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: false 
formatChinaDateTime equals. 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
hideTraffic 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
collectReceiverComponents, callerApp: null, <*> receiver size:<*>, flags: <*> 
ActivityThread,attachApplication 
<*> <*> <*> <*> = <*> 
is Beta User, userType = <*> 
<*> <*> <*> <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> disconnecting to <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
Calling a method in the system process without a qualified user: android.app.ContextImpl.startService:<*> android.content.ContextWrapper.startService:<*> <*> <*> <*> 
<*>|before compensate: cache step_<*> 
<*> <*> = <*> 
onStepCounterChange stepsNum:<*> 
SimCardManager:onReceive()-- mNameServSlot<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
wlan0: Control interface command 'PKTCNT_POLL' 
<*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
chinaDateTime:下午<*>:<*> 
<*> mReceivers <*>(android/null:<*>) 
updateClipping isOverlap:false 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
updateClipping isOverlap:false 
Error reading charge file 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
updateIsPoweredLocked: wasPowered=false, mIsPowered=false, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*> 
getConfigForPhoneId phoneId is invalid 
RCV <- {<*> IfaceClass idle <*> <*>} 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> <*> <*> 
get_spk_pa_type: pa is max<*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> not in <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
ACDB -> <*> 
<*> <*> <*> from <*> 
getRingerMode... 
updateNotificationShade 
hideTraffic 
BadgeContentObserver getBadgeNumber: <*> mComponentName :ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
begin of formatChinaDateRange <*> 
chinaDateTime:下午<*>:<*> 
Unproxy wakelock uid = <*> pid = <*> 
<*> <*> ==================== TCP CLIENT DISCONNECT ==================== 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> --> <*> <*> = false 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> <*> = <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> = <*>, tx = <*> 
[HttpClient.getDataWithRetry] success 
frz ok, pid: [<*>, <*>] 
isMusicActive... 
start expired. level:-<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event TCP_CONNECTED 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in fetching group <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
onReceive intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
isCarrierConfigEnabled bundle is null 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
connect :false 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
GetAddrInfoHandler addr: uc.huawei.com {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.open(Native Method) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
@@@@@@@@@@@@ uid :<*> download :true 
at java.io.FileInputStream.open(Native Method) 
<*> <*> = <*> 
sending alarm <*> type <*> when <*> com.tencent.mm},repeatInterval = <*>,listenerTag =null 
check dependency pid: <*> is depended by pid: <*> 
unproxy app:com.tencent.mm,uid:<*>,result:true 
<*> <*> <*> <*> <*> <*> pid: <*> 
act:android.intent.action.TIME_TICK flag:<*> FLAG_IS_FIRST_POWER_OFF_ALARM=false android.intent.extra.ALARM_COUNT=<*> 
dispatch ordered broadcast [bgkeyapp] <*> <*> <*> has <*> receivers 
keyAppBroadcastQueueForIntent intent Intent { <*> flg=0x10 (has extras) } on bgkeyapp queue 
set notification panel padding = <*> 
send: <*> 
handle_exception_events enter 
handle_exception_events enter 
<*> <*> <*> 
handle_exception_events enter 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> = <*>, <*> = <*> 
<*> <*> <*> <*> to true 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
<*> <*> <*> int, int, const <*> <*> <*> <*> <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateClipping isOverlap:false 
ACDB -> <*> <*> <*> <*> 
msg = <*> received 
process buffer and get message 
BadgeContentObserver getBadgeNumber: <*> mComponentName :ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
KGSvcFp onAuthenticationAcquired.<*> 
<*> <*> <*> <*> <*> <*> 
onAcquired(<*>) 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true <*> activityIn:false activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> 
offsetBrightness=<*>.<*>,mOffsetBrightness_last59.<*>,lux=<*>.<*>,mPosBrightness=<*>.<*>,mIsUserChange=false,mDelta=<*>.<*>,defaultBrightness=<*>.<*>,mStartLuxDefaultBrightness=<*>.95333mLastLuxDefaultBrightness=<*>.<*> 
<*> <*> <*> 
Wait finish 
<*> <*> <*> <*> false 
disable: < expand <*> <*> <*> <*> <*> <*> clock navigationbar <*> quick_settings > 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
receive data len = <*> 
<*> <*> V.ED..... ........ <*>,<*>-<*>,<*> #7f14004e app:id/msim_status_bar_operators_card_one_id} 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: com.netease.newsreader.activity 
<*> exit with code(<*>) 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
Apply window Height MATCH_PARENT 
[UserPresentReceiver.onReceive]Start! 
<*> <*> <*> <*> 
onNotificationVisibilityChanged called 
Reporting <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
updateLight --> mIsNotificationExisting: false ledOnMS: <*> ledOffMS :<*> 
updateLightsLocked --> mBatteryLight.turnOff 
adev_set_parameters: exit with code(<*>) 
<*> when=<*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
<*> <*> <*> <*> <*> 
updateClipping isOverlap:true 
<*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
I/LocTech-Value :: Data <*> <*> <*> <*> 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
updateClipping isOverlap:true 
disable_audio_route: exit 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
processOp opType: <*>, uid: <*>, pid: <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
qsc_decode end 
shouldBlockLocation ret:false 
Dispatching event to interface: wlan<*> 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
random_mix_pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1042 len=<*> 
WPS: attr type=0x1008 len=<*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1054 len=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
random pool - hexdump(len=<*>): [REMOVED] 
m2: false, m3: false 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
WPS: attr type=0x1044 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1044 len=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> 
m1: false 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
qsc_send_cmd finish 
begin 
[LogUploadService.onCreate] 
send data return = <*> 
suspendAutohide 
clearEffects :<*>|com.tencent.mm|<*>|null|<*> 
showNotificationAll 
updateLightsLocked --> mBatteryLight.turnOff 
<*> <*> <*> to uc.huawei.com:<*> 
monitor check touch devices 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> 
setProgress: <*> 
state.clipTopAmount:<*>, i:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
updateClipping isOverlap:false 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bmp is null : false 
bmp is null : false 
bmp is null : false 
Provider.call: getPrefString 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> = <*> 
<*> <*> <*> <*> <*> 
onExpandingStarted 
<*> <*> <*> <*> euid: <*> 
resumeTopActivityLocked: <*> <*> need to <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
updateLightsLocked,mInCall <*> <*> <*> == null?true 
updateLightsLocked,turn off notificationLight 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
updateClipping isOverlap:true 
setSystemUiVisibility vis=<*> mask=ffffffff oldVal=<*> newVal=<*> diff=<*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> #7f1403e3 app:id/speed} 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
updateNotificationShade 
start expired. level:-<*> 
cancelAutohide 
cancelNotification,index:-<*> 
cancelNotification,index:-<*> 
AwareMem_EventTracker: [APP_ACTIVITY_FINISH_<*>] is abandoned for memory <*> <*> <*> policy can not execute 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
JIT profile information will not be recorded: profile file does not exits. 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> 
starting registerNativeSignalAction... 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) notify user tcp connected successully at <*> to uc.huawei.com:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
queryIntentActivitiesAsUser size results:<*>, for <*> 
APS: 2DSDR: AbsListView.FlingRunnable.endFling, we will clear SDR ratio 
querySoundEffectsEnabled... 
<*> <*> <*> pid = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> flg=0x10 (has extras) } on bgkeyapp queue 
Client requesting input be hidden, pid=<*> 
setScrollingEnabled: true 
Launcher.LauncherProvider queried count: <*> 
received cell-signal:<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
<*> <*> RTT[<*>]=<*>, volume=<*> 
4G, isCAState=false 
getOrInflateState subId:<*> 
cancelAutohide 
cancelNotification,index:-<*> 
<*> <*> <*> <*> <*> <*> <*> 
at android.os.HandlerThread.run(HandlerThread.java:<*>) 
start expired. level:-<*> 
Client requesting input be hidden, pid=<*> 
update:rxPkts:<*>,txPkts:<*>,rxBytes:<*>,txBytes:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
wlan0: Control interface command 'SIGNAL_POLL' 
<*> <*> <*> <*> <*> <*> <*> 
setSystemUiVisibility vis=<*> mask=ffffffff <*> <*> <*> 
Client requesting input be hidden, pid=<*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
<*> = false 
Transact:getHwAdminCachedValue to device policy manager service. 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag <*> <*> <*> <*> <*> 
<*> <*> <*> - hexdump(len=<*>): <*> 
playSoundEffect effectType: <*> 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
CTRL-DEBUG: global_ctrl_sock-sendto: sock=<*> sndbuf=<*> outq=<*> send_len=<*> 
get AllImpl object = com.android.server.wifi.HwWifiServiceFactoryImpl@c<*> 
Client requesting input be hidden, pid=<*> 
<*> <*> <*> <*> <*> 
Beacon IEs - hexdump(len=<*>): <*> 0c <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 8b <*> <*> <*> <*> 6c <*> <*> 0d <*> <*> 0c <*> <*> ... 
CTRL_IFACE monitor sent successfully to /data/misc/wifi/sockets/wpa_ctrl_<*>-<*>\x<*> 
random pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
random pool - hexdump(len=<*>): [REMOVED] 
WPS: attr type=0x1024 len=<*> 
WPS: attr type=0x1021 len=<*> 
WPS: attr type=0x1054 len=<*> 
WPS: attr type=0x1049 len=<*> 
WPS: attr type=0x1023 len=<*> 
WPS: attr type=0x103b len=<*> 
WPS: WFA subelement id=<*> len=<*> 
bssid=<*>:5a:<*>:<*>:bf:c2;freq=<*>;level=<*>;flags=<*>;ssid=FAST_BFC2; 
WPS: WFA subelement id=<*> len=<*> 
WPS: attr type=0x1049 len=<*> 
wlan0: Control interface command 'BSS RANGE=<*>- MASK=0x3029d87' 
isCardAbsent slot:<*> slotState:<*> 
HwPhoneWindowManager has intercept Key : <*>, <*> <*> <*> <*> : <*> 
obtain, mHwFlags=<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> flg=0x10 (has extras) } on bgkeyapp queue 
sendEvent:action=<*>, flag=<*> 
obtain, mHwFlags=-<*> 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, metaState=<*>, flags=0x68, <*> repeatCount=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, metaState=<*>, flags=0x68, <*> repeatCount=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, metaState=<*>, flags=0x68, <*> repeatCount=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
notifyUiVisibilityChanged:vis=0x40000600, SystemUiVisibility=0x<*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
sendEvent:action=<*>, flag=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> 
gettimer:interval=<*> 
wifi_send_command: cmd:'IFNAME=wlan0 PKTCNT_POLL' 
netmask =<*> 
4G, isCAState=false 
getOrInflateState subId:<*> 
suspendAutohide 
HwDPMS received transaction_isHwFrameworkAdminAllowed, the ret: false 
<*> callerApp: ProcessRecord{34bf34f <*>:system/<*>}, <*> Intent { <*> <*> <*> (has extras) } 
Moving to PAUSED: <*> <*> <*> <*> (pause complete) 
DynamicUpdater call updateFolder 
<*> <*> <*> <*> ms 
<*> <*> <*> <*> 
isCloneProcess = false 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
poll before: g_monitor_fd =<*> 
QOS_level:<*>(<*>),DataDisable;use level-<*> 
### mPktChkBadCnt=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
suspendAutohide 
updateDimmedActivatedHideSensitive overlap:false 
enter addToIdleMessage(type:<*>), mainloop is busy, add to idleMessage 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
transitionTo:mode=<*>, isEmuiStyle=false 
updateDimmedActivatedHideSensitive overlap:false 
setProgress: <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
remove(null) changed bounds; rebatching 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
tcp.recv{<*>} TcpClientThread.readSocket(TcpClientThread.java:<*>) <<< ERROR(<*>) >>> socket read length failure -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
at com.android.systemui.qs.tiles.WifiTile.handleUpdateState(WifiTile.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
MagicLink2-BroadcastReceiver:====>NETWORK_STATE_CHANGED_ACTION 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
loss[<*>]=<*>%, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
RTT[<*>]=<*>, volume=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
NetworkAgentInfo [WIFI <*> <*> <*> <*> <*> <*> <*> <*> 
RCV <- {<*> <*> Tethering stats list completed} 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action <*> 
MagicLink2-BroadcastReceiver:====>WIFI_STATE_CHANGED_ACTION 
<*> <*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AppAutoStartupPolicy:prevent start receiver of package com.netease.newsreader.activity for action android.net.conn.CONNECTIVITY_CHANGE 
sending broadcast to Pid = <*>, Uid = <*> 
isSystemBootComplete =true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
upstreamIfaceTypes.add:<*> 
StartupResidentService:InnerHandler Message:<*> 
Dispatching event to interface: wlan<*> 
Dispatching event to interface: wlan<*> 
wlan0: BSS: <*> id <*> BSSID <*> <*> <*> due to <*> 
<*> <*> <*> <*> <*> 
handleTouchEvent:MotionEvent { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
sendEvent:action=<*>, flag=<*> 
setProgress: <*> 
updateDimmedActivatedHideSensitive overlap:true 
transitionTo:mode=<*>, isEmuiStyle=false 
<*> <*> <*> 
makeExpandedInvisible: mExpandedVisible=true 
Apply window Height <*> 
<*> <*> <*> <*> 
p2p0: CTRL-EVENT-TERMINATING 
<*> <*> <*> 
BluetoothManagerService:Message: <*> 
we: false 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
getProcessInfo: failed to find this proc 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
interceptKeyTq keycode=<*> <*> <*> <*> <*> <*> <*> <*> 
[UploadReceiver.onReceive] msg<*> 
<*> <*> <*> 
<*> <*> output <*> 
huawei_cust_set_parameters: exit with code(<*>) 
platform_get_native_support:napb: ui Prop enabled(<*>) version(<*>) 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
loadPic: <*> 
send data return = <*> 
QSEECom_send_cmd return! 
<*> Intent { <*> <*> 
onReceive 
ActivityThread,attachApplication 
at android.os.Looper.loop(Looper.java:<*>) 
at com.huawei.keyguard.support.magazine.KeyguardWallpaper.updateWallpaper(KeyguardWallpaper.java:<*>) 
<*> <*> <*> <*> <*> <*> 
Failing getSupportedFeatureset because HAL isn't started 
<*> <*> = false 
packageInstalled true! 
Animating brightness: target=<*>, rate=<*> 
handleShow 
<*> <*> <*> = false 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
TelecomServiceImpl: isInCall callState is <*>: <*> 
<*> <*> <*> 
writeSummaryFromParcelLocked, duration: <*> 
enter keyguard:<*> 
<*> = true 
OverscanTimeout run 
Provider.call: getPrefString 
getNextIndex: <*>; from <*> to <*>; size: <*> 
hideTraffic 
<*> <*> : <*> 
<*> <*> screen off <*> <*> <*> 
Get no-perm <*> <*> <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
RefreshBatteryInfo isBatteryLow: <*> 
getTempInfo error: null, <*> 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
getTempInfo error: null, <*> 
addFreezeProcess pkg:com.huawei.espacev<*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
<*> <*> <*> OK ! 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
queryIntentActivitiesAsUser size results:<*>, for <*> 
Received TIME_TICK alarm; rescheduling 
setAlarmsPending ... 
<*> <*> <*> <*> <*> = <*> 
<*> <*> = <*>, <*> = <*>, <*> = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
acquire lock=<*>, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=<*>, pid=<*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag <*> 
check dependency pid: <*> is depended by pid: <*> 
set notification panel padding = <*> 
act:android.intent.action.TIME_TICK flag:<*> FLAG_IS_FIRST_POWER_OFF_ALARM=false android.intent.extra.ALARM_COUNT=<*> 
<*> <*> <*> <*> 
set ordinal Value failed! name is not in the enum map, name = ChrVolteStatisticInfo 
Model onReceive user=UserHandle{<*>} 
<*> <*> <*> <*> mMaxValue=<*>, mMinValue=<*> 
<*> <*> <*> <*> 
getDBOptId() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
at android.os.HandlerThread.run(HandlerThread.java:<*>) 
is Beta User, userType = <*> 
is Beta User, userType = <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
set(null) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
begin of formatChinaDateRange <*> 
showNotificationAll 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> 
release:lock=<*>, flg=0x0, tag="hibernation", name=com.huawei.powergenie", ws=null, uid=<*>, pid=<*> 
updateLightsLocked --> level:<*>, status:<*> 
received broadcast android.intent.action.BATTERY_CHANGED 
handleDreamLocked 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
getTempInfo error: null, <*> 
create: <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> 
enableTriggerMethod 
<*> <*> <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
Alarm triggering (type <*> or <*>): <*> type <*> when <*> <*> <*> type <*> when <*> android}] 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
set notification panel padding = <*> 
NormalTrafficAnalysis:alert byte = <*>, so return 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
<*> <*> <*> : <*> 
BatteryStatisticsHelper:counts =<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
set notification panel padding = <*> 
onShowStatusChange show:false 
<*>|REPORT : <*> <*> <*> <*> 
updateTint: tint=<*> 
handleMessage(<*>) 
Handle message: <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
Application com.baidu.input_huawei is depended by other app, delay to H! 
chinaDateTime:下午<*>:<*> 
<*> <*> <*> <*> 
<*> id = <*> 
set notification panel padding = <*> 
updateDimmedActivatedHideSensitive overlap:false 
Error reading charge file 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =time_tick 
<*> enter for <*> <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
Action: Unknown 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Failed to get <*> 
updateDimmedActivatedHideSensitive overlap:false 
send: <*> 
updateTint: tint=<*> 
handle_exception_events enter 
process buffer and get message 
no controller energy info supplied 
<*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
handle_exception_events enter 
send: <*> 
Error reading charge file 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> = <*> 
<*> <*> <*> = <*> to <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
process buffer and get message 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
received broadcast android.intent.action.BATTERY_CHANGED 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
mIsScreenOn is: false, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> is: <*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
sendMessage with obj<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
mStatsXtProcUid: /proc/net/comm/stats does not exist! 
msg = <*> received 
ExtraTrafficSetting:result is empty 
no controller energy info supplied 
handleMessage(<*>) 
ApStaDisabledState what=<*> 
RefreshBatteryInfo isBatteryLow: <*> 
BatteryIntent received: android.intent.action.BATTERY_CHANGED 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> 
getTempInfo error: null, <*> 
<*> <*> mCount=<*>, mAvgValue=<*>, mMaxValue=<*>, mMinValue=<*> 
formatChinaDateTime, change to China <*> 
<*> <*> : <*> 
<*> <*> : <*> 
set ordinal Value failed! name is not in the enum map, name = ChrVolteStatisticInfo 
set ordinal Value failed! name is not in the enum map, name = ChrVolteStatisticInfo 
set ordinal Value failed! name is not in the enum map, name = ChrVolteStatisticInfo 
is Beta User, userType = <*> 
<*> <*> <*> <*> 
is Beta User, userType = <*> 
at com.huawei.android.chr.ProtocolLogManager.handleReportChrAPCommonPara(ProtocolLogManager.java:<*>) 
<*> <*> <*> = <*> 
msg = <*> received 
msg = <*> received 
<*> <*> <*> <*> <*> = <*> 
<*> <*> = <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> im app <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> does not <*> <*> <*> 
<*> <*> <*> 
<*> temp_new :<*> temp_old :<*> 
PackAutoLog onPrePack 
wifiSleepPolicy:<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Error reading charge file 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
KGSvcFp onAuthenticationAcquired.<*> 
process buffer and get message 
getTempInfo error: null, <*> 
doTemperatueWarning, health:<*> 
<*> <*> <*> <*> <*> <*> 
Failing getSupportedFeatureset because HAL isn't started 
qsc_decode end 
getTypeIcon type:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*>|compensate received 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
qsc_decode end 
receive data len = <*> 
<*> result = <*> <*> <*> 
apply skiped :<*> 
Sending non-protected broadcast <*> from system <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
receive data len = <*> 
begin 
onKeyguardVisibilityChanged(false) 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
<*>|REPORT : <*> <*> <*> <*> 
<*> <*> <*> 
collapsePanel:false 
huawei_audio huawei_choose_Handset_device_incall_forHWtest: test Type =<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
ACDB -> <*> <*> <*> = <*> <*> = <*> 
QSEECom_send_cmd return! 
StartupResidentService:InnerHandler Message:<*> 
unproxy app:com.android.gallery3d,uid:<*>,result:true 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: false 
<*> <*> <*> <*> = false 
<*> <*> OK ! 
onStepCounterChange stepsNum:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> rt=<*>/<*> <*> <*> 
CtrlSocket restoreScrOnStatus 
updateNotificationShade 
NatTrafficNotifyService:delta byte = <*> no traffic delta = 0Traffic state is <*> 
begin 
<*> <*> <*> <*> 
process buffer and get message 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
send data return = <*> 
<*> <*> <*> 
<*> <*> <*> pid: <*>, uid: <*> <*> <*> <*> <*> 
<*> ok, pid: [<*>, <*>, <*> 
<*> <*> OK ! 
<*> package: com.tencent.mm, visible: false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> is <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
unproxy app:com.android.browser,uid:<*>,result:true 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> type <*> for Event <*>, with Raise=<*> 
<*>|onStandStepChanged <*> 
<*>|compensate <*> <*> 
read Events <*> 
<*> is called 
state.clipTopAmount:<*>, i:<*> 
transitionTo:mode=<*>, isEmuiStyle=false 
setProgress: <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
suspendAutohide 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
suspendAutohide 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateClipping isOverlap:false 
Create obj success use class android.app.HwCustNotificationImpl 
updateClipping isOverlap:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
received cell-signal:<*> 
suspendAutohide 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
onExpandingFinished 
updateQsState:false 
setScrollingEnabled: true 
updateQsState:false 
refreshState=location, BooleanState[,icon=ResourceIcon[resId=0x7f020218],label=位置信息,labelTint=<*>,textChangedDelay=<*>,contentDescription=位置报告功能开启。,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=true] 
updateClipping isOverlap:false 
received cell-signal:<*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
Create obj success use class android.app.HwCustNotificationImpl 
mThermalService is NULL! 
shouldBlockLocation running ... 
scheduleUnvalidatedPrompt <*> 
<*> <*> <*> <*> <*> <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
mVSimCurCardType is -<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
Create obj success use class <*> 
sendEvent:action=<*>, flag=<*> 
msg = <*> received 
<*> TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
ClassLoader referenced <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
<*>|onStandStepChanged <*> 
<*>|after compensate: cache step_<*> 
id : <*> <*> <*> <*> <*> <*> <*> : false 
collectReceiverComponents, callerApp: <*> <*> intent:null, receiver size:<*>, flags: <*> 
<*> <*> <*> <*> 
trim and enqueue <*> <*> <*> <*> <*> 
updateLightsLocked --> level:<*>, status:<*> 
getTempInfo error: null, <*> 
ApStaDisabledState what=<*> 
[main-<*>]initTopActivityList.(/HwOucConfig.java:<*>) 
<*> is not <*> so return <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[CheckNewVersionThread-<*>]isMtkGeminiSupport false(hwouc/MultiCardFactory.java:<*>) 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> is: <*> WAKEUP alarm trigger action = <*> package name is: <*> 
mIsScreenOn is: <*> WAKEUP alarm trigger action = <*> package name is: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) Login_By_Step-> at <*> 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> stream <*>, <*> <*> format <*>, channelMask <*>, flags <*> 
<*> <*> <*> <*> <*> format <*>, channelMask <*>, flags <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> <*> <*> <*> <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> 
</head> 
<*> <*> <*> <*> 
<*> not in <*> <*> 
<*> <*> <*> from <*> 
isCurrentBySim()=false 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
unkown type 
<*>|getTodayTotalSteps <*> 
onEntryAdded:<*>|com.tencent.mm|<*>|null|<*>, group=<*>|com.tencent.mm|<*>|null|<*> 
removeNotificationChildren 
applyInPlace=true shouldPeek=false alertAgain=true 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
remove target not exist, maybe the UI process: uid: <*>, pid: <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> <*> does not <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> id is <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send udp detect packet ok when login,id:[<*>];count:[<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in fetching group <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace : getkey <*> not <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path =>Access [/mnt/sdcard/sandbox/AnyOfficeSDK/sdk/QDJ7lEGuRlJb2r2mqrSExBTDjN4QhUgEPVptBL0HnX4=] real path ok 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace : getkey <*> not null 
updateNotificationShade 
Launcher.Folder childCount: <*> 
BadgeContentObserver getBadgeNumber: <*> mComponentName :ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
updateNotificationShade 
removeNotification:<*>|com.tencent.mm|<*>|null|<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> <*> <*> 
<*> : com.baidu.input_huawei found in app 
processOp opType: <*>, uid: <*>, pid: <*> 
<*> <*> <*> <*> <*> <*> <*> 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{506ad58 <*>:com.android.systemui/u0a33} 
onNotificationVisibilityChanged called 
updateClipping isOverlap:false 
onStepCounterChange stepsNum:<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
removeNotificationChildren 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
keyAppBroadcastQueueForIntent intent Intent { act=com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver flg=0x10 cmp=com.tencent.mm/.plugin.report.service.KVCommCrossProcessReceiver (has extras) } on bgkeyapp queue 
cancelNotification,index:-<*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = null,pkg =com.tencent.mm,id =<*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> 
queryIntentActivitiesAsUser size results:<*>, for <*> 
CFG_DIRS length : <*> 
onStepCounterChange stepsNum:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
handleANRFilterFIFO,uid = 10105cmd = <*> 
onFling::not valid gesture or touch plus on, false, return! 
Client requesting input be hidden, pid=<*> 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateDimmedActivatedHideSensitive overlap:false 
Client requesting input be hidden, pid=<*> 
removeNotificationChildren 
isCurrentBySim()=false 
send data return = <*> 
Access denied finding property "persist.sys.smart_power" 
Create obj success use class android.app.HwCustNotificationImpl 
Create obj success use class android.app.HwCustNotificationImpl 
transferRemoteInputFocus: <*> 
<*>|before compensate: cache step_<*> 
<*>|REPORT : <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
mVSimCurCardType is -<*> 
Client requesting input be hidden, pid=<*> 
<*>|compensate <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
updateTint: tint=<*> 
Client requesting input be hidden, pid=<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Client requesting input be hidden, pid=<*> 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
m1: false 
Client requesting input be hidden, pid=<*> 
<*>|compensate received 
<*>|after compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
disableEffects=null canInterrupt=false once update: false 
applyInPlace=true shouldPeek=false alertAgain=true 
transferRemoteInputFocus: <*> 
updateClipping isOverlap:false 
m1: false 
c: true, w: false, t: false, l: false 
<*>|getTodayTotalSteps <*> 
Client requesting input be hidden, pid=<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
Client requesting input be hidden, pid=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Client requesting input be hidden, pid=<*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> <*> <*> euid: <*> 
power log dlsym ok 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.database.sqlite.SQLiteConnection.open(SQLiteConnection.java:<*>) 
at android.database.sqlite.SQLiteConnectionPool.open(SQLiteConnectionPool.java:<*>) 
<*>|REPORT : <*> <*> <*> <*> 
updateClipping isOverlap:false 
<*>|before compensate: cache step_<*> 
m1: false 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
Client requesting input be hidden, pid=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*>|REPORT : <*> <*> <*> <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
<*>|compensate <*> <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
csr 
<*>|REPORT : <*> <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
obtain, mHwFlags=<*> 
APS: 2DSDR: AbsListView.FlingRunnable.endFling, we will clear SDR ratio 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|getTodayTotalSteps <*> 
<*>|rebuild notification 
Client requesting input be hidden, pid=<*> 
updateClipping isOverlap:false 
<*>|getTodayTotalSteps <*> 
showNotificationAll 
<*>|compensate <*> <*> 
querySoundEffectsEnabled... 
cancelNotification,index:-<*> 
------------startInput-------------- 
CablComputeBacklightLevel(): UpdateType = DifferentSceneUpdate 
showNotificationAll 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
isCurrentBySim()=false 
c: true, w: false, t: false, l: false 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
transferRemoteInputFocus: <*> 
isCurrentBySim()=false 
<*>|after compensate: cache step_<*> 
onStepCounterChange stepsNum:<*> 
<*>|rebuild notification 
disableEffects=null canInterrupt=false once update: false 
Create obj success use class android.app.HwCustNotificationImpl 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*>|getTodayTotalSteps <*> 
csr 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
getOrInflateState subId:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
<*>|after compensate: cache step_<*> 
showNotificationAll 
updateDimmedActivatedHideSensitive overlap:false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Broadcasting intent ACTION_RAC_CHANGED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*>|compensate <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*>|after compensate: cache step_<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
applyInPlace=true shouldPeek=false alertAgain=true 
Broadcasting intent ACTION_RAC_CHANGED 
t:false, fl: false, p: <*>, ce: true, we: false 
formatChinaDateTime, change to China <*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
<*>|before compensate: cache step_<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateNotificationShade 
<*>|compensate received 
<*>|before compensate: cache step_<*> 
updateTint: tint=<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
is3GCalling is false,mCdmaSlot is -<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] <*> <*> <*> <*> <*> <*> 
ContentChange for slot: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider2 seekBarProgress:<*> 
updateSlider2 seekBarProgress:<*> 
<*>|getTodayTotalSteps <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
showNotificationAll 
m1: false 
Calling fingersense_classify_touch() 
Client requesting input be hidden, pid=<*> 
new ScenarioAction sPoolSize: <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
Client requesting input be hidden, pid=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Animating brightness: target=<*>, rate=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
<*> <*> <*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
getCurrentCellid type type = PHONE_TYPE_GSM 
<*>|getTodayTotalSteps <*> 
disableEffects=null canInterrupt=false once update: false 
<*>|compensate <*> <*> 
<*>|getTodayTotalSteps <*> 
onStepCounterChange stepsNum:<*> 
disableEffects=null canInterrupt=false once update: false 
Calling fingersense_touch_up() 
Invalid profile no. <*>, total profiles <*> only 
at com.huawei.systemmanager.rainbow.comm.request.AbsServerRequest.doRequest(AbsServerRequest.java:<*>) 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
<*>|after compensate: cache step_<*> 
<*>|compensate <*> <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
onStepCounterChange stepsNum:<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
<*>|rebuild notification 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*>|MSG_RECORD_DATA_TO_FILE 
<*>|getTodayTotalSteps <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> <*> <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
shouldBlockLocation ret:false 
csr 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getOrInflateState subId:<*> 
<*> <*> <*> : <*> 
at com.amap.api.location.c.run(IAPSManager.java:<*>) 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
updateTint: tint=<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
<*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Calling fingersense_classify_touch() 
new ScenarioAction sPoolSize: <*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
<*>|getTodayTotalSteps <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
t:false, fl: false, p: <*>, ce: true, we: false 
showNotificationAll 
updateDimmedActivatedHideSensitive overlap:false 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
<*>|compensate <*> <*> 
<*>|rebuild notification 
disableEffects=null canInterrupt=false once update: false 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotificationShade 
<*>|compensate <*> <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
ImsServiceSub : handleSsac voice = <*> 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
updateNotificationShade 
updateClipping isOverlap:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
m1: false 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateNotificationShade 
transferRemoteInputFocus: <*> 
m1: false 
disableEffects=null canInterrupt=false once update: false 
updateDimmedActivatedHideSensitive overlap:false 
<*>|compensate <*> <*> 
updateTint: tint=<*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*>|compensate received 
<*>|rebuild notification 
<*>|getTodayTotalSteps <*> 
<*>|rebuild notification 
updateDimmedActivatedHideSensitive overlap:false 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
<*>|compensate received 
onStepCounterChange stepsNum:<*> 
Invalid profile no. <*>, total profiles <*> only 
<*>|getTodayTotalSteps <*> 
onStepCounterChange stepsNum:<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
updateClipping isOverlap:false 
onStepCounterChange stepsNum:<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*>|REPORT : <*> <*> <*> <*> 
updateTint: tint=<*> 
<*>|onStandStepChanged <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
transferRemoteInputFocus: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
<*>|onStandStepChanged <*> 
disableEffects=null canInterrupt=false once update: false 
Create obj success use class android.app.HwCustNotificationImpl 
dispatch ordered broadcast [foreground] <*> u-<*> android.intent.action.TIME_TICK}, has <*> receivers 
updateDimmedActivatedHideSensitive overlap:false 
<*>|compensate received 
<*>|getTodayTotalSteps <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
updateNotificationShade 
<*>|compensate received 
Create obj success use class android.app.HwCustNotificationImpl 
Create obj success use class android.app.HwCustNotificationImpl 
APS: 2DSDR: AbsListView.FlingRunnable.endFling, we will clear SDR ratio 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateTint: tint=<*> 
Report temperature: [charger_ic] temp :<*> report_threshold:<*> 
<*>|getTodayTotalSteps <*> 
Calling fingersense_classify_touch() 
Calling fingersense_touch_up() 
new ScenarioAction sPoolSize: <*> 
transferRemoteInputFocus: <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
updateSlider1 seekBarProgress:<*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
ContentChange for slot: <*> 
updateSlider1 seekBarProgress:<*> 
updateSlider2 seekBarProgress:<*> 
updateSlider1 seekBarProgress:<*> 
updateSlider2 seekBarProgress:<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
updateSlider1 seekBarProgress:<*> 
<*>|getTodayTotalSteps <*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
updateSlider1 seekBarProgress:<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
<*> <*> ==================== TCP CLIENT CONNECT [<*>] ==================== 
isCurrentBySim()=false 
isCurrentBySim()=false 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
transferRemoteInputFocus: <*> 
<*>|before compensate: cache step_<*> 
updateTint: tint=<*> 
disableEffects=null canInterrupt=false once update: false 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*>|compensate received 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Calling fingersense_touch_up() 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
Alarm triggering (type <*> or <*>): <*> type <*> when <*> <*> 
Received kernel message payload: event <*> 
poll before: g_monitor_fd =<*> 
Report temperature: [charger_ic] temp :<*> report_threshold:<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
mVSimCurCardType is -<*> 
<*>|before compensate: cache step_<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*>|getTodayTotalSteps <*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
getTempInfo error: null, <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
shouldBlockLocation running ... 
Client requesting input be hidden, pid=<*> 
new ScenarioAction sPoolSize: <*> 
<*>|rebuild notification 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Invalid profile no. <*>, total profiles <*> only 
onFling::not valid gesture or touch plus on, false, return! 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
csr 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
c: true, w: false, t: false, l: false 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateNotificationShade 
updateClipping isOverlap:false 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
m1: false 
getCurrentCellid type is <*> 
<*>|compensate <*> <*> 
updateTint: tint=<*> 
updateDimmedActivatedHideSensitive overlap:false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
onCellLocationChanged 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Rac Change (PDC) data: [<*>, <*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
######### CMD_QUERY_PKTS ######## 
<*>|getTodayTotalSteps <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
<*>|getTodayTotalSteps <*> 
<*>|compensate <*> <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
shouldBlockLocation ret:false 
getCurrentCellid type is <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*>|after compensate: cache step_<*> 
<*>|compensate <*> <*> 
<*>|compensate received 
getNeighboringCellInfo calling app is com.amap.android.ams 
m1: false 
shouldBlockLocation running ... 
t:false, fl: false, p: <*>, ce: true, we: false 
transferRemoteInputFocus: <*> 
Client requesting input be hidden, pid=<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
<*>|after compensate: cache step_<*> 
getNeighboringCellInfo calling app is com.amap.android.ams 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
<*>|onStandStepChanged <*> 
<*>|compensate received 
<*>|getTodayTotalSteps <*> 
updateClipping isOverlap:false 
<*>|getTodayTotalSteps <*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Create obj success use class android.app.HwCustNotificationImpl 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
Sending non-protected broadcast org.codeaurora.VOIP_VOPS_SSAC_STATUS from system <*>:com.android.phone/<*> pkg com.android.phone 
onDataActivity: direction=<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
m1: false 
<*>|compensate <*> <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateTint: tint=<*> 
<*>|before compensate: cache step_<*> 
Create obj success use class android.app.HwCustNotificationImpl 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
showNotificationAll 
<*>|REPORT : <*> <*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*>|before compensate: cache step_<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
updateTint: tint=<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<*> <*> <*> <*> 
<*> <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*>, <*> = <*> 
sendEvent:action=<*>, flag=<*> 
<*> package: com.tencent.mm, visible: false 
action:com.huawei.android.action.WEATHER_CHANGE, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
updateBarBgColor:emuiStyle=<*>,statusBarColor=#FFFCFCFC,navigationBarColor=#<*>, isEmuiLight=-<*> 
statusBarIconTint=#B3000000,navigationBarIconTint=#<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<*> <*> is <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
shouldBlockLocation running ... 
<*> <*> is <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
interceptKeyTq keycode=<*> interactive=true keyguardActive=false <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Launcher.LauncherProvider launcher call - method:setAppBadgeCount arg:null extras:[app_shortcut_custom_id=null][app_shortcut_class_name=com.tencent.mm.ui.LauncherUI][app_badge_count=<*>] uid =<*> pid =<*> 
<*> <*> <*> <*> <*> <*> is: <*> 
Split enqueueing broadcast <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Couldn't create directory for SharedPreferences file /data/user_de/<*>/com.android.settings/shared_prefs/caStatePreferences.xml 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
getOutput() device <*>, stream <*>, samplingRate <*>, format <*>, channelMask <*>, flags <*> 
<*> <*> <*> <*> <*> format <*>, channelMask <*>, flags <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
platform_get_native_support:napb: ui Prop enabled(<*>) version(<*>) 
<*> not in <*> <*> <*> <*> <*> <*> 
<*> <*> <*> type <*> <*> <*> <*> <*> 
Unfinished business... 
The tag is null error! 
QSEECom_send_cmd return! 
begin 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=OFF, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
onScreenTurnedOff() 
java.lang.Exception 
handleNotifyScreenTurnedOff 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
isSimPinSecure mSimDatas is null or empty 
DefaultState !CMD_SCREEN_STATE_CHANGED rt=<*>/<*> <*> <*> 
<*> <*> <*> <*> 
writeSummaryFromParcelLocked, duration: <*> 
writeSummaryFromParcelLocked, duration: <*> 
onAcquired(<*>) 
onAcquired <*> 
Apply window without WALLPAPER 
<*> <*> <*> <*> <*> <*> <*> <*> 
showSecurityScreen(PIN) 
<*> <*> <*> <*>-<*>-<*> <*>:<*>:<*> <*> <*> <*>-<*>-<*> <*>:<*>:<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
show 
sendImmediateMessage <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
isSimPinSecure mSimDatas is null or empty 
<*> <*> <*> <*> <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
Handle message: <*> 
Setting HAL interactive mode to true 
<*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
stopMonitoringMotionLocked() 
Broadcasting intent ACTION_RAC_CHANGED 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
<*> <*> V.ED..... ........ <*>,<*>-<*>,<*> <*> app:id/battery_outside_percent} 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
getOrInflateState subId:<*> 
Cache monitor msg as screen_off 
Change to single clock mode! 
<*>|onStandStepChanged <*> 
<*>|compensate <*> <*> 
<*>|before compensate: cache step_<*> 
Calling fingersense_touch_up() 
updateNotificationShade 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*>|onStandStepChanged <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> <*> <*> <*> 
<*>|compensate received 
DisplayPowerStatesetColorFadeLevel: level=<*>.0967255E-<*> 
<*> <*> <*> <*> <*> <*> 
Reading a NULL string not supported here. 
<*> <*> <*> <*> <*> <*> <*> 
updateNotificationShade 
<*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
<*>|compensate <*> <*> 
<*>|getTodayTotalSteps <*> 
updateClipping isOverlap:false 
acquire lock=<*>, flags=0x1, tag="hibernation", name=com.huawei.powergenie, ws=null, uid=<*>, pid=<*> 
To broadcast an Intent via the notifier to external apps 
handleMessage what = <*> 
Cache monitor msg as screen_off 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
Broadcasting intent ACTION_RAC_CHANGED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
c: true, w: false, t: false, l: false 
<*>|compensate received 
<*>|after compensate: cache step_<*> 
Handle message: <*> 
Create obj success use class android.app.HwCustNotificationImpl 
hideTraffic 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Create obj success use class android.app.HwCustNotificationImpl 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<*>|compensate <*> <*> 
Report temperature: [ap] temp :<*> report_threshold:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
mVSimCurCardType is -<*> 
<*>|after compensate: cache step_<*> 
updateDimmedActivatedHideSensitive overlap:false 
Error reading charge file 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
getTempInfo error: null, <*> 
Broadcasting intent ACTION_RAC_CHANGED 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*>|compensate <*> <*> 
<*>|rebuild notification 
applyInPlace=true shouldPeek=false alertAgain=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
Error reading charge file 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
Handle message: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
applyIconTint ignore 
Broadcasting intent ACTION_RAC_CHANGED 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
<*>|calculateAltitudeWithCache datas.size=<*> 
removeNotificationChildren 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
onReceive: action = android.intent.action.LTE_CA_STATE 
Couldn't create directory for SharedPreferences file /data/user_de/<*>/com.android.settings/shared_prefs/caStatePreferences.xml 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
<*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Caller checkPermission fail 
<*> <*> <*> 
LightSensor, enable, <*>: mEnabled=<*> 
Set power mode=<*>, type=<*> flinger=0x7f9a25b<*> 
c: true, w: false, t: false, l: false 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
receive data len = <*> 
begin 
<*> <*> <*> 
Apply window without WALLPAPER 
action:com.android.systemui.statusbar.visible.change, mPermissionType:<*> 
qsc_send_cmd finish 
<*> took <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
DynamicUpdater registerReceiver 
<*> output <*>, stream <*>, <*> <*> 
<*> <*> <*> pid:<*> uid:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> for <*> 
<*> <*> <*> <*> ms 
<*> <*> <*> <*> <*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
<*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> 
trim and enqueue <*> <*> <*> <*> <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
onReceive, action:android.intent.action.USER_PRESENT 
begin 
cancel alarm. 
CablComputeBacklightLevel(): UpdateType = DifferentSceneUpdate 
SND -> {<*> bandwidth gettetherstats} 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
onDataActivity: direction=<*> 
acquire lock=<*>, flags=0x1, tag="hibernation", name=com.huawei.powergenie, ws=null, uid=<*>, pid=<*> 
<*> TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event <*> 
unproxy app:com.huawei.espacev2,uid:<*>,result:true 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> is <*> 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) changed bounds; rebatching 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
<*>|rebuild notification 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) 
<*> is null 
action:com.huawei.betaclub.UPLOAD_PROGRESS, mPermissionType:<*> 
DeviceStateListener:MyCityChanged: true 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
formatChinaDateTime, change to China <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> type is <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
at android.database.sqlite.SQLiteDatabase.open(SQLiteDatabase.java:<*>) 
at com.baidu.location.g.a.b(Unknown) 
<*> <*> <*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
Change to single clock mode! 
updateNotificationShade 
ambient lux=<*>.<*>,timeStamp =<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
mVSimCurCardType is -<*> 
Calling fingersense_touch_up() 
ambient lux=<*>.<*>,timeStamp =<*> 
<*> <*> <*> <*> <*> <*> <*> 
Launcher onPause() 
Moving to PAUSED: ActivityRecord{930e418 u0 com.huawei.android.launcher/.unihome.UniHomeLauncher <*> (pause complete) 
handle action thermal policy:<*> 
keyAppBroadcastQueueForIntent intent Intent { act=com.tencent.mm.ui.ACTION_ACTIVE flg=0x10 (has extras) } on bgkeyapp queue 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
cancelNotification,index:-<*> 
<*> <*> V.ED..... ........ <*>,<*>-<*>,<*> <*> app:id/battery_outside_percent} 
<*> ActivityRecord{930e418 u0 com.huawei.android.launcher/.unihome.UniHomeLauncher <*> 
onProposedRotationChanged, rotation=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
keyAppBroadcastQueueForIntent intent Intent { act=com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver flg=0x10 cmp=com.tencent.mm/.plugin.report.service.KVCommCrossProcessReceiver (has extras) } on bgkeyapp queue 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
not 3G net type. do nothing. 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Client requesting input be hidden, pid=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
onFling::not valid gesture or touch plus on, false, return! 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
received broadcast android.intent.action.TIME_TICK 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Client requesting input be hidden, pid=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
Client requesting input be hidden, pid=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
csr 
fingersense_classify_touch() finished 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
send_cmd_kernel: cmd=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
mVSimCurCardType is -<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Client requesting input be hidden, pid=<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Client requesting input be hidden, pid=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
received cell-signal:<*> 
new ScenarioAction sPoolSize: <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
Change to single clock mode! 
onFling::not valid gesture or touch plus on, false, return! 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
received cell-signal:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
RCV <- {<*> <*> <*> <*> <*> 
no controller energy info supplied 
ExtraTrafficSetting:result is empty 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
m1: false 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
csr 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> 
isCurrentBySim()=false 
csr 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
isCurrentBySim()=false 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
received cell-signal:<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
Client requesting input be hidden, pid=<*> 
Calling fingersense_touch_up() 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
APS: 2DSDR: AbsListView.FlingRunnable.endFling, we will clear SDR ratio 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
handleMessage what = <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
ImsServiceSub : handleSsac voice = <*> 
getCurrentCellid type type = PHONE_TYPE_GSM 
m1: false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
Client requesting input be hidden, pid=<*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
send_cmd_kernel: cmd=<*> 
Client requesting input be hidden, pid=<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
APS: 2DSDR: AbsListView.FlingRunnable.endFling, we will clear SDR ratio 
check dependency pid: <*> is depended by pid: <*> 
formatChinaDateTime equals. 
MSG_QUERY_TCP_INFO called,count:<*> 
not in link monitoring mode, ignore TCP result . 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
fingersense_classify_touch() finished 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
Client requesting input be hidden, pid=<*> 
new ScenarioAction sPoolSize: <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
c: true, w: false, t: false, l: false 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> <*> <*> <*> delay to H! 
process buffer and get message 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=OFF, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> to device <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
platform_set_parameters: enter: - <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
at com.huawei.keyguard.util.BitmapUtils.getSuggestColorInfo(BitmapUtils.java:<*>) 
<*> <*> <*> 
notifyScreenTurnedOff 
LightSensor, enable, <*>: mEnabled=<*> 
DisplayPowerState Updating <*> <*> <*> <*> 
onScreenTurningOn 
Setting HAL auto-suspend mode to true 
<*> <*> <*> 
fingersense_on_resume() finished 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
qsc_send_cmd finish 
<*> <*> <*> <*> <*> 
onAcquired <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
MyOrientationListener: updateRotation. 
getNextIndex: <*>; from <*> to <*>; size: <*> 
<*> <*> <*> <*> <*> <*> 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
Apply window without WALLPAPER 
<*> <*> <*> <*> 
get_spk_pa_type: pa is max<*> 
updateLowPowerMode,isPowerSaveMode:falseisInteractive:false 
<*> <*> <*> <*> 
updateQsState:false 
sendKeyguardReset 
transitionTo:mode=<*>, isEmuiStyle=false 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> 
getTempInfo error: null, <*> 
received cell-signal:<*> 
c: true, w: false, t: false, l: false 
handle_exception_events enter 
Get no-perm <*> <*> <*> 
Unproxy wakelock uid = <*> pid = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
onShowStatusChange show:false 
Launcher.LauncherProvider launcher-restore query - uri:content://com.huawei.android.launcher.settings/badge 
set notification panel padding = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ActivityRecord{5f12a6a u0 com.tencent.mm/.ui.LauncherUI <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
hideTraffic 
fingersense_touch_up() finished 
applyIconTint ignore 
Calling fingersense_touch_up() 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
handleNotifyScreenTurnedOff 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
need to force refresh view 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
received cell-signal:<*> 
m1: false 
t:false, fl: false, p: <*>, ce: true, we: false 
not in link monitoring mode, ignore TCP result . 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
DisabledState cellid = <*> 
shouldBlockLocation running ... 
updateLightsLocked --> level:<*>, status:<*> 
<*> <*> <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
onLayout:left=<*>, top=<*>, right=<*>, bottom=<*>, offset=<*> 
getCurrentCellid type type = PHONE_TYPE_GSM 
shouldBlockLocation ret:false 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
updateClipping isOverlap:false 
isCurrentBySim()=false 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
handleLteCaStatusChange 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
setColorTemperatureAccordingToSetting new. 
<*> <*> is <*> <*> <*> <*> <*> = <*>.<*> 
Calling fingersense_on_resume() 
Display device changed <*> <*> <*> 
Set power mode=<*>, type=<*> flinger=0x7f9a25b<*> 
updateDisplayLocked: screenOn=true 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
getTimeTickInfo:[mMillisUntilFinished:<*>, mHour:<*>, mMinute:<*>, mSecond:<*>] 
apply skiped :<*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> <*> 
updateQsState:false 
<*> <*> <*> <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
PowerManagerNotifier <*> <*> <*> 
WindowOrientationListener enabled 
<*> <*> output <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> pid:<*> uid:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ash->screen unlock 
state.clipTopAmount:<*>, i:<*> 
ACDB -> <*> 
select_devices: done 
Apply window Height <*> 
CollectorManager--isCollectorEnabled--getBoolean: false 
CollectorManager--isCollectorEnabled--getBoolean: false 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send udp detect packet ok when login,id:[<*>];count:[<*>]! 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> java.net.SocketException: Socket <*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
TafficState:default sub id = 0slotIndex = <*> subscriptionId = <*> 
updateNotificationShade 
<*> <*> <*> <*> ......ID <*>,<*>-<*>,<*> <*> <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
cancelNotification,index:-<*> 
ash->screen unlock 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event TCP_CONNECTED 
updateNotificationShade 
<*> <*> = <*>-<*>-<*> <*>:<*>:<*> <*> = <*>-<*>-<*> <*>:<*>:<*> 
workerFunction STATE_NAVIGATION 
Returning system default Launcher 
<*> <*> = true 
<*> <*> <*> <*> type <*> for Event <*>, with Raise=<*> 
<*> enable, <*>: mEnabled=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
not 3G net type. do nothing. 
isCurrentBySim()=false 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
fingersense_touch_up() finished 
<*> <*> <*> visible: false 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
Client requesting input be hidden, pid=<*> 
onReceive intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
sendMessage with obj<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
formatChinaDateTime equals. 
chinaDateTime:傍晚<*>:<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
obtain, mHwFlags=<*> 
fingersense_touch_up() finished 
csr 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
m1: false 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
load icon id : <*> pkgName : com.baidu.input_huawei 
pkg <*> <*> <*> pid: <*> <*> <*> 
ImsServiceSubHandler : Message received: what = <*> 
onDataActivity: direction=<*> 
Calling fingersense_classify_touch() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
fingersense_touch_up() finished 
isCardAbsent slot:<*> slotState:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
fingersense_touch_up() finished 
fingersense_touch_up() finished 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
m1: false 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
send: <*> 
fingersense_touch_up() finished 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
No config file found for:/themes/diff/icons 
collectReceiverComponents, callerApp: ProcessRecord{<*> <*>:com.baidu.input_huawei/u0a74}, intent:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, receiver size:<*>, flags: <*> 
new ScenarioAction sPoolSize: <*> 
getOrInflateState subId:<*> 
Client requesting input be hidden, pid=<*> 
Invalid profile no. <*>, total profiles <*> only 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
received cell-signal:<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
onFling::not valid gesture or touch plus on, false, return! 
getOrInflateState subId:<*> 
suspendAutohide 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
interceptKeyBeforeQueueing: key <*> , result : <*> 
new ScenarioAction sPoolSize: <*> 
DynamicUpdater registerReceiver 
<*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> V.ED..... ........ <*>,<*>-<*>,<*> #7f1401be app:id/battery_outside_percent} 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> size is <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> ActivityRecord{930e418 u0 com.huawei.android.launcher/.unihome.UniHomeLauncher <*> <*> <*> 
shouldBlockLocation running ... 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider2 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
ContentChange for slot: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000011000000514f454d484f4f4bfa0308000100000000] 
handleMessage what = <*> 
ContentChange for slot: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
at android.database.sqlite.SQLiteDatabase.openInner(SQLiteDatabase.java:<*>) 
<*> <*> <*> <*> <*> 
remove target not exist, maybe the UI process: uid: <*>, pid: <*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
csr 
getOrInflateState subId:<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
HwDPMS received <*> <*> <*> 
resumeTopActivityLocked: <*> <*> <*> <*> <*> 
<*> <*> <*> OK ! 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> device policy manager service. 
setFocusedApp update app ops, mTaskChanged set to:false 
scheduleCheckFreezeScreen sendMessageDelayed 
transitionTo:mode=<*>, isEmuiStyle=true 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW dat=file:///storage/emulated/<*>/tencent/TMAssistantSDK/Download/com.tencent.mm/1a41cb224d6d4b020176381a7c790891 typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
getOrInflateState subId:<*> 
shouldBlockLocation ret:false 
stopScanAp mIsScaning = false 
<*> <*> <*> 
isMonitorCellId mInfos.size() = <*> 
shouldBlockLocation running ... 
is3GCalling is false,mCdmaSlot is -<*> 
is3GCalling is false,mCdmaSlot is -<*> 
EventHub monitor: no key events in the past <*> 
Broadcasting intent ACTION_RAC_CHANGED 
getCurrentCellid type is PHONE_TYPE_GSM 
c: true, w: false, t: false, l: false 
getCurrentCellid type is PHONE_TYPE_GSM 
isMonitorCellId mInfos.size() = <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
getTempInfo error: null, <*> 
send: <*> 
shouldBlockLocation running ... 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
applyIconTint ignore 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
mVSimCurCardType is -<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
m1: false 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
getCurrentCellid type is PHONE_TYPE_GSM 
isCurrentBySim()=false 
check dependency pid: <*> is depended by pid: <*> 
shouldBlockLocation running ... 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
shouldBlockLocation running ... 
csr 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
getCurrentCellid type type = PHONE_TYPE_GSM 
c: true, w: false, t: false, l: false 
csr 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
csr 
acquire lock=<*>, flags=0x1, tag="*launch*", name=android, ws=WorkSource{<*>}, uid=<*>, pid=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
<*> <*> <*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
transitionTo:mode=<*>, isEmuiStyle=false 
at android.os.HandlerThread.run(HandlerThread.java:<*>) 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> is <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
<*> is null 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
back light level before map = <*> 
receive data len = <*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
begin 
begin 
qsc_decode end 
begin 
qsc_decode end 
send data return = <*> 
QSEECom_send_cmd return! 
begin 
send data return = <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
answer call by keyCode = <*>, down = true, isSupVolumnkeyAnswerCall = false 
obtain, mHwFlags=<*> 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
mSeekListener onProgressChanged progress:<*> fromUser:false 
Returning system default Launcher 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> <*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
received cell-signal:<*> 
acquire lock=<*>, flags=0x1, tag="*launch*", name=android, ws=WorkSource{<*>}, uid=<*>, pid=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Dispatch frozen. Waiting some more. <*> <*> <*> 
act:android.intent.action.CONFIGURATION_CHANGED flag:<*> 
formatChinaDateTime, change to China <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> <*> <*> 
search 
getRecentTasks: num=<*>,flags=<*>,totalTasks=<*> 
<*> <*> <*> <*> <*> <*> 
cancelAutohide 
gAndroid_jvm 0xea<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Launcher.LauncherProvider queried count: <*> 
<*> <*> <*> <*> <*> 
isSystemBootComplete =true 
isCardAbsent slot:<*> slotState:<*> 
<*> <*> <*> = <*> 
Dispatch frozen. Waiting some more. <*> <*> <*> 
Dispatch frozen. Waiting some more. <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
chinaDateTime:傍晚<*>:<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
mVSimCurCardType is -<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
onSignal: mSubId=<*>,currDataSubID=<*> 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
GetAddrInfoHandler addr: <*> 
onCellLocationChanged 
shouldBlockLocation running ... 
current cell id is not monitor ..... cellid = <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*> <*> <*> <*> 
updateSlider2 seekBarProgress:<*> 
ContentChange for slot: <*> 
suspendAutohide 
<*> <*> <*> <*> <*> <*> <*> <*> <*> ActivityRecord{930e418 u0 com.huawei.android.launcher/.unihome.UniHomeLauncher <*> 
getTempInfo error: null, <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> #7f1401be app:id/battery_outside_percent} 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
HwLocationManager:onLocationChanged.ThirdLocation 
release:lock=<*>, flg=0x0, tag="hibernation", name=com.huawei.powergenie", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> OK ! 
<*> <*> <*> duration=<*> } transition to: <*> <*> 
<*> <*> mask=ffffffff oldVal=<*> <*> <*> 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
setAlarmsPending ... 
stopNavigating, mStarted=false 
<*> <*> <*> <*> <*> 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
cleanUpApplicationRecord -- <*> 
at com.dianping.nvnetwork.o.a(NVGlobalConfig.java:<*>) 
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<*>) 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
action:com.huawei.android.action.action_home_city_weather, mPermissionType:<*> 
onClockLocationChange 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
Create obj success use class <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
getNeighboringCellInfo calling app is <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Can't find ssid. 
<*> <*> <*> <*> <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
<*> <*> <*> <*> <*> <*> 
shouldBlockLocation ret:false 
getNeighboringCellInfo calling app is <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> #<*> A=com.huawei.android.launcher U=<*> StackId=<*> sz=<*>}, <*> <*> <*> <*> U=<*> StackId=<*> sz=<*>}, <*> <*> <*> U=<*> StackId=<*> sz=<*>} 
CFG_DIRS length : <*> 
csr 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[LoginActivity.isLoggedIn]isLoggedIn:true 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> <*> <*> 
updateBarBgColor 
BoostFramework() : mPerf = <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
<*> Branch <*> 
<*> <*> <*> <*> <*> 
<*> <*> called by <*> V.ED..... ........ <*> <*> <*> <*> <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*>|compensate <*> <*> 
onStepCounterChange stepsNum:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
action:android.location.GPS_ENABLED_CHANGE, mPermissionType:<*> 
Calling fingersense_touch_up() 
acquire lock=<*>, flags=0x1, tag="*launch*", name=android, ws=WorkSource{<*>}, uid=<*>, pid=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
Enqueueing ordered <*> <*> <*> <*> prev had <*> 
Start proc <*> <*> <*> <*> 
<*> intent Intent { <*> <*> (has extras) } on <*> <*> 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isMonitorCellId mInfos.size() = <*> 
getNeighboringCellInfo calling app is com.amap.android.ams 
shouldBlockLocation running ... 
updateClipping isOverlap:false 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
isMonitorCellId mInfos.size() = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
c: true, w: false, t: false, l: false 
c: true, w: false, t: false, l: false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
onProcessDied pid = <*>, uid = <*> 
<*> <*> <*> <*> pid: <*> 
<*> is not <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
is3GCalling is false,mCdmaSlot is -<*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
onEntryUpdated:<*>|com.sankuai.meituan|<*>|null|<*> 
showNotificationAll 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
begin 
begin 
send data return = <*> 
qsc_decode end 
send data return = <*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> <*> 
received cell-signal:<*> 
check perfhub service fail! 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
search 
cancelAutohide 
showNotificationAll 
Invalid profile no. <*>, total profiles <*> only 
Model onReceive user=UserHandle{<*>} 
getOrInflateState subId:<*> 
answer call by keyCode = <*>, down = false, isSupVolumnkeyAnswerCall = false 
acquire lock=<*>, flags=0x1, tag="*launch*", name=android, ws=WorkSource{<*>}, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> onDismissRequested reason = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x23,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
notifyUiVisibilityChanged:vis=0x40000600, SystemUiVisibility=0x<*> 
getOrInflateState subId:<*> 
Destroying surface <*> called by com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
shouldBlockLocation running ... 
onSignal: mSubId=<*>,currDataSubID=<*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
received cell-signal:<*> 
stopScanAp mIsScaning = false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
getCurrentCellid type type = PHONE_TYPE_GSM 
csr 
current cell id is not monitor ..... cellid = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:false isRoaming:false 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
disableEffects=null canInterrupt=false once update: false 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
received cell-signal:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateTint: tint=<*> 
<*>|compensate received 
<*>|before compensate: cache step_<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
DisabledState cellid = <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*>|getTodayTotalSteps <*> 
obtain, mHwFlags=<*> 
release:lock=<*>, flg=0x0, <*> <*> ws=WorkSource{<*>}, uid=<*>, pid=<*> 
setSystemUiVisibility vis=<*> mask=ffffffff oldVal=<*> newVal=<*> diff=<*> 
sending broadcast to Pid = <*>, Uid = <*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
mVSimCurCardType is -<*> 
csr 
monitor check touch devices 
C onDismissRequested reason = <*> 
querySoundEffectsEnabled... 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
Calling fingersense_classify_touch() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
shouldBlockLocation ret:false 
c: true, w: false, t: false, l: false 
DynamicUpdater call updateFolder 
<*> <*> <*> = true <*> <*> 
Launcher onResume() 
<*> <*> <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
action:com.huawei.android.action.launcher_weather_icon_change, mPermissionType:<*> 
<*> <*> <*> OK ! 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: true 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Returning system default Launcher 
Unproxy wakelock uid = <*> pid = <*> 
<*> <*> <*> OK ! 
<*> <*> <*> 
<*> <*> <*> <*> sweep <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
upstreamIfaceTypes.add:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> euid: <*> 
<*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
CFG_DIRS length : <*> 
icon : <*> found in app 
mVSimCurCardType is -<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
cancelAutohide 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
Model onReceive <*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Dispatch frozen. Waiting some more. <*> <*> <*> 
formatChinaDateTime, change to China <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.open(Native Method) 
ChargingSpeed Wattage: <*> ST: <*> --> <*> 
Calling fingersense_touch_up() 
fingersense_classify_touch() finished 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
mVSimCurCardType is -<*> 
Invalid profile no. <*>, total profiles <*> only 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
t:false, fl: false, p: <*>, ce: true, we: false 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
Calling fingersense_touch_up() 
poll before: g_monitor_fd =<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
AwareAppMngSort: <*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Start proc <*> <*> <*> <*> 
No config file found for:/themes/diff/icons 
updateTint: tint=<*> 
turn off notificationLight due to incall or screenon 
Create obj success use class android.app.HwCustNotificationImpl 
No config file found for:/themes/diff/icons 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
------------startInput-------------- 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
send_cmd_kernel: cmd=<*> 
not in link monitoring mode, ignore TCP result . 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] <*> <*> <*> <*> 
AwareMem_Kill: updateGroupList <*> move high <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
enqueueNotificationInternal: n.getKey = <*> 
Create obj success use class android.app.HwCustNotificationImpl 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> = <*> 
csr 
mStatsXtProcUid: /proc/net/comm/stats does not exist! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
fingersense_touch_up() finished 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
received cell-signal:<*> 
<*> <*> <*> <*> <*> 
ServiceNeeded not bring down <*> u0 euid: <*> <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
BluetoothManagerService:Message: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Change in state from: <*> <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
isCurrentBySim()=false 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:s(<*>, <*>),r(<*>, <*>)in <*> <*> <*>, <*>), sock(<*>, <*>, <*>, <*>), times(<*>, <*>, <*>, <*>), delay(<*>, <*>)ms, m(<*>, <*>)KB, p:<*>, s:<*>, t(<*>, <*>, <*> <*> u(<*>, <*>, <*> <*> c(<*>, <*>, <*>, <*>), e(<*>, <*>)/(<*>, <*>), k:<*>, d(<*>, <*>), de(<*>), s(online, <*>, <*>), SSL(<*>), UDP(<*>), r_d(<*>), s_d(<*>), c_d(<*>), dur(<*> m), vs(<*>, <*>, <*>), sysFM(<*> KB), ls(<*>, <*>),bypass[<*>]:[<*>] 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] <*> <*> <*> 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
isCloneProcess = false 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = null,pkg <*> <*> 
showNotificationAll 
showNotificationAll 
updateDimmedActivatedHideSensitive overlap:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
new ScenarioAction sPoolSize: <*> 
send_cmd_kernel: cmd=<*> 
onCreate 
printPackageInfo begin. 
printPackageInfo end. 
mIsEffect:false 
bmp is null : false 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
bmp is null : false 
bmp is null : false 
uid:<*> pid:<*> PhoneStateListener.LISTEN_CELL_LOCATION:<*> events:<*> 
<*> <*> <*> state is not <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
at com.dianping.nvnetwork.o.a(NVGlobalConfig.java:<*>) 
<*> <*> <*> <*> : <*> <*> : false <*> : <*> <*> <*> <*>-<*>-<*> <*>:<*>:<*> <*> : false 
<*> <*> <*> <*> changed bounds; rebatching 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> : <*> 
csr 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
retrieveServiceLocked, callerApp: ProcessRecord{2b38b6e <*>:com.huawei.systemmanager:service/<*>}, flags: <*> 
<*> <*> <*> <*> does not <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> is null 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Can't find ssid. 
shouldBlockLocation ret:false 
shouldBlockLocation running ... 
HoldService:locationInfo switch is on . pid = <*> 
HoldService:locationInfo switch is on . pid = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
RCV <- {<*> <*> Firewall command succeeded} 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation ret:false 
<*> <*> <*> <*> 
<*> <*> <*> 
updateTint: tint=<*> 
<*> <*> <*> <*> <*> <*> <*> 
[ReceiverDispatcher-<*>]isSupportsMultipleUsers: true(android/null:<*>) 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
getProcessInfo: failed to find this proc 
Invalid profile no. <*>, total profiles <*> only 
uploadLocationAction:actionType:0actionMsg:PROVIDER:all,PN:com.sankuai.meituan,HC:9e2a79f 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
showNotificationAll 
CFG_DIRS length : <*> 
transferRemoteInputFocus: <*> 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 <*> vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
new ScenarioAction sPoolSize: <*> 
updateNotificationShade 
<*> <*> <*> <*> <*> <*> <*> <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Received kernel message payload: event <*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
<*> <*> <*> <*> <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCloneProcess = false 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 <*> <*> 
updateNotificationShade 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Calling fingersense_classify_touch() 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
formatChinaDateTime, change to China <*> 
Received kernel message payload: event <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
AwareMem_Kill: updateGroupList package: move high <*> <*> 
updateTint: tint=<*> 
<*> <*> <*> class android.app.HwCustNotificationImpl 
updateNotificationShade 
setOverlap mOverlap:false, mDimmed:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
c: true, w: false, t: false, l: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
mVSimCurCardType is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
addNotification key=<*>|com.sankuai.meituan|<*>|null|<*> 
CFG_DIRS length : <*> 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
WatchThread{<*>} TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
Invalid profile no. <*>, total profiles <*> only 
mSimSubId:<*> onDataActivity: direction=<*> 
onDataActivity: direction=<*> 
Change in state from: <*> <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
onDataActivity: direction=<*> 
Change in state from: <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
isCloneProcess = false 
isCloneProcess = false 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> <*> <*> changed bounds; rebatching 
enqueueNotificationInternal: n.getKey = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onDataActivity: direction=<*> 
<*> <*> <*> 
new ScenarioAction sPoolSize: <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
AwareUserHabit: getTopList is called 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
new ScenarioAction sPoolSize: <*> 
JIT profile information will not be recorded: profile file does not exits. 
updateDimmedActivatedHideSensitive overlap:true 
updateClipping isOverlap:true 
<*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
showNotificationAll 
is3GCalling is false,mCdmaSlot is -<*> 
Calling fingersense_classify_touch() 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
isCurrentBySim()=false 
interceptKeyTq keycode=<*> interactive=true keyguardActive=false <*> <*> <*> <*> <*> 
collapsePanel<*> 
acquire lock=<*>, flags=0x1, tag="*launch*", name=android, ws=WorkSource{<*>}, uid=<*>, pid=<*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> <*> need to <*> <*> <*> = <*> , <*> = <*> 
<*> is null <*> <*> <*> <*> 
search 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:true isRoaming:false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> output <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
KGSvcFp startListeningForFingerprint() 
authenticate(sid=<*>, gid=<*>) 
receive data len = <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
out_get_latency: Latency <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:false isRoaming:false 
notifyFinishedGoingToSleep 
onReceive, action:android.intent.action.SCREEN_OFF 
<*> <*> is not <*> <*> <*> <*> <*> <*> 
enter addToIdleMessage(type:<*>), mainloop is busy, add to idleMessage 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> dreaming: false; Authenticated: false 
show 
Sending non-protected broadcast <*> from system <*> <*> <*> 
<*> Visible: <*> <*> <*> Switching: false; Bouncer:false; GoingToSleep: false Occluded: false; dreaming: false; Authenticated: false 
Dis-Feature : <*> 
<*> <*> <*> <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
<*> <*> <*> 
I/LocTech-Label :: OSOBSERVER :: Data Items In 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
updateDimmedActivatedHideSensitive overlap:false 
setColorTemperatureAccordingToSetting new. 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Setting HAL auto-suspend mode to false 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=true, brightnessWaitRet=false, screenAutoBrightness=<*>, userId=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
set notification panel padding = <*> 
applyIconTint ignore 
onShowStatusChange show:false 
<*> <*> <*> <*> : <*> 
updateClipping isOverlap:false 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=OFF, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, <*> screenAutoBrightness=<*>, userId=<*> 
ProximitySensor, enable, <*>: en=<*> 
<*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> <*> <*> <*> 
Rac Change (PDC) data: [<*>, <*>] 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
received cell-signal:<*> 
csr 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Handle message: <*> 
<*> <*> <*> <*> <*> <*> is not <*> 
<*> <*> <*> intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
New app record <*> <*> <*> <*> <*> 
HsmStat_info:feature enable:true 
SimCardManager:onReceive()-- mNameServSlot<*> 
<*> <*> <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> uid: <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
need to force refresh view 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
Couldn't create directory for SharedPreferences file /data/user_de/<*>/com.android.settings/shared_prefs/caStatePreferences.xml 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
handleMessage CHECK_FREEZE_SCREEN_MSG 
c: true, w: false, t: false, l: false 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
getOrInflateState subId:<*> 
Broadcasting intent ACTION_RAC_CHANGED 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
at java.io.FileInputStream.open(Native Method) 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
mVSimCurCardType is -<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000011000000514f454d484f4f4bfa0308000100000000] 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|calculateCaloriesWithCache totalCalories=<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateNotificationShade 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
onShowStatusChange show:false 
at java.io.FileInputStream.open(Native Method) 
Received TIME_TICK alarm; rescheduling 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: false 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
no controller energy info supplied 
<*> <*> <*> <*> <*> 
I/---> locClientSendReq line <*> <*> 
Can't find ssid. 
I/===> int <*> line <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
applyIconTint 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
shouldBlockLocation running ... 
<*> <*> <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
HoldService:locationInfo switch is on . pid = <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
E/Calling gnss_sv_status_cb 
<*> <*> <*> 
addFreezeProcess pkg:com.huawei.espacev<*> 
release:lock=<*>, flg=0x0, tag="hibernation", name=com.huawei.powergenie", ws=null, uid=<*>, pid=<*> 
I/===> int ulp_brain_turn_onoff_dr_provider() line <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
removeRequest:com.sankuai.meituan 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> : <*> 
Error reading charge file 
sending broadcast to Pid = <*>, Uid = <*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*> <*> <*> <*> <*> <*> <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
at java.io.FileInputStream.open(Native Method) 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
updateIsPoweredLocked: wasPowered=false, mIsPowered=false, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> to hibernation <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
begin of formatChinaDateRange <*> 
setAlarmsPending ... 
proxy app:com.sankuai.meituan,uid:<*>,result:true 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
<*> <*> <*> 
at java.net.SocketInputStream.read(SocketInputStream.java:<*>) 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
at java.io.FileInputStream.open(Native Method) 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
isWiredHeadsetOn... 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
getImsPhoneId failed. Exception = org.codeaurora.ims.QtiImsException: ImsService is not running 
<*> <*> <*> <*> <*> 
<*> ok, pid: [<*>, <*>, <*> 
<*> <*> OK ! 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>} <*> <*> <*> 
at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
Heartbeat timer.timers{<*>} <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) Login_By_Step-> at <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
Error reading charge file 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
RefreshBatteryInfo isBatteryLow: <*> 
onReceive intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
<*> <*> <*> <*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> duration=<*> } transition to: <*> <*> 
SND -> {<*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getCurrentCellid type is PHONE_TYPE_GSM 
shouldBlockLocation running ... 
offsetBrightness=<*>.<*>,mOffsetBrightness_last7.<*>,lux=<*>.<*>,mPosBrightness=<*>.<*>,mIsUserChange=false,mDelta=<*>.<*>,defaultBrightness=<*>.<*>,mStartLuxDefaultBrightness=<*>.04mLastLuxDefaultBrightness=<*>.<*> 
QSEECom_send_cmd return! 
send data return = <*> 
receive data len = <*> 
FpPerformance onFingerAuthenticated! 
onNotificationExpansionChanged called 
action:com.android.systemui.statusbar.visible.change, mPermissionType:<*> 
csr 
refreshState=sound, RingModeState[,icon=null,label=null,labelTint=<*>,textChangedDelay=<*>,contentDescription=null,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=null,expandedAccessibilityClassName=null,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false,mode=<*>] 
refreshState=rotation, BooleanState[,icon=null,label=null,labelTint=<*>,textChangedDelay=<*>,contentDescription=null,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=null,expandedAccessibilityClassName=null,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false] 
<*> false false <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*>|REPORT : <*> <*> <*> <*> 
send data return = <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
DynamicUpdater registerReceiver 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
platform_can_split_snd_device: snd_device(<*>) num devices(<*>) new_snd_devices(<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
apply skiped :<*> 
Ignore update <*> <*> false 
DefaultState what=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:l4vpn : l4vpn status is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<*> <*> <*> <*> u0 euid: <*> <*> <*> euid: <*> 
HwPanelView restoreDrawState 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
AutoCleanReceiveServer:receive action:android.intent.action.SCREEN_ON 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*>| ## MSG_DEAL_SYSTEM_EVENT <*> 
qsc_decode end 
SimCardMethod:/getSimCardInfo: imsi is null 
Watch Thread{<*>} <*> <*> <*> 
[LogUploadService.onCreate] 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
out_get_latency: Latency <*> 
tcp.conn{<*>} XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
unproxy app:com.android.browser,uid:<*>,result:true 
Calling a method in the system process without a qualified user: <*> <*> <*> <*> <*> 
<*> <*> <*> 
dispatch ordered broadcast [foreground] <*> u-<*> android.intent.action.TIME_TICK}, has <*> receivers 
chinaDateTime:傍晚<*>:<*> 
Model onReceive user=UserHandle{<*>} 
ProximitySensor, enable, <*>: en=<*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
Split enqueueing broadcast <*> <*> 
WeatherDynamicUpdater update before : <*> <*> <*> <*>, <*> 
msg = <*> received 
<*> enter for <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
<*>|compensate received 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
cleanUpApplicationRecord -- <*> 
onProcessDied pid = <*>, uid = <*> 
AwareMem_Kill: execute: killing count=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> y = <*> 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event TCP_CONNECTED 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> y = <*> 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
<*> <*> <*> <*> 
cancelNotification,index:-<*> 
keyAppBroadcastQueueForIntent intent Intent { act=com.tencent.mm.ui.ACTION_ACTIVE flg=0x10 (has extras) } on bgkeyapp queue 
<*> <*> V.ED..... ........ <*>,<*>-<*>,<*> #7f1401be app:id/battery_outside_percent} 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> <*> <*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
onSignal: mSubId=<*>,currDataSubID=<*> 
m1: false 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace : getkey <*> <*> 
Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=<*>, metaState=<*>, flags=0x68, hwFlags=0x3, repeatCount=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x101 } 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> flg=0x10 (has extras) } on bgkeyapp queue 
<*> <*> <*> 
updateBarBgColor 
<*> <*> <*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> #7f14032f app:id/hw_notification_number} 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
MyOrientationListener: updateRotation. 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Calling fingersense_classify_touch() 
<*> <*> = <*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> y = <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=OFF, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> = <*> 
selectOutput() commonFlags for output <*>, <*> 
Moving to PAUSED: ActivityRecord{930e418 u0 com.huawei.android.launcher/.unihome.UniHomeLauncher <*> (pause complete) 
receive data len = <*> 
at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<*>) 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
DisplayPowerState :OFF 
ContentChange for slot: <*> 
poll before: g_monitor_fd =<*> 
KGSvcFp onAuthenticationAcquired.<*> 
setColorTemperatureAccordingToSetting new. 
handleNotifyScreenTurningOn 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
<*> <*> V.ED..... ........ <*>,<*>-<*>,<*> <*> <*> 
receive data len = <*> 
received cell-signal:<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
Launcher doResumeWork() 
<*> <*> <*> <*> <*> 
qsc_send_cmd finish 
<*> <*> <*> <*> <*> 
<*> <*> <*> --> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
<*> <*> <*> false false 
showPrimarySecurityScreen() 
Dis-Feature : <*> 
sendImmediateMessage <*> 
mTiffStream skip = <*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> #7f14032f app:id/hw_notification_number} 
updateBluetooth:::setBluetoothBatteryEnable false. 
New app record <*> <*> <*> <*> <*> 
generateAddAnimation:null, false 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
transferRemoteInputFocus: <*> 
startAllModules 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bmp is null : false 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*>|getTodayTotalSteps <*> 
<*> <*> <*> <*> : <*> <*> : false <*> : <*> <*> <*> <*>-<*>-<*> <*>:<*>:<*> <*> : false 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
set notification panel padding = <*> 
updateDimmedActivatedHideSensitive overlap:false 
ambient lux=<*>.<*>,timeStamp =<*> 
<*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
|CORE| CNE received unexpected action: android.intent.action.BATTERY_CHANGED 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
Error reading charge file 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
Error reading charge file 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
stopNavigating, mStarted=false 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
SND -> {<*> <*> <*> <*> <*> <*> 
handle_exception_events enter 
Error reading charge file 
send: <*> 
<*> <*>-<*>-<*> <*>:<*>:<*> 
Sending non-protected broadcast <*> from system uid <*> pkg <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
msg = <*> received 
Error reading charge file 
Error reading charge file 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|compensate received 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
Handle message: <*> 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
removeNotificationChildren 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isMusicActive... 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
at com.huawei.android.bastet.HwBastet.prepareHeartbeatProxy(HwBastet.java:<*>) 
<*> <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) changed bounds; rebatching 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
refreshBatteryInfo: null 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: false 
RCV <- {<*> IfaceClass idle <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
hideTraffic 
tcp.conn{<*>} XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
formatChinaDateTime, change to China <*> 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
updateClipping isOverlap:false 
mDateString is: <*>月<*>日星期日 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
sending broadcast to Pid = <*>, Uid = <*> 
<*>|rebuild notification 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
hideTraffic 
no controller energy info supplied 
<*> <*> <*> <*> 
<*> <*> <*> : <*> 
LoginThread{<*>} LoginC.doLoginByStep(LoginC.java:<*>) Login_By_Step-> at <*> 
GetAddrInfoHandler addr: uc.huawei.com {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
at java.io.FileInputStream.open(Native Method) 
<*> <*> to hibernation <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
Watch Thread{<*>} <*> <*> <*> 
<*>|logicalDealBroadcastEvent : Intent { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) } 
Error reading charge file 
sending broadcast to Pid = <*>, Uid = <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
Proxy wakelock uid = <*> pid = <*> 
isMusicActive... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Error reading charge file 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> <*> <*> 
ImsServiceSub : <*> 
applyIconTint 
<*> <*> <*> <*> <*> <*> <*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: false 
begin of formatChinaDateRange <*> 
<*> <*> <*> <*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
acquire lock=<*>, flags=0x1, tag="hibernation", name=com.huawei.powergenie, ws=null, uid=<*>, pid=<*> 
onShowStatusChange show:false 
onStepCounterChange stepsNum:<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> 
at java.net.Socket.connect(Socket.java:<*>) 
Create obj success use class android.app.HwCustNotificationImpl 
applyInPlace=true shouldPeek=false alertAgain=true 
keyAppBroadcastQueueForIntent intent Intent { <*> flg=0x10 (has extras) } on bgkeyapp queue 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:libcSeekFile => fseek[<*>]:[<*>][<*>][EA60465C] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> tunnel <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send <*> <*> <*> <*> <*> <*> <*> <*> 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event TCP_CONNECTED 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> 
<*> <*> <*> 
CallObjectMethod end 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
<*> TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch delay to <*> 
pool-<*>-thread-<*>{<*>} <*>.doInBackground(TupHelper.java:<*>) <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
at java.io.FileInputStream.open(Native Method) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
Watch Thread{<*>} <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
sending broadcast to Pid = <*>, Uid = <*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
handleLteCaStatusChange 
Rac Change (PDC) data: [<*>, <*>] 
isCurrentBySim()=false 
isMonitorCellId mInfos.size() = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|getTodayTotalSteps <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*>|calculateAltitudeWithCache datas.size=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateClipping isOverlap:false 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
Broadcasting intent ACTION_RAC_CHANGED 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Response ID <*> is not served in this process. 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
<*>|standStepCounter report <*> steps,write fe 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
<*>|after compensate: cache step_<*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
onLayout:left=<*>, top=<*>, right=<*>, bottom=<*>, offset=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
mVSimCurCardType is -<*> 
getTempInfo error: null, <*> 
getImsPhoneId failed. Exception = org.codeaurora.ims.QtiImsException: ImsService is not running 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
scheduleTimeTickEvent triggerAtTime = <*> 
formatChinaDateTime, change to China <*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
begin of formatChinaDateRange <*> 
mDateString is: <*>月<*>日星期日 
<*> <*> <*> = <*> 
set ordinal Value failed! name is not in the enum map, name = ChrVolteStatisticInfo 
<*> <*> : <*> 
<*> <*> : <*> 
<*> <*> : <*> 
update() updated: <*> 
process buffer and get message 
<*> <*> : <*> 
<*> <*> <*> <*> <*> 
msg = <*> received 
<*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> disconnecting to uc.huawei.com:<*> 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
is Beta User, userType = <*> 
begin of formatChinaDateRange <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
EventCenter Get <*> 
RCV <- {<*> IfaceClass active <*> <*> <*>} 
<*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
mIsScreenOn is: false, WAKEUP alarm trigger action = <*> package name is: <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
isMusicActive... 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
monitor check touch devices 
mSendService start 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
not 3G net type. do nothing. 
Error reading charge file 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
Error reading charge file 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
formatChinaDateTime equals. 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
removeFreezeProcess pkg:com.huawei.espacev<*> 
check dependency pid: <*> is depended by pid: <*> 
mDateString is: <*>月<*>日星期日 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.open(Native Method) 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
WatchThread{<*>} TcpCirChannel.connect(TcpCirChannel.java:<*>) Connect to server address = [uc.huawei.com,] port = <*> 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
at com.huawei.ecs.mtk.util.SimpleThread.run(SimpleThread.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
sending broadcast to Pid = <*>, Uid = <*> 
<*>|compensate received 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateTint: tint=<*> 
at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<*>) 
at com.huawei.ecs.mip.proxy.TcpSocket.connect(TcpSocket.java:<*>) 
pool-<*>-thread-<*>{<*>} <*>.doInBackground(TupHelper.java:<*>) <*> <*> <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
msg = <*> received 
Acquiring suspend blocker "PowerManagerService.Display". 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<*> <*> <*> <*> 
<*> called handle:<*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
qsc_decode end 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> <*> <*> 
begin 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
apply skiped :<*> 
send data return = <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> false false 
<*> <*> <*> <*> 
setKeyguardViewState: false-false 
resetPagerState 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
Get no-perm <*> <*> <*> 
remove pxy wl, pid: <*>, uid: <*> from pxy process list. 
<*> <*> <*> pid:<*> uid:<*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
setBackgroundColor:new=<*>, old=<*> 
stopNavigating, mStarted=false 
send data return = <*> 
start_output_stream: exit 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) changed bounds; rebatching 
<*> <*> action = <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> ......ID <*>,<*>-<*>,<*> <*> <*> 
disableGps:false isEnabled()=true 
<*>|REPORT : <*> <*> <*> <*> 
QSEECom_send_cmd return! 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
ImsSenderRxr : Response data: [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>, <*>][SUB0] 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*> <*> <*> <*> <*> 
mActiveIface: null 
Unproxy wakelock uid = <*> pid = <*> 
setRequest ProviderRequest[OFF] 
ash->screen unlock 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
action:null, mPermissionType:<*> 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
ActivityThread,attachApplication 
send data return = <*> 
proxyWakeLockByPidUid, pid: <*>, uid: <*>, proxy: false 
proxyBroadcast:[com.android.browser] proxy:false 
mDateString is: <*>月<*>日星期日 
Change to single clock mode! 
at com.baidu.location.e.a.<init>(Unknown) 
ITrafficInfo:ITrafficInfo create 301updateBytes = <*> 
Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:<*> <*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
shouldBlockLocation running ... 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:WriteSdkGroupItem: hash has same <*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
<*> <*> <*> <*> = <*> 
querySoundEffectsEnabled... 
[ap] temp_new :<*> temp_old :<*> 
<*> <*> <*> <*> 
[virtual void android::MediaPlayer::notify(int, int, int, const android::Parcel *)] : [<*>] <*> <*> <*> <*> 
<*> <*> <*> <*> <*> for <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
[virtual void android::MediaPlayer::notify(int, int, int, const android::Parcel *)] : [<*>] <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:libcSeekFile => fseek[<*>]:[<*>][<*>][EA60465C] 
cancelNotificationWithTag pid <*>,uid = <*>,tag = null,pkg =com.tencent.mm,id =<*> 
cancelNotification,index:-<*> 
cancelNotification,index:-<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path =>Access [/mnt/sdcard/sandbox/AnyOfficeSDK/sdk/QDJ7lEGuRlJb2r2mqrSExBTDjN4QhUgEPVptBL0HnX4=] real path ok 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in fetching group <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_Tree_Enc_Path =>Access [/mnt/sdcard/sandbox/AnyOfficeSDK/sdk/QDJ7lEGuRlJb2r2mqrSExBTDjN4QhUgEPVptBL0HnX4=] real path ok 
setBackgroundAlpha:alpha=<*>.<*> 
<*> <*> <*> <*> V.ED..... ........ <*>,<*>-<*>,<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
Change to single clock mode! 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> #7f1401be app:id/battery_outside_percent} 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
huawei_cust_get_parameters: returns 
<*> <*> <*> <*> <*> <*> 
releaseOutput() <*> 
Launcher.LauncherProvider queried count: <*> 
Launcher.Folder childCount: <*> 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null <*> <*> <*> <*> <*> <*> 
<*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null <*> <*> <*> <*> <*> <*> 
<*> <*> <*> uid: <*>, pid: <*> 
<*> <*> <*> 
<*> output <*>, stream <*>, <*> <*> 
onTransact in code is: <*> 
Launcher.LauncherProvider queried count: <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{<*> <*>:com.baidu.input_huawei/u0a74} 
onSignal: mSubId=<*>,currDataSubID=<*> 
updateLightsLocked,mInCall <*> <*> <*> == null?true 
<*> <*> <*> <*> <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
onNotificationVisibilityChanged called 
BadgeContentObserver newBadgeNumber:<*>,oldBadgeNumber:<*> <*> <*> <*> 
Launcher.Folder childCount: <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> Branch : 
isWechatVersionSupport currentVersionCode:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg 28TCP_OK 
AwareAppMngSort: <*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
cleanUpApplicationRecord -- <*> 
Unproxy wakelock uid = <*> pid = <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
APS: 2DSDR: AbsListView.FlingRunnable.endFling, we will clear SDR ratio 
received cell-signal:<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
received cell-signal:<*> 
fingersense_classify_touch() finished 
fingersense_classify_touch() finished 
onDataActivity: direction=<*> 
mVSimCurCardType is -<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
monitor check touch devices 
Background partial concurrent mark sweep <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
csr 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 <*> <*> 
<*> is not <*> <*> <*> 
isCloneProcess = false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
csr 
m1: false 
cancelNotification,index:<*> 
updateLightsLocked,mInCall <*> = true,ledNotification == null?true 
updateLightsLocked --> level:<*>, status:<*> 
updateDimmedActivatedHideSensitive overlap:false 
read Events lux: <*>.<*> 
querySoundEffectsEnabled... 
<*> <*> broadcast OK ! 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> 
I/---> locClientSendReq line <*> <*> 
I/<--- void <*> uint32_t, const <*> void *) line <*> <*> 
Launcher.LauncherProvider launcher call - method:setAppBadgeCount arg:null extras:[app_shortcut_custom_id=null][app_shortcut_class_name=com.tencent.mm.ui.LauncherUI][app_badge_count=<*>] uid =<*> pid =<*> 
<*> <*> <*> 
HoldService:locationInfo switch is on . pid = <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
<*> <*> <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
HoldService:locationInfo switch is on . pid = <*> 
shouldBlockLocation ret:false 
handleANRFilterFIFO,uid = 10146cmd = <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
handleANRFilterFIFO,uid = 10146cmd = <*> 
handleANRFilterFIFO,uid = 10146cmd = <*> 
PermissionDbVisitor:insertHistoryRecord:HistoryRecord[packageName:com.sankuai.meituan,permissionType:<*>,action:<*>,dateStartTime:<*>,timestamp:<*>] 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Can't find ssid. 
shouldBlockLocation running ... 
<*> count: <*> 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
svid: <*> cn0: <*>.<*> elev: <*>.<*> azimuth: <*>.<*> A 
mVSimCurCardType is -<*> 
action:android.location.GPS_ENABLED_CHANGE, mPermissionType:<*> 
not 3G net type. do nothing. 
getOrInflateState subId:<*> 
<*> <*> <*> <*> <*> <*> <*> 
Start proc <*> <*> <*> <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
######### CMD_QUERY_PKTS ######## 
Invalid profile no. <*>, total profiles <*> only 
updateTint: tint=<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
cleanUpApplicationRecord -- <*> 
<*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*>|getTodayTotalSteps <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
setOverlap mOverlap:true, mDimmed:false 
<*> <*> <*> <*> = <*> 
updateNotificationShade 
onEntryRemoved:<*>|com.sankuai.meituan|<*>|null|<*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
ContentChange for slot: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
Calling fingersense_classify_touch() 
<*>|compensate <*> <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
<*> <*> <*> visible: false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
received broadcast android.intent.action.TIME_TICK 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
fingersense_touch_up() finished 
ImsServiceSub : handleSsac voice = <*> 
mVSimCurCardType is -<*> 
onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
getOrInflateState subId:<*> 
fingersense_touch_up() finished 
isCurrentBySim()=false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
Calling fingersense_classify_touch() 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
------------startInput-------------- 
not 3G net type. do nothing. 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
mVSimCurCardType is -<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
answer call by keyCode = <*>, down = true, isSupVolumnkeyAnswerCall = false 
HwDPMS received transaction_isHwFrameworkAdminAllowed, the ret: false 
obtain, mHwFlags=-<*> 
<*>|calculateCaloriesWithCache datas.size=<*> 
transitionTo:mode=<*>, isEmuiStyle=false 
------------startInput-------------- 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
BadgeContentObserver getBadgeNumber: <*> mComponentName :ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
BoostFramework() : mPerf = <*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
Client requesting input be hidden, pid=<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] <*> <*> <*> 
onProcessDied pid = <*>, uid = <*> 
Client requesting input be hidden, pid=<*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
icon : com.baidu.input_huawei found in app 
BadgeContentObserver newBadgeNumber:<*>,oldBadgeNumber:<*> <*> <*> <*> 
------------startInput-------------- 
hideSecSoftInput = false 
mVSimCurCardType is -<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
No config file found for:/themes/diff/icons 
updateNotificationShade 
CFG_DIRS length : <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> color=0x00000000 vis=PRIVATE) 
Create obj success use class android.app.HwCustNotificationImpl 
CFG_DIRS length : <*> 
received cell-signal:<*> 
received cell-signal:<*> 
c: true, w: false, t: false, l: false 
------------startInput-------------- 
Calling fingersense_touch_up() 
keyAppBroadcastQueueForIntent intent Intent { flg=0x10 cmp=com.tencent.mm/.booter.NotifyReceiver (has extras) } on bgkeyapp queue 
onDataActivity: direction=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<*> <*> <*> duration=<*> } transition to: <*> <*> 
<*> app record <*> <*> 
cancelNotification,index:-<*> 
isCurrentBySim()=false 
CFG_DIRS length : <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
transferRemoteInputFocus: <*> 
<*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
fingersense_classify_touch() finished 
getOrInflateState subId:<*> 
Calling fingersense_touch_up() 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
<*> <*> <*> duration=<*> } transition to: <*> <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
fingersense_classify_touch() finished 
is3GCalling is false,mCdmaSlot is -<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
getOrInflateState subId:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
MyOrientationListener: updateRotation. 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
collectReceiverComponents, callerApp: ProcessRecord{<*> <*>:com.baidu.input_huawei/u0a74}, intent:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, receiver size:<*>, flags: <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Create obj success use class android.app.HwCustNotificationImpl 
isCloneProcess = false 
removeNotificationViews:<*>|com.sankuai.meituan|<*>|null|<*> 
Transact:getHwAdminCachedValue to device policy manager service. 
transitionTo:mode=<*>, isEmuiStyle=false 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
sendEvent:action=<*>, flag=<*> 
obtain, mHwFlags=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
C onDismissRequested reason = <*> 
obtain, mHwFlags=<*> 
obtain, mHwFlags=-<*> 
Client requesting input be hidden, pid=<*> 
keyAppBroadcastQueueForIntent intent Intent { act=com.tencent.mm.ui.ACTION_DEACTIVE flg=0x10 (has extras) } on bgkeyapp queue 
getMode... 
collectReceiverComponents, callerApp: ProcessRecord{<*> <*>:com.baidu.input_huawei/u0a74}, intent:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, receiver size:<*>, flags: <*> 
BoostFramework() : mPerf = <*> 
action:com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER, mPermissionType:<*> 
------------startInput-------------- 
hideSecSoftInput = false 
isCurrentBySim()=false 
AwareMem_Kill: execute: killing count=<*> 
JIT profile information will not be recorded: profile file does not exits. 
<*> <*> <*> <*> changed bounds; rebatching 
Create obj success use class android.app.HwCustNotificationImpl 
cancelNotification,index:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
isCurrentBySim()=false 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Invalid profile no. <*>, total profiles <*> only 
Client requesting input be hidden, pid=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
APS: 2DSDR: AbsListView.FlingRunnable.endFling, we will clear SDR ratio 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
ImsServiceSub : handleSsac voice = <*> 
Client requesting input be hidden, pid=<*> 
updateClipping isOverlap:false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Invalid profile no. <*>, total profiles <*> only 
m1: false 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
getOrInflateState subId:<*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
<*> <*> <*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
getOrInflateState subId:<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
check dependency pid: <*> is depended by pid: <*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
m1: false 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Client requesting input be hidden, pid=<*> 
Invalid profile no. <*>, total profiles <*> only 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
WatchThread{<*>} TcpClientThread.disconnectSocket(TcpClientThread.java:<*>) disconnecting to uc.huawei.com:<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event TCP_CONNECTED 
<*>|calculateCaloriesWithCache totalCalories=<*> 
removeNotificationChildren 
showNotificationAll 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
<*>|compensate received 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Client requesting input be hidden, pid=<*> 
updateClipping isOverlap:false 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
<*>|after compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
<*>|REPORT : <*> <*> <*> <*> 
Client requesting input be hidden, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Client requesting input be hidden, pid=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
mVSimCurCardType is -<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Calling fingersense_classify_touch() 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
updateDimmedActivatedHideSensitive overlap:false 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
transferRemoteInputFocus: <*> 
Client requesting input be hidden, pid=<*> 
<*>|getTodayTotalSteps <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
disableEffects=null canInterrupt=false once update: false 
<*>|after compensate: cache step_<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
ImsSenderRxr : [UNSL]< UNSOL_SSAC_CHANGED <*> 
<*>|after compensate: cache step_<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
monitor check touch devices 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
DeviceStateListener:MyCityChanged: true 
fingersense_touch_up() finished 
Client requesting input be hidden, pid=<*> 
fingersense_classify_touch() finished 
Client requesting input be hidden, pid=<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
onDataActivity: direction=<*> 
isCardAbsent slot:<*> slotState:<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
csr 
Change in state from: <*> <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Client requesting input be hidden, pid=<*> 
onFling::not valid gesture or touch plus on, false, return! 
formatChinaDateTime equals. 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Client requesting input be hidden, pid=<*> 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
ImsServiceSubHandler : Message received: what = <*> 
c: true, w: false, t: false, l: false 
received cell-signal:<*> 
getOrInflateState subId:<*> 
RCV <- {<*> IfaceClass idle <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
Client requesting input be hidden, pid=<*> 
new ScenarioAction sPoolSize: <*> 
Client requesting input be hidden, pid=<*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
received cell-signal:<*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
Application com.baidu.input_huawei is depended by other app, delay to H! 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
new ScenarioAction sPoolSize: <*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
isCurrentBySim()=false 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
getOrInflateState subId:<*> 
Client requesting input be hidden, pid=<*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
Client requesting input be hidden, pid=<*> 
Client requesting input be hidden, pid=<*> 
new ScenarioAction sPoolSize: <*> 
<*>|calculateAltitudeWithCache datas.size=<*> 
new ScenarioAction sPoolSize: <*> 
transferRemoteInputFocus: <*> 
APS: 2DSDR: AbsListView.FlingRunnable.run(), SDR ratio = <*>.<*>, layer height = <*>, scroll view height = <*> 
APS: 2DSDR: CanvasContext::setSDRZoomout(), the SDR ratio from ViewRootImpl is <*>.<*>, native window width = <*>, height = <*> 
Client requesting input be hidden, pid=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
mSimSubId:<*> onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
is3GCalling is false,mCdmaSlot is -<*> 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
updateTint: tint=<*> 
<*> <*> <*> 
transitionTo: mode=MODE_TRANSPARENT, animate=false 
isCardAbsent slot:<*> slotState:<*> 
getMode... 
c: true, w: false, t: false, l: false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
receive data len = <*> 
qsc_decode end 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bmp is null : false 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
java.lang.InterruptedException 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
showNotificationAll 
MSG_QUERY_TCP_INFO called,count:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
action:org.codeaurora.VOIP_VOPS_SSAC_STATUS, mPermissionType:<*> 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
Change in state from: <*> <*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
fingersense_classify_touch() finished 
<*> device policy manager service. 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
setSystemUiVisibility vis=<*> mask=ffffffff oldVal=<*> newVal=<*> diff=<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
<*> <*> <*> <*> <*> <*> 
Classify cgroup warning: No such process 
Classify cgroup warning: No such process 
setAlarmsPending ... 
Destroying surface <*> called by com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 <*> vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
onEntryAdded:<*>|com.sankuai.meituan|<*>|null|<*>, group=<*>|com.sankuai.meituan|<*>|null|<*> 
onNotificationExpansionChanged called 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
Invalid profile no. <*>, total profiles <*> only 
action:com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver, mPermissionType:<*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
mDateString is: <*>月<*>日星期日 
<*> <*> <*> duration=<*> } transition to: <*> <*> 
<*> app record <*> <*> 
getProcessInfo: failed to find this proc 
applyInPlace=true shouldPeek=false alertAgain=true 
updateClipping isOverlap:false 
isCurrentBySim()=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
fingersense_classify_touch() finished 
HwPhoneWindowManager has intercept Key : <*>, <*> <*> <*> <*> : <*> 
fingersense_touch_up() finished 
resumeSuspendedAutohide 
answer call by keyCode = <*>, down = false, isSupVolumnkeyAnswerCall = false 
action:com.tencent.mm.ui.ACTION_ACTIVE, mPermissionType:<*> 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> (has extras) } 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
CFG_DIRS length : <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onProcessDied pid = <*>, uid = <*> 
onTransact in code is: <*> 
BadgeContentObserver newBadgeNumber:<*>,oldBadgeNumber:<*> mComponentName : ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
isCloneProcess = false 
setOverlap mOverlap:true, mDimmed:false 
Create obj success use class android.app.HwCustNotificationImpl 
onSignal: mSubId=<*>,currDataSubID=<*> 
c: true, w: false, t: false, l: false 
<*> <*> #<*> A=com.tencent.mm U=<*> StackId=<*> sz=<*>} 
<*> <*> <*> #<*> A=com.tencent.mm U=<*> StackId=<*> sz=<*>} 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Client requesting input be hidden, pid=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> <*> <*> 
<*> Branch : 
updateBluetooth:::setBluetoothBatteryEnable false. 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW <*> typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) } 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
at android.database.sqlite.SQLiteConnection.open(SQLiteConnection.java:<*>) 
HwLocationManager:onLocationChanged.ThirdLocation 
cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Unproxy wakelock uid = <*> pid = <*> 
Launcher onPause() 
<*> <*> <*> 
moveTaskToTop mTaskChanged:true 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> #7f1403e3 app:id/speed} 
Skipping, withExcluded: false, tr.intent:Intent { <*> <*> <*> <*> 
not 3G net type. do nothing. 
getOrInflateState subId:<*> 
@@@@@@@@@@@@ uid :<*> download :true 
fingersense_classify_touch() finished 
onFling::not valid gesture or touch plus on, false, return! 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
Calling fingersense_touch_up() 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<*> <*> OK ! 
onDataActivity: direction=<*> 
check dependency pid: <*> is depended by pid: <*> 
<*> <*> <*> <*> <*> 
interceptKeyBeforeQueueing: key <*> , result : <*> 
Transact:getHwAdminCachedValue to device policy manager service. 
mSimSubId:<*> onDataActivity: direction=<*> 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
WatchThread{<*>} TcpClientThread.disconnectSocket(TcpClientThread.java:<*>) disconnecting to uc.huawei.com:<*> 
tcp.recv{<*>} TcpClientThread.readSocket(TcpClientThread.java:<*>) <<< ERROR(<*>) >>> socket read length failure -<*> 
csr 
Create obj success use class android.app.HwCustNotificationImpl 
No config file found for:/themes/diff/icons 
applyInPlace=true shouldPeek=false alertAgain=true 
Invalid profile no. <*>, total profiles <*> only 
not in link monitoring mode, ignore TCP result . 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4GPLUS),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*> 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
onNotificationExpansionChanged called 
updateDimmedActivatedHideSensitive overlap:true 
updateTint: tint=<*> 
cancelNotification,index:<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
fingersense_touch_up() finished 
|CORE| CNE received unexpected action: android.intent.action.BATTERY_CHANGED 
isCardAbsent slot:<*> slotState:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
onNotificationExpansionChanged called 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> color=0x00000000 vis=PRIVATE)) 
updateLightsLocked --> mBatteryLight.turnOff 
Create obj success use class android.app.HwCustNotificationImpl 
<*> = null 
updateNotificationShade 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*>|after compensate: cache step_<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
<*>|compensate received 
transferRemoteInputFocus: <*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
<*> <*> <*> visible: false 
removeNotificationChildren 
CFG_DIRS length : <*> 
onEntryRemovedInternal:<*>|com.sankuai.meituan|<*>|null|<*>, group=<*>|com.sankuai.meituan|<*>|null|<*> 
Invalid profile no. <*>, total profiles <*> only 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
c: true, w: false, t: false, l: false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
chinaDateTime:傍晚<*>:<*> 
getOrInflateState subId:<*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = null,pkg <*> <*> 
ActivityManagerService,attachApplication,callingPid = <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> color=0x00000000 vis=PRIVATE)) 
<*> <*> <*> startService}}) changed bounds; rebatching 
updateDimmedActivatedHideSensitive overlap:true 
disableEffects=null canInterrupt=false once update: false 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
removeNotificationChildren 
showNotificationAll 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> <*> <*> policy can not execute 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
No config file found for:/themes/diff/icons 
isCloneProcess = false 
transferRemoteInputFocus: <*> 
setOverlap mOverlap:true, mDimmed:false 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 <*> vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
No peeking: not <*> <*> <*> 
reusing notification for key: <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
isCardAbsent slot:<*> slotState:<*> 
fingersense_classify_touch() finished 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCardAbsent slot:<*> slotState:<*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] <*> <*> <*> <*> 
m1: false 
generateAddAnimation:null, false 
showNotificationAll 
onNotificationExpansionChanged called 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
getOrInflateState subId:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4GPLUS),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
mVSimCurCardType is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
WatchThread{<*>} TcpClientThread.disconnectSocket(TcpClientThread.java:<*>) disconnecting to uc.huawei.com:<*> 
fingersense_touch_up() finished 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) notify user tcp connected successully at <*> to uc.huawei.com:<*> 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg 659TCP_OK 
mSimSubId:<*> onDataActivity: direction=<*> 
Invalid profile no. <*>, total profiles <*> only 
cancelNotification,index:-<*> 
isCurrentBySim()=false 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) 
removeNotificationViews:<*>|com.sankuai.meituan|<*>|null|<*> 
updateClipping isOverlap:false 
<*> <*> <*> <*> <*> <*> <*> <*> 
fingersense_classify_touch() finished 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
csr 
updateTint: tint=<*> 
onNotificationExpansionChanged called 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
removeNotificationChildren 
setOverlap mOverlap:false, mDimmed:false 
<*> <*> <*> <*> 
received cell-signal:<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
csr 
<*> connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4GPLUS),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*> 
<*>|MSG_RECORD_DATA_TO_FILE_DELAY datas.size()=<*> 
AwareMem_Kill: execute: killing count=<*> 
cancelNotification,index:-<*> 
updateNotificationShade 
Calling fingersense_classify_touch() 
Systrace:: buffer is full and will reset. 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
send: <*> 
processOp opType: <*>, uid: <*>, pid: <*> 
<*> count = <*> 
isCurrentBySim()=false 
<*> <*> <*> visible: false 
JIT profile information will not be recorded: profile file does not exits. 
CFG_DIRS length : <*> 
enqueueNotificationInternal: n.getKey = <*> 
summary = null 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
t:false, fl: false, p: <*>, ce: true, we: false 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =time_tick 
begin of formatChinaDateRange <*> 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
No peeking: not <*> <*> <*> 
removeNotificationChildren 
Create obj success use class android.app.HwCustNotificationImpl 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getOrInflateState subId:<*> 
<*> msg = <*> received 
poll before: g_monitor_fd =<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
onFling::not valid gesture or touch plus on, false, return! 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4GPLUS),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
<*> Process <*> <*> <*> <*> euid: <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
No config file found for:/themes/diff/icons 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
c: true, w: false, t: false, l: false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
disableEffects=null canInterrupt=false once update: false 
CFG_DIRS length : <*> 
No config file found for:/themes/diff/icons 
isCloneProcess = false 
cancelNotificationLocked:<*>|com.sankuai.meituan|<*>|null|<*> 
updateNotificationShade 
updateClipping isOverlap:false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
is3GCalling is false,mCdmaSlot is -<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
received cell-signal:<*> 
mVSimCurCardType is -<*> 
mSimSubId:<*> onDataActivity: direction=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
mVSimCurCardType is -<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> = <*> 
onDataActivity: direction=<*> 
csr 
<*> <*> <*> <*> <*> <*> <*> <*> 
Create obj success use class <*> 
No config file found for:/themes/diff/icons 
transferRemoteInputFocus: <*> 
cancelNotificationLocked:<*>|com.sankuai.meituan|<*>|null|<*> 
CFG_DIRS length : <*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
received cell-signal:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
<*> app record <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
<*> <*> user=UserHandle{<*>} id=<*> tag=null <*> Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 <*> vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
updateLightsLocked,mInCall <*> = true,ledNotification == null?true 
updateNotificationShade 
m1: false 
<*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
Invalid profile no. <*>, total profiles <*> only 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
processOp opType: <*>, uid: <*>, pid: <*> 
CFG_DIRS length : <*> 
onEntryAdded:<*>|com.sankuai.meituan|<*>|null|<*>, group=<*>|com.sankuai.meituan|<*>|null|<*> 
No config file found for:/themes/diff/icons 
showNotificationAll 
cancelNotificationWithTag pid <*>,uid = <*>,tag = null,pkg <*> <*> 
showNotificationAll 
updateTint: tint=<*> 
begin of formatChinaDateRange <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
@@@@@@@@@@@@ uid :<*> download :true 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
remove target not exist, maybe the UI process: uid: <*>, pid: <*> 
setOverlap mOverlap:true, mDimmed:false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
updateTint: tint=<*> 
No config file found for:/themes/diff/icons 
cancelNotificationLocked,remove =com.sankuai.meituan 
updateTint: tint=<*> 
showNotificationAll 
showNotificationAll 
isCurrentBySim()=false 
Invalid profile no. <*>, total profiles <*> only 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
ActivityManagerService,attachApplication,callingPid = <*> 
Create obj success use class <*> 
<*> user=UserHandle{<*>} id=<*> tag=null key=<*>|com.sankuai.meituan|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory <*> <*> <*> policy can not execute 
Application com.huawei.espacev2 is im app and connected ok, delay to H! 
onSignal: mSubId=<*>,currDataSubID=<*> 
csr 
m1: false 
cleanUpApplicationRecord -- <*> 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] <*> <*> <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
getProcessInfo: failed to find this proc 
onEntryAdded:<*>|com.sankuai.meituan|<*>|null|<*>, group=<*>|com.sankuai.meituan|<*>|null|<*> 
showNotificationAll 
<*> <*> <*> <*> <*> <*> <*> 
turn off notificationLight due to incall or screenon 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
isCurrentBySim()=false 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
tcp.recv{<*>} TcpClientThread.readSocket(TcpClientThread.java:<*>) <<< ERROR(<*>) >>> socket read length failure -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*>|getTodayTotalSteps <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> <*> <*> <*> <*> 
<*> app record <*> <*> 
getOrInflateState subId:<*> 
received cell-signal:<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> = <*> 
<*> user=UserHandle{<*>} id=<*> tag=null key=<*>|com.sankuai.meituan|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
removeNotificationChildren 
<*> <*> <*> <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
Calling fingersense_classify_touch() 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
onFling::not valid gesture or touch plus on, false, return! 
@@@@@@@@@@@@ uid :<*> download :false 
mSimSubId:<*> onDataActivity: direction=<*> 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
onEntryAdded:<*>|com.sankuai.meituan|<*>|null|<*>, group=<*>|com.sankuai.meituan|<*>|null|<*> 
CFG_DIRS length : <*> 
Create obj success use class android.app.HwCustNotificationImpl 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
received cell-signal:<*> 
InputDispatcher::monitor frozen check! 
Invalid profile no. <*>, total profiles <*> only 
QOS_level:<*>(<*>),use RTTLvl:<*>;RATLvl:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
getOrInflateState subId:<*> 
new Process <*> <*> <*> <*> euid: <*> 
No peeking: not <*> <*> <*> 
setOverlap mOverlap:false, mDimmed:false 
transitionTo: mode=MODE_OPAQUE, animate=false 
[aware_mem] process <*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
updateClipping isOverlap:true 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
csr 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
begin of formatChinaDateRange <*> 
mVSimCurCardType is -<*> 
send_cmd_kernel: cmd=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
AwareMem_Kill: updateGroupList package: move high <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
cancelNotificationLocked,remove =com.sankuai.meituan 
applyInPlace=true shouldPeek=false alertAgain=true 
<*> user=UserHandle{<*>} id=<*> tag=null key=<*>|com.sankuai.meituan|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
updateTint: tint=<*> 
updateNotificationShade 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4GPLUS),activityIn=true,activityOut=true,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
onFling::not valid gesture or touch plus on, false, return! 
Change in state from: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4GPLUS),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
######### CMD_QUERY_PKTS ######## 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
<*>|rebuild notification 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
is3GCalling is false,mCdmaSlot is -<*> 
enqueueNotificationInternal: n.getKey = <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
updateLightsLocked --> mBatteryLight.turnOff 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
check dependency pid: <*> is depended by pid: <*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
To broadcast an Intent via the notifier to external apps 
isCurrentBySim()=false 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
<*> <*> <*> visible: false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
<*> <*> <*> class android.app.HwCustNotificationImpl 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for memory critical <*> <*> policy can not execute 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotificationShade 
onDataActivity: direction=<*> 
is3GCalling is false,mCdmaSlot is -<*> 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getOrInflateState subId:<*> 
<*>|getTodayTotalSteps <*> 
transferRemoteInputFocus: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
transferRemoteInputFocus: <*> 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 <*> <*> <*> 
poll before: g_monitor_fd =<*> 
<*>|before compensate: cache step_<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
isCurrentBySim()=false 
mVSimCurCardType is -<*> 
<*>|REPORT : <*> <*> <*> <*> 
onDataActivity: direction=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
isCurrentBySim()=false 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 <*> <*> 
isCloneProcess = false 
Create obj success use class android.app.HwCustNotificationImpl 
reusing notification for key: <*> 
transferRemoteInputFocus: <*> 
updateLightsLocked,mInCall =false,mScreenOn = true,ledNotification == null?true 
updateNotificationShade 
updateClipping isOverlap:false 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
isCurrentBySim()=false 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
isCurrentBySim()=false 
isCurrentBySim()=false 
csr 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
[ReceiverDispatcher-<*>]resetBastet(android/null:<*>) 
<*> <*> <*> duration=<*> } transition to: <*> <*> 
<*> <*> <*> <*> u0 euid: <*> <*> <*> euid: <*> 
power log dlsym ok 
isCloneProcess = false 
onEntryRemoved:<*>|com.sankuai.meituan|<*>|null|<*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
showNotificationAll 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
<*>|before compensate: cache step_<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
applyInPlace=true shouldPeek=false alertAgain=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
MSG_QUERY_TCP_INFO called,count:<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
Invalid profile no. <*>, total profiles <*> only 
cleanUpApplicationRecord -- <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 <*> <*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
No config file found for:/themes/diff/icons 
csr 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
received broadcast android.intent.action.TIME_TICK 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
fingersense_classify_touch() finished 
is3GCalling is false,mCdmaSlot is -<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
c: true, w: false, t: false, l: false 
<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*>;<*>,<*>,<*>,<*>,<*> 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
setOverlap mOverlap:true, mDimmed:false 
updateClipping isOverlap:true 
Create obj success use class android.app.HwCustNotificationImpl 
applyInPlace=true shouldPeek=false alertAgain=true 
c: true, w: false, t: false, l: false 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
onReceive: action = android.intent.action.LTE_CA_STATE 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
cellid has changed 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
isCurrentBySim()=false 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*> <*> <*> class android.app.HwCustNotificationImpl 
cancelNotificationLocked:<*>|com.sankuai.meituan|<*>|null|<*> 
turn off notificationLight due to incall or screenon 
Invalid profile no. <*>, total profiles <*> only 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
c: true, w: false, t: false, l: false 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 <*> <*> 
isCloneProcess = false 
isCloneProcess = false 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> startService}}) changed bounds; rebatching 
enqueueNotificationInternal: n.getKey = <*> 
showNotificationAll 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:true activityOut:true isRoaming:false 
getOrInflateState subId:<*> 
is3GCalling is false,mCdmaSlot is -<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
AwareMem_Kill: updateGroupList package: move high <*> <*> 
cleanUpApplicationRecord -- <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Create obj success use class <*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = null,pkg <*> <*> 
updateLightsLocked,turn off notificationLight 
updateClipping isOverlap:true 
<*> connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4GPLUS),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onTouchEvent: code=<*>, action=<*>, <*> { action=ACTION_UP, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
<*> <*> <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
shouldBlockLocation running ... 
Split enqueueing broadcast <*> <*> 
EventCenter Get <*> 
WeatherDynamicUpdater update before : mDrawingData[<*>] = <*> <*>, <*> 
get the task from ActivityManager size is <*> <*> 
icon : <*> found in <*> 
<*> <*> mask=ffffffff oldVal=<*> <*> <*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
Classify cgroup warning: No such process 
<*> <*> <*> OK ! 
action:com.huawei.android.action.alarm_weather, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> is: <*> 
printPackageInfo begin. 
<*> <*> is <*> 
fingersense_classify_touch() finished 
handleTouchEvent:MotionEvent { action=ACTION_DOWN, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
bmp is null : false 
bmp is null : false 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> : <*> 
<*> <*> <*> <*> : <*> <*> : false <*> : <*> <*> <*> <*>-<*>-<*> <*>:<*>:<*> <*> : false 
<*> <*> <*> 
<*> <*> <*> : <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> = true 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> enter: <*> 
platform_set_parameters: exit with code(<*>) 
platform_can_split_snd_device: snd_device(<*>) num devices(<*>) new_snd_devices(<*>) 
<*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> 
FingerprintDaemonProxyEx::setLivenessSwitch 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> <*> <*> 
<*> <*> bc config <*> 
ActivityManagerService,attachApplication,callingPid = <*> 
updateTint: tint=<*> 
updateTint: tint=<*> 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
onEntryAdded:<*>|com.sankuai.meituan|<*>|null|<*>, group=<*>|com.sankuai.meituan|<*>|null|<*> 
generateAddAnimation:null, false 
Background partial concurrent mark sweep GC freed <*> AllocSpace objects, <*> LOS objects, <*>% free, <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
at com.huawei.keyguard.util.BitmapUtils.getSuggestColorInfo(BitmapUtils.java:<*>) 
<*> <*> = true, <*> <*> <*> <*> 
out_get_latency: Latency <*> 
begin 
DisplayPowerState :ON 
bh1745-light calling driver <*> 
send data return = <*> 
<*> <*> <*> <*> <*> 
qsc_decode end 
remove(null) changed bounds; rebatching 
Rac Change (PDC) data: [<*>, <*>] 
Remaining Num Attempts = <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onScreenTurnedOn() 
getNextIndex: <*>; from <*> to <*>; size: <*> 
sendMessage <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
The tag is null error! 
<*> <*> <*> 
do not support AFT because of no config 
<*> <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
adev_set_parameters: enter: <*> 
showNotificationAll 
disableGps:false isEnabled()=true 
<*> <*> <*> 
<*> mCount=<*>, mAvgValue=<*>, mMaxValue=<*>, mMinValue=<*> 
writeSummaryFromParcelLocked, duration: <*> 
<*> <*> <*> 
writeSummaryFromParcelLocked, duration: <*> 
<*> <*> <*> <*> 
release:lock=<*>, flg=0x0, <*> <*> <*> ws=null, uid=<*>, pid=<*> 
qsc_decode end 
timeForContinueCapture id:<*> 
begin 
<*> <*> <*> 
send data return = <*> 
updateDimmedActivatedHideSensitive overlap:false 
Destroying surface <*> called by com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> <*> <*> <*> <*> <*> <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> #7f1403e3 app:id/speed} 
updateBluetooth:::setBluetoothBatteryEnable false. 
set notification panel padding = <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
updateDimmedActivatedHideSensitive overlap:false 
qsc_decode end 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
To broadcast an Intent via the notifier to external apps 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
updateTint: tint=<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
ambient lux=<*>.<*>,timeStamp =<*> 
<*>|getTodayTotalSteps <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
DisplayPowerStatesetScreenState: state=<*> 
becomeInactiveIfAppropriateLocked() 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> = <*> 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
LocalReceiver receives:android.intent.action.PACKAGE_RESTARTED 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
MSG_QUERY_TCP_INFO called,count:<*> 
poll before: g_monitor_fd =<*> 
ProximitySensor, enable, <*>: en=<*> 
mode change : <*> 
Set power mode=<*>, type=<*> flinger=0x7f9a25b<*> 
stopMonitoringMotionLocked() 
proxy app:com.android.gallery3d,uid:<*>,result:true 
onSignal: mSubId=<*>,currDataSubID=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
m1: false 
<*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
Display ready! 
onScreenTurnedOn 
<*> <*> <*> 
Fingerprint timeout 
Apply window Height MATCH_PARENT 
Remaining Num Attempts = <*> 
receive data len = <*> 
setIsExpanded: false 
<*> <*> <*> took <*> ms 
isMobileDataEnable::dateEnable=true, cotrollerEnable=true 
begin 
QSEECom_send_cmd return! 
<*> <*> <*> <*> <*> 
FpPerformance FpUtils.fingerTurnOnScreen():true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{506ad58 <*>:com.android.systemui/u0a33} 
<*> <*> <*> Intent { <*> <*> <*> <*> <*> <*> <*> <*> <*> due to <*> <*> <*> <*> <*> <*> <*> <*> 
0x55, 0x0, 0x0, 0x<*> 
0x0, 0x0, 0x0, 0x<*> 
resetPagerState 
<*> <*> <*> 
[RouteService.onStartCommand] 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
ACDB -> <*> <*> <*> 
select_devices: done 
Calling a method in the system process without a qualified user: android.app.ContextImpl.startService:<*> android.content.ContextWrapper.startService:<*> <*> <*> <*> 
handleNotifyWakingUp 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> !CMD_SET_SUSPEND_OPT_ENABLED rt=<*>/<*> <*> <*> 
Handle message: <*> 
AutoCleanReceiveServer:receive action:android.intent.action.SCREEN_ON 
create: <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
main{<*>} PushService.onStartCommand(PushService.java:<*>) Push Service <*> <*> <*> 
disableEffects=null canInterrupt=false once update: false 
WatchThread{<*>} TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> id is <*> <*> <*> <*> <*> 
at com.huawei.ecs.mip.proxy.TcpSocket.onConnectSocket(TcpSocket.java:<*>) 
DialpadFragment mBroadcastReceiver action:android.intent.action.SCREEN_ON 
[LogUploadService.onStartCommand] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
begin 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
activate called handle:<*> enable:<*> 
ambient lux=<*>.<*>,timeStamp =<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
mSimSubId:<*> onDataActivity: direction=<*> 
act:android.intent.action.TIME_TICK flag:<*> FLAG_IS_FIRST_POWER_OFF_ALARM=false android.intent.extra.ALARM_COUNT=<*> 
chinaDateTime:傍晚<*>:<*> 
selectOutput() commonFlags for output <*>, <*> 
<*> <*> <*> <*> <*> 
ACDB -> <*> 
<*> <*> <*> <*> <*> <*> <*> 
begin 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
Animating brightness: target=<*>, rate=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
out_get_latency: Latency <*> 
out_get_latency: Latency <*> 
<*> <*> <*> <*> <*> <*> 
<*> when=<*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
DefaultState !CMD_SCREEN_STATE_CHANGED rt=<*>/<*> <*> <*> 
updateLight --> mIsNotificationExisting: false ledOnMS: <*> ledOffMS :<*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> is not <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> 
out_standby: exit 
setBarState:<*> 
updateNotificationShade 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> = <*> <*> = <*> <*> = <*> 
Handle message: <*> 
collectReceiverComponents, callerApp: <*> <*> <*> receiver size:<*>, flags: <*> 
The tag is null error! 
mTiffStream skip = <*> 
Provider.call: getPrefString 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
msg = <*> received 
applyInPlace=true shouldPeek=false alertAgain=true 
set notification panel padding = <*> 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
wifiSleepPolicy:<*> 
ChargingSpeed Wattage: <*> ST: <*> --> <*> 
handleBatteryUpdate 
onReceive intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
<*> <*> <*> <*> <*> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> --> <*> <*> <*> <*> 
Error reading charge file 
is3GCalling is false,mCdmaSlot is -<*> 
mVSimCurCardType is -<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
dispatch ordered broadcast [background] <*> u0 android.intent.action.LTE_CA_STATE}, has <*> receivers 
getCurrentCellid type type = PHONE_TYPE_GSM 
shouldBlockLocation ret:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleMessage what = <*> 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
handleLteCaStatusChange 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
subId:<*> phoneType:<*> networktype:<*> targetClass:<*> masterLevel:<*> slaveLevel:-<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
onReceive: action = android.intent.action.LTE_CA_STATE 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
Report temperature: [charger_ic] temp :<*> report_threshold:<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
setAlarmsAdjust ... 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
Heartbeat timer.timers{<*>} XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
getTempInfo error: null, <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
Error reading charge file 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
Error reading charge file 
onReceive: action = android.intent.action.LTE_CA_STATE 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
getOrInflateState subId:<*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
ChargingSpeed Wattage: <*> ST: <*> --> <*> 
trim and enqueue <*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Broadcasting intent ACTION_RAC_CHANGED 
isCurrentBySim()=false 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
<*>|setTodayTotalDetailSteps to Prefence todaySendorSteps=<*>##<*>##<*>##<*>##<*>##<*> 
removeNotificationChildren 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
Rac Change (PDC) data: [<*>, <*>] 
mVSimCurCardType is -<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
updateLightsLocked --> level:<*>, status:<*> 
<*> <*> action: <*> 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
Error reading charge file 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
isCurrentBySim()=false 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
ApStaDisabledState what=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
trim and enqueue <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
isCurrentBySim()=false 
Broadcasting intent ACTION_RAC_CHANGED 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
Error reading charge file 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
isCurrentBySim()=false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
WatchThread{<*>} TcpClientThread.disconnectSocket(TcpClientThread.java:<*>) disconnecting to uc.huawei.com:<*> 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
onShowStatusChange show:false 
hideTraffic 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
acquire lock=<*>, flags=0x1, tag="hibernation", name=com.huawei.powergenie, ws=null, uid=<*>, pid=<*> 
handleMessage what = <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
dispatch ordered broadcast [background] <*> u0 android.intent.action.LTE_CA_STATE}, has <*> receivers 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
getImsPhoneId failed. Exception = org.codeaurora.ims.QtiImsException: ImsService is not running 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
processLowerBatteryLevel plugged:false batteryLevel:<*> intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =time_tick 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
formatChinaDateTime equals. 
<*> <*> OK ! 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
hideTraffic 
<*> <*> <*> 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) changed bounds; rebatching 
Report temperature: <*> temp :<*> report_threshold:<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) disconnected 
SND -> {<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
keyAppBroadcastQueueForIntent intent Intent { <*> flg=0x10 (has extras) } on bgkeyapp queue 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
getOrInflateState subId:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
<*> <*> <*> 
[SocketRead_<*>:<*>:<*>-<*>]broadcast(),and mReceivers <*>(android/null:<*>) 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
Error reading charge file 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
action:com.huawei.android.push.intent.SOCKET_INFO, mPermissionType:<*> 
Sending non-protected broadcast <*> from system <*> pkg <*> 
not 3G net type. do nothing. 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) changed bounds; rebatching 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
cancelNotification,index:-<*> 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
at java.io.FileInputStream.open(Native Method) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
Application com.baidu.input_huawei is depended by other app, delay to H! 
begin of formatChinaDateRange <*> 
"workday":[<*>,<*>,<*>,<*>,<*>,<*>], 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
getOrInflateState subId:<*> 
Couldn't create directory for SharedPreferences file /data/user_de/<*>/com.android.settings/shared_prefs/caStatePreferences.xml 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Report temperature: [ap] temp :<*> report_threshold:<*> 
frz ok, pid: [<*>, <*>, <*> 
RefreshBatteryInfo isBatteryLow: <*> 
ACTION_BATTERY_CHANGED pluggedType: <*> 
send_cmd_kernel: cmd=<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
<*> <*> <*> 
getConfigForPhoneId phoneId is invalid 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
processLowerBatteryLevel plugged:false batteryLevel:<*> intent:act:android.intent.action.BATTERY_CHANGED flag:<*> technology=Li-ion icon-small=<*> max_charging_voltage=<*> health=<*> max_charging_current=<*> status=<*> plugged=<*> present=true charge_counter=<*> level=<*> scale=<*> temperature=<*> voltage=<*> invalid_charger=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
begin of formatChinaDateRange <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> uid: <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
set notification panel padding = <*> 
<*> <*> <*> <*> <*> 
at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<*>) 
tcp.conn{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) tcp connection event <*> 
Watch Thread{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is not <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<*> TcpCirChannel.connect(TcpCirChannel.java:<*>) Connect to server address = <*> port = <*> 
[ap] temp_new :<*> temp_old :<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
getOrInflateState subId:<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Error reading charge file 
Error reading charge file 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
csr 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
at java.io.FileInputStream.open(Native Method) 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
BatteryIntent received: android.intent.action.BATTERY_CHANGED 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
isCurrentBySim()=false 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
need to force refresh view 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.open(Native Method) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
getCurrentCellid type type = PHONE_TYPE_GSM 
DisabledState cellid = <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
applyIconTint ignore 
RCV <- {<*> IfaceClass idle <*> <*>} 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.open(Native Method) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
<*>|getTodayTotalSteps <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Error reading charge file 
onStepCounterChange stepsNum:<*> 
No peeking: not in use: <*>|com.huawei.health|<*>|null|<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
isCurrentBySim()=false 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
dispatch ordered broadcast [background] <*> u0 android.intent.action.LTE_CA_STATE}, has <*> receivers 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
<*>|calculateAltitudeWithCache datas.size=<*> 
updateNotificationShade 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
transferRemoteInputFocus: <*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
pool-<*>-thread-<*>{<*>} <*>.doInBackground(TupHelper.java:<*>) <*> <*> <*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
chinaDateTime:傍晚<*>:<*> 
formatChinaDateTime, change to China <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
WatchThread{<*>} TcpCirChannel.connect(TcpCirChannel.java:<*>) Connect to server address = [uc.huawei.com,] port = <*> 
ApStaDisabledState what=<*> 
RefreshBatteryInfo isBatteryLow: <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getImsPhoneId failed. Exception = org.codeaurora.ims.QtiImsException: ImsService is not running 
getTempInfo error: null, <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
applyIconTint ignore 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
at java.io.FileInputStream.open(Native Method) 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> package: com.tencent.mm, visible: false 
sending alarm <*> type <*> when <*> android},repeatInterval = <*>,listenerTag =null 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> mReceivers <*>(android/null:<*>) 
handleTimeUpdate 
Change to single clock mode! 
updateDimmedActivatedHideSensitive overlap:false 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
release:lock=<*>, flg=0x0, <*> name=android", ws=null, uid=<*>, pid=<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
isMusicActive... 
received broadcast android.intent.action.BATTERY_CHANGED 
|CORE| CNE received unexpected action: android.intent.action.BATTERY_CHANGED 
<*> <*> <*> <*> <*> <*> <*> <*> = <*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
Error reading charge file 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
RCV unsolicited event from native daemon, event = <*> IfaceClass active <*> <*> <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
updateDimmedActivatedHideSensitive overlap:false 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
updateTint: tint=<*> 
<*> <*> size is <*> <*> <*> is <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
sending broadcast to Pid = <*>, Uid = <*> 
<*>|before compensate: cache step_<*> 
<*>|calculateAltitudeWithCache datas.size=<*> 
disableEffects=null canInterrupt=false once update: false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> package: com.tencent.mm, <*> <*> 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*> not in <*> <*> 
updateLightsLocked --> mBatteryLight.turnOff 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
getTempInfo error: null, <*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
Launcher.LauncherProvider launcher-restore query - uri:content://com.huawei.android.launcher.settings/badge 
BadgeContentObserver newBadgeNumber:<*>,oldBadgeNumber:<*> mComponentName : ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
queryIntentActivitiesAsUser size results:<*>, for <*> 
No config file found for:/themes/diff/icons 
BadgeContentObserver getBadgeNumber: <*> mComponentName :ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI} 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
stepLightIdleStateLocked: mLightState=<*> 
dispatch ordered broadcast [bgkeyapp] <*> <*> <*> has <*> receivers 
sending alarm <*> type <*> when <*> <*> = <*>,listenerTag =null 
Failed to get <*> 
send: <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
BatteryStatisticsHelper:counts =<*> 
updateNotificationShade 
sendMessage <*> 
send: <*> 
send: <*> 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) <*> <*> <*> 
<title>欢迎登录华为站点 
<*> <*> <*> 
<a href="http://www.huawei.com"> 
font-size: 13px; 
<script language="JavaScript"> 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
shouldBlockLocation ret:false 
c: true, w: false, t: false, l: false 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set mode to <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> cost <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set local private IP is:[<*>.<*>.<*>.<*>] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> <*> <*> <*> <*> 
at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
at java.io.FileInputStream.open(Native Method) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:ReadSdkGroupItem: Succeed in fetching group <*> <*> 
notifyInterfaceClassActivity: client is android.net.ip.IpManager$<*>@4c99c<*> 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
Error reading charge file 
isCurrentBySim()=false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
formatChinaDateTime equals. 
at com.huawei.android.bastet.HwBastet.<init>(HwBastet.java:<*>) 
handleTimeUpdate 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
<*> <*> <*> <*> <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
<*> <*> <*> 
isWiredHeadsetOn... 
CtrlSocket processCtrlSocket pid = <*> cmd = <*> param = <*> ret = <*> 
not in link monitoring mode, ignore TCP result . 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> is <*> 
[ReceiverDispatcher-<*>]send msg to remote srv success(android/null:<*>) 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
at java.io.FileInputStream.open(Native Method) 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkStatsService$<*>@5d6efc 
transferRemoteInputFocus: <*> 
send_cmd_kernel: cmd=<*> 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> 
setRequest ProviderRequest[OFF] 
Watch Thread{<*>} <*> <*> <*> <*> <*> 
<*> <*> <*> : <*> 
action:android.scroff.ctrlsocket.status, mPermissionType:<*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
[ConnectivityManager-<*>]onLost(android/null:<*>) 
<*>|before compensate: cache step_<*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
at com.huawei.ecs.mip.proxy.TcpClientThread.connectSocket(TcpClientThread.java:<*>) 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
isCurrentBySim()=false 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> <*> <*> 
process buffer and get message 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
JIT profile information will not be recorded: profile file does not exits. 
msg = <*> received 
JIT profile information will not be recorded: profile file does not exits. 
cleanUpApplicationRecord -- <*> 
onProcessDied pid = <*>, uid = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> pid: <*>, uid: <*>, <*> <*> <*> <*> <*> <*> <*> 
Releasing suspend blocker "PowerManagerService.Display". 
getTempInfo error: null, <*> 
<*> <*> concurrent mark sweep GC freed <*> AllocSpace objects, <*> LOS objects, <*>% free, <*> <*> <*> <*> <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
getTempInfo error: null, <*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
stopMonitoringMotionLocked() 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
ImsServiceSubHandler : <*> <*> state is UNREGISTERED 
at java.io.FileInputStream.open(Native Method) 
setVoLTECallStatisResult: chrVolteStatisticInfo= mCount=<*>, mAvgValue=<*>, mMaxValue=<*>, mMinValue=<*> 
Enter QmiChr_FetchModemInfo 
<*> <*> : <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
create: <*> 
msg = <*> received 
handle_exception_events enter 
send: <*> 
handle_exception_events enter 
handle_exception_events enter 
send: <*> 
create: <*> 
handle_exception_events enter 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
create: <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Action: BatChange 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> 
msg = <*> received 
Alarm triggering (type <*> or <*>): <*> type <*> when <*> android}] 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
queryIntentActivitiesAsUser size results:<*>, for package:com.huawei.espacev<*> 
msg = <*> received 
hideTraffic 
handleTimeUpdate 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
process buffer and get message 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
<*> <*> <*> <*> <*> <*> 
remove(null) changed bounds; rebatching 
handleMessage(<*>) 
template id:<*> 
begin 
QSEECom_send_cmd return! 
qsc_send_cmd finish 
send data return = <*> 
msg = <*> received 
updateQsState:false 
QSEECom_send_cmd return! 
begin 
updateClipping isOverlap:true 
<*> <*> <*> <*> <*> 
Acquiring suspend blocker "PowerManagerService.Broadcasts". 
AutoStartupDataMgr:retrieveStartupSettings type <*> of com.netease.newsreader.activity is <*> 
DynamicUpdater call updateFolder 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
StartupResidentService:InnerHandler Message:<*> 
updateNotificationShade 
platform_can_split_snd_device: snd_device(<*>) num devices(<*>) new_snd_devices(<*>) 
<*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> <*> <*> = <*> <*> = <*> 
select_devices: done 
<*> <*> OK ! 
action:com.huawei.android.action.launcher_weather_icon_change, mPermissionType:<*> 
Launcher doResumeWork() 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
<*> when=<*> what=<*> target=com.android.internal.util.StateMachine$SmHandler } 
CtrlSocket restoreScrOnStatus 
fddn EVENT_GET_AD_DONE FDN_PS_CHECK:false ,FDN_PRELOAD_CACHE:true 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
<*> <*> <*> running. 
Reading a NULL string not supported here. 
isMonitorCellId mInfos.size() = <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
getTempInfo error: null, <*> 
<*> <*> <*> <*> = true, <*> = false, <*> = <*>, <*> = <*>, delta = <*>, mScrnOffAccTime = <*>, mScrnOnAccTime = <*> 
receive data len = <*> 
InCallActivity - <*> <*> = null 
trim and enqueue <*> <*> <*> <*> <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
act:android.intent.action.TIME_TICK flag:<*> FLAG_IS_FIRST_POWER_OFF_ALARM=false android.intent.extra.ALARM_COUNT=<*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
send data return = <*> 
shouldBlockLocation ret:false 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> subId=<*> retVal=true 
csr 
send data return = <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
mStatsXtProcUid: /proc/net/comm/stats does not exist! 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
updateDimmedActivatedHideSensitive overlap:false 
setRestrictBackgroundLocked(): false 
begin 
RCV <- {<*> <*> <*> <*> 
mStatsXtProcUid: /proc/net/comm/stats does not exist! 
<*> <*> <*> 
SimCardMethod:/getSimCardInfo: imsi is null 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
<*> subId=<*> retVal=true 
release:lock=<*>, flg=0x0, tag="hibernation", name=com.huawei.powergenie", ws=null, uid=<*>, pid=<*> 
NetworkAgent connected 
GetAddrInfoHandler addr: <*> 
<*> <*> <*> OK ! 
StartupResidentService:InnerHandler Message:<*> 
WatchThread{<*>} TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
[ReceiverUtils.resumeLogUpload]resumeSend 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
<*> <*> <*> <*> <*> <*> <*> 
ImsSenderRxr : Tag <*> <*> <*> <*>[SUB0] 
csr 
release:lock=<*>, flg=0x0, tag="eventloop", name=android", ws=null, uid=<*>, pid=<*> 
onDataActivity: direction=<*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
JIT profile information will not be recorded: profile file does not exits. 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
<*> <*> <*> <*> <*> <*> <*> 
onTransact in code is: <*> 
begin 
[main-<*>]action=android.net.conn.CONNECTIVITY_CHANGE(/AutoCheckReceiver.java:<*>) 
CommonMethodUtil:No package name to uid:-<*> 
a.size3, b.size<*> 
receive data len = <*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
[UploadReceiver.onReceive] netType=<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
WatchThread{<*>} TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<*>|after compensate: cache step_<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> cost <*> <*> 
connect :true 
<*>|REPORT : <*> <*> <*> <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
ambient lux=<*>.<*>,timeStamp =<*> 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
process buffer and get message 
process buffer and get message 
cleanUpApplicationRecordLocked, pid: <*>, restart: false 
<*> <*> <*> 
<*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:WriteSdkGroupItem: hash has same <*> 
<*> <*> <*> <*> <*> event x = <*> y = <*> 
resumeTopActivityLocked: <*> <*> <*> <*> <*> 
<*> code = <*> 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
WatchThread{<*>} TcpClientThread.connect(TcpClientThread.java:<*>) will connect to uc.huawei.com:<*> 
<*> BaseBroadcast.sendBroadcast(BaseBroadcast.java:<*>) no receiver for <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) connecting max 30000ms to uc.huawei.com:<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> is [<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:svn_closeAll <*> = <*> 
cancelAutohide 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<*> is not <*> so return <*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
getProcessInfo: failed to find this proc 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
at android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(SQLiteDatabase.java:<*>) 
at com.baidu.location.e.a.a(Unknown) 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
OEMINFO_TPCOLOR_TYPE FAIL! 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
onReceive: action = android.intent.action.LTE_CA_STATE 
isCurrentBySim()=false 
HwSystemManager:HwDebug:false HwModuleDebug:false 
<*> <*> <*> 
Calling a method in the system process without a qualified user: android.app.ContextImpl.startService:<*> android.content.ContextWrapper.startService:<*> <*> <*> <*> 
<*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> type is <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:libcOpenFile <*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
check perfhub service fail! 
moveTaskToTop mTaskChanged:true 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> broadcastIntent}}) changed bounds; rebatching 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> state is not <*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
Provider.call: getPrefString 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> <*> : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
LEAVE_OFFICE_REMINDER schedule 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> => [END] <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:KeySpace : Succeed in fetching group <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: have right to open file due to cur app sec level = <*> is higher than file app(&<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName [anyofficeuserorgcode] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send udp detect packet ok when login,id:[<*>];count:[<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace : getkey <*> not null 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> detect response <*> <*> id is [<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> mode to <*> 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
Launcher.LauncherProvider launcher call - method:setAppBadgeCount arg:null extras:[app_shortcut_custom_id=null][app_shortcut_class_name=com.tencent.mm.ui.LauncherUI][app_badge_count=<*>] uid =<*> pid =<*> 
<*>|after compensate: cache step_<*> 
updateNotificationShade 
mSeekListener onProgressChanged progress:<*> fromUser:false 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
updateSlider2 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
Launcher.LauncherProvider queried count: <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
<*>|after compensate: cache step_<*> 
<*> ActivityRecord{5f12a6a u0 com.tencent.mm/.ui.LauncherUI <*> <*> <*> <*> 
keyAppBroadcastQueueForIntent intent Intent { act=com.tencent.mm.ui.ACTION_ACTIVE flg=0x10 (has extras) } on bgkeyapp queue 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
sending alarm <*> type <*> when <*> com.tencent.mm},repeatInterval = <*>,listenerTag =null 
transferRemoteInputFocus: <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.MAIN flg=0x10840000 cmp=com.android.incallui/.InCallActivity (has extras) } 
<*> connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4GPLUS),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
Invalid profile no. <*>, total profiles <*> only 
<*>|after compensate: cache step_<*> 
disableEffects=null canInterrupt=false once update: false 
applyInPlace=true shouldPeek=false alertAgain=true 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
hideSecSoftInput = false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
<*>|getTodayTotalSteps <*> 
onStepCounterChange stepsNum:<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
showNotificationAll 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
<*>|before compensate: cache step_<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
HoldService:checkBeforeShowDialogWithPid, current <*> <*> <*> 
isCurrentBySim()=false 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
fd received! 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
qsc_start_app end 
receive data len = <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onStepCounterChange stepsNum:<*> 
Calling fingersense_classify_touch() 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
removeNotificationChildren 
updateDimmedActivatedHideSensitive overlap:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
ContentChange for slot: <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
<*>|compensate received 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
updateNotificationShade 
mSeekListener onProgressChanged progress:<*> fromUser:false 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
updateSlider2 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
mSeekListener onProgressChanged progress:<*> fromUser:false 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
transitionTo:mode=<*>, isEmuiStyle=false 
obtain, mHwFlags=<*> 
querySoundEffectsEnabled... 
updateNotificationShade 
isBluetoothScoOn... 
hideSecSoftInput = false 
onProposedRotationChanged, rotation=<*> 
Launcher.LauncherProvider launcher call - method:setAppBadgeCount arg:null extras:[app_shortcut_custom_id=null][app_shortcut_class_name=com.tencent.mm.ui.LauncherUI][app_badge_count=<*>] uid =<*> pid =<*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
action:com.tencent.mm.ui.ACTION_DEACTIVE, mPermissionType:<*> 
transitionTo:mode=<*>, isEmuiStyle=false 
HwDPMS received transaction_isHwFrameworkAdminAllowed, the ret: false 
DynamicUpdater registerReceiver 
<*> <*> <*> = false <*> <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> size is <*> 
Create obj success use class android.app.HwCustNotificationImpl 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
showNotificationAll 
<*> : <*> 
<*> <*> = <*> 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
updateDimmedActivatedHideSensitive overlap:false 
HwPhoneWindowManager has intercept Key : <*>, isdown : false, flags : <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> for <*> 
<*> <*> <*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> 
checkNeedLivenessList:start 
FingerprintDaemonProxyEx::onTransact, code:<*> 
<*> <*> <*> <*> <*> <*> 
begin 
receive data len = <*> 
<*> <*> <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> is <*> 
Reading a NULL string not supported here. 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
<*> <*> <*> 
AwareMem_DMEServer: stop 
<*> <*> <*> <*> <*> 
huawei_common_set_parameters: exit with code(<*>) 
<*> <*> id = <*> <*> <*> <*> <*> 
<*> <*> is not <*> <*> <*> <*> <*> <*> 
writeSummaryFromParcelLocked, IType:<*>, mGsmCsCallTimeLen:<*> 
writeSummaryFromParcelLocked, duration: <*> 
isSimPinSecure mSimDatas is null or empty 
TelecomServiceImpl: isInCall callState is <*>: <*> 
setScrollingEnabled: false 
<*>|rebuild notification 
FingerStat Visible: <*> <*> <*> Switching: false; Bouncer:false; GoingToSleep: <*> Occluded: false; dreaming: false; Authenticated: false 
resetPagerState 
The tag is null error! 
resetCommute 
hideTraffic 
onShowStatusChange show:false 
onShowStatusChange show:false 
<*> <*> <*> <*> 
<*> <*> screen off <*> <*> <*> 
Get no-perm notification callback <*> 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
handleLteCaStatusChange 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
shouldBlockLocation running ... 
shouldBlockLocation running ... 
shouldBlockLocation ret:false 
setTracingEnabled:<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
isCardAbsent slot:<*> slotState:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
<*>|getTodayTotalSteps <*> 
To broadcast an Intent via the notifier to external apps 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onDataActivity: direction=<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
isCurrentBySim()=false 
onShowStatusChange show:false 
Error reading charge file 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateNotificationShade 
updateDimmedActivatedHideSensitive overlap:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCardAbsent slot:<*> slotState:<*> 
getOrInflateState subId:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
action:com.tencent.mm.plugin.report.service.KVCommCrossProcessReceiver, mPermissionType:<*> 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
<*>|compensate <*> <*> 
ApStaDisabledState what=<*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
updateDimmedActivatedHideSensitive overlap:false 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
getOrInflateState subId:<*> 
Rac Change (PDC) data: [<*>, <*>] 
Cache monitor msg as screen_off 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> duration=<*> } transition to: <*> <*> 
chinaDateTime:晚上<*>:<*> 
formatChinaDateTime equals. 
formatChinaDateTime, change to China normalTime:晚上<*>:<*> 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
csr 
<*>|compensate received 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
<*> <*> <*> <*> <*> 
updateDimmedActivatedHideSensitive overlap:false 
there are no wakeup alarms and the screen is off, we can delay what we have so far until the future 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*>|calculateCaloriesWithCache datas.size=<*> 
updateNotificationShade 
showNotificationAll 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_<*>_5G_for_mcc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
dispatch ordered broadcast [bgkeyapp] <*> <*> <*> has <*> receivers 
<*> <*> to hibernation overtime: <*> 
updateClipping isOverlap:false 
applyInPlace=true shouldPeek=false alertAgain=true 
<*> <*> <*> OK ! 
hideTraffic 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
sendMessage <*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
tcp.recv{<*>} TcpClientThread.readSocket(TcpClientThread.java:<*>) <<< ERROR(<*>) >>> socket read length failure -<*> 
transferRemoteInputFocus: <*> 
Handle message: <*> 
<*> <*> <*> <*> <*> <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> <*> to pid: <*> 
To broadcast an Intent via the notifier to external apps 
dispatch ordered broadcast [background] <*> u0 android.intent.action.LTE_CA_STATE}, has <*> receivers 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Enqueueing ordered broadcast[background] <*> u0 android.intent.action.LTE_CA_STATE}: prev had <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateNotificationShade 
at java.io.FileInputStream.open(Native Method) 
not in link monitoring mode, ignore TCP result . 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
<*> <*> com.tencent.mm broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
formatChinaDateTime equals. 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
hideTraffic 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
<*>|onStandStepChanged <*> 
<*>|compensate received 
<*>|compensate received 
onStepCounterChange stepsNum:<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
release:lock=<*>, flg=0x0, tag="WakerLock:<*>", name=com.tencent.mm", ws=null, uid=<*>, pid=<*> 
[pa_<*>] temp_new :<*> temp_old :<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:WriteSdkGroupItem: hash has same <*> 
<*> <*> <*> <*> <*>.<*>.<*>.<*> 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
tcp.conn{<*>} TcpClientThread.connectSocket(TcpClientThread.java:<*>) notify user tcp connected successully at <*> to uc.huawei.com:<*> 
<*>|rebuild notification 
Create obj success use class android.app.HwCustNotificationImpl 
updateNotificationShade 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
<*> XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
wifiSleepPolicy:<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
isMonitorCellId mInfos.size() = <*> 
getNeighboringCellInfo calling app is com.amap.android.ams 
<*>|compensate received 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
transferRemoteInputFocus: <*> 
sending broadcast to Pid = <*>, Uid = <*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
<*>|upLoadOneMinuteDataToEngine time=<*> step=<*> altitude=<*> motion=<*> 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
csr 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
at java.io.FileInputStream.open(Native Method) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateNotificationShade 
sendMessage <*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
EventHub monitor: no key events in the past <*> no motion events in the past <*> 
updateTint: tint=<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
formatChinaDateTime, change to China normalTime:晚上<*>:<*> 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> TcpCirChannel.shutdown(TcpCirChannel.java:<*>) Login_By_Step-> shut down now connect 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
not in link monitoring mode, ignore TCP result . 
BatteryIntent received: android.intent.action.BATTERY_CHANGED 
buckets .....<*> .. <*> .. 5level <*> --> <*> <*> --> <*> <*> --> <*> <*> --> 0bucket <*> --> <*> <*> <*> <*> 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
acquire lock=<*>, flags=0x1, tag="WakerLock:<*>", name=com.tencent.mm, ws=null, uid=<*>, pid=<*> 
notifyInterfaceClassActivity: client is com.android.server.net.NetworkPolicyManagerService$<*>@4df0feb 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
onStepCounterChange stepsNum:<*> 
mThermalService is NULL! 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Watch Thread{<*>} LoginC.doWatch(LoginC.java:<*>) Login_By_Step-> watch count = <*> 
showNotificationAll 
sending broadcast to Pid = <*>, Uid = <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
updateDimmedActivatedHideSensitive overlap:false 
<*> <*> <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
hideTraffic 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
not 3G net type. do nothing. 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) changed bounds; rebatching 
<*>|getTodayTotalSteps <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCurrentBySim()=false 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
removeNotificationChildren 
hideTraffic 
onShowStatusChange show:false 
shouldBlockLocation ret:false 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
proxy app:com.tencent.mm,uid:<*>,result:true 
updateNotificationShade 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rac Change (PDC) data: [<*>, <*>] 
isMusicActive... 
mIsScreenOn is: false, WAKEUP alarm trigger action = <*> package name is: <*> 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
onReceive, action:android.intent.action.BATTERY_CHANGED 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
mVSimCurCardType is -<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
action:android.intent.action.SIG_STR, mPermissionType:<*> 
<*>|REPORT : <*> <*> <*> <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
at java.io.FileInputStream.open(Native Method) 
dispatch ordered broadcast [foreground] <*> u-<*> android.intent.action.TIME_TICK}, has <*> receivers 
<*> <*> to hibernation overtime: <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
Enqueueing ordered broadcast[bgkeyapp] <*> <*> <*> prev had <*> 
collectReceiverComponents, callerApp: null, <*> receiver size:<*>, flags: <*> 
new ScenarioAction sPoolSize: <*> 
formatChinaDateTime equals. 
Application com.baidu.input_huawei is depended by other app, delay to H! 
<*> <*> <*> <*> package: com.tencent.mm, pid: <*> 
Failure getting entry for 0xffffffff (t=<*> e=<*>) (error <*>) 
mDateString is: <*>月<*>日星期日 
<*>|compensate received 
notifyInterfaceClassActivity: client is com.android.server.ethernet.EthernetNetworkFactory$InterfaceObserver@fccfd<*> 
sending broadcast to Pid = <*>, Uid = <*> 
sendMessage <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
buckets .....<*> .. <*> .. 5level <*> --> <*> <*> --> <*> <*> --> <*> <*> --> 0bucket <*> --> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
keyAppBroadcastQueueForIntent intent Intent { <*> <*> (has extras) } on bgkeyapp queue 
dispatch ordered broadcast [bgkeyapp] <*> <*> <*> has <*> receivers 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
WatchThread{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown output: java.net.SocketException: Socket is not <*> 
<*> <*> <*> <*> 
handleTimeUpdate 
getUidWakeLock uid: <*> wakelock(minutes): <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
<*>|REPORT : <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
transferRemoteInputFocus: <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
pool-<*>-thread-<*>{<*>} BaseBroadcast.sendBroadcast(BaseBroadcast.java:<*>) no receiver for action#com.huawei.espace.service.setstatus 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
Broadcasting intent ACTION_RAC_CHANGED 
InputDispatcher::monitor frozen check! 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
m1: false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*>|getTodayTotalSteps <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
Create obj success use class android.app.HwCustNotificationImpl 
msg.recv{<*>} TcpClientThread.onRecv(TcpClientThread.java:<*>) TCP Msg 659TCP_OK 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|onStandStepChanged <*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@af<*> 
sending broadcast to Pid = <*>, Uid = <*> 
handleANRFilterFIFO,uid = 10105cmd = <*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
updateIsPoweredLocked: wasPowered=false, mIsPowered=false, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
Error reading charge file 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_4g 
isCurrentBySim()=false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop... 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|compensate <*> <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
action:com.qualcomm.intent.action.ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW, mPermissionType:<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
Broadcasting intent ACTION_RAC_CHANGED 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
action:com.huawei.android.intent.action.RAC_CHANGED, mPermissionType:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
Rac Change (PDC) data: [<*>, <*>] 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:LTE isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
sending broadcast to Pid = <*>, Uid = <*> 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
onSignal: mSubId=<*>,currDataSubID=<*> 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
received cell-signal:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
|CORE| CNE received unexpected action: android.intent.action.BATTERY_CHANGED 
<*>|rebuild notification 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
action:android.intent.action.LTE_CA_STATE, mPermissionType:<*> 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
need to force refresh view 
Create obj success use class com.android.settings.deviceinfo.HwCustStatusImpl 
updateDimmedActivatedHideSensitive overlap:false 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_customized_networkType_entry 
mVSimCurCardType is -<*> 
mVSimCurCardType is -<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Releasing suspend blocker "PowerManagerService.WakeLocks". 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
<*>|REPORT : <*> <*> <*> <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
sendMessage <*> 
handleLteCaStatusChange 
need to force refresh view 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Error reading charge file 
at com.android.server.usb.UsbDeviceManager$<*>.onUEvent(UsbDeviceManager.java:<*>) 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Tethering@ff4a50f 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
getOrInflateState subId:<*> 
at android.os.UEventObserver$UEventThread.sendEvent(UEventObserver.java:<*>) 
collectReceiverComponents, callerApp: ProcessRecord{24cdca7 <*>:com.android.phone/<*>}, intent:android.intent.action.LTE_CA_STATE, receiver size:<*>, flags: <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{24cdca7 <*>:com.android.phone/<*>} 
handleLteCaStatusChange 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Rac Change (PDC) data: [<*>, <*>] 
Create obj success use class android.app.HwCustNotificationImpl 
at java.io.FileInputStream.open(Native Method) 
updateClipping isOverlap:false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
is3GCalling is false,mCdmaSlot is -<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
getOrInflateState subId:<*> 
getOrInflateState subId:<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<*>) 
at com.huawei.ecs.mip.proxy.TcpClientThread.onLoop(TcpClientThread.java:<*>) 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isCardAbsent slot:<*> slotState:<*> 
isCurrentBySim()=false 
getOrInflateState subId:<*> 
Broadcasting intent ACTION_RAC_CHANGED 
m1: false 
removeNotificationChildren 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
isCurrentBySim()=false 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onUEvent fcpStatus = <*>,scpStatus =<*>,ovpStatus=<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
updateNotificationShade 
at android.os.UEventObserver$UEventThread.run(UEventObserver.java:<*>) 
at java.io.FileInputStream.open(Native Method) 
isCurrentBySim()=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|compensate received 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|after compensate: cache step_<*> 
Acquiring suspend blocker "PowerManagerService.WakeLocks". 
action:qualcomm.intent.action.ACTION_RAC_CHANGED, mPermissionType:<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
Error reading charge file 
formatChinaDateTime equals. 
poll before: g_monitor_fd =<*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
notifyInterfaceClassActivity: client is com.android.server.connectivity.Vpn$<*>@e40aefb 
<*>|getTodayTotalSteps <*> 
<*>|calculateAltitudeWithCache totalAltitude=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*> <*> <*> <*> <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
set notification panel padding = <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
Oem ID in QCRILHOOK UNSOL RESP is QOEMHOOK 
getTempInfo error: null, <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4GPLUS isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{4ff57fc <*>:com.qualcomm.qcrilmsgtunnel/<*>} 
at android.os.FileUtils.readTextFile(FileUtils.java:<*>) 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_show_lte 
<*>|compensate received 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
Enqueueing ordered broadcast[background] <*> <*> <*> prev had <*> 
Application com.baidu.input_huawei is depended by other app, delay to H! 
act:android.intent.action.TIME_TICK flag:<*> FLAG_IS_FIRST_POWER_OFF_ALARM=false android.intent.extra.ALARM_COUNT=<*> 
begin of formatChinaDateRange chinaDate:晚上<*>:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
updateClipping isOverlap:false 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> PendingIntentRecord{3c38496 android broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
acquire lock=<*>, flags=0x1, tag="eventloop", name=android, ws=null, uid=<*>, pid=<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
<*>|REPORT : <*> <*> <*> <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
showNotificationAll 
received cell-signal:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
java.io.FileNotFoundException: sys/class/hw_power/charger/charge_data/water_intrused (No such file or directory) 
<*> took <*> ms 
Error reading charge file 
RCV unsolicited event from native daemon, event = <*> IfaceClass idle <*> <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
isMonitorCellId mInfos.size() = <*> 
cellid has changed 
shouldBlockLocation ret:false 
c: true, w: false, t: false, l: false 
interpolate:mPosBrightness=<*>.0lux=<*>.<*>,mIsReboot=true,mIsUserChange=false,mDelta=<*>.<*> 
qsc_send_cmd finish 
<*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> 
Apply window without WALLPAPER 
<*> <*> <*> <*> <*> 
setKeyguardViewState: false-false 
<*> <*> <*> <*> <*> 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
Acquiring suspend blocker "PowerManagerService.Broadcasts". 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{506ad58 <*>:com.android.systemui/u0a33} 
DynamicUpdater registerReceiver 
Create obj success use class android.app.HwCustNotificationImpl 
huawei_cust_get_parameters: returns 
acquire lock=<*>, flags=0x1, tag="hibernation", name=com.huawei.powergenie, ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
Handle message: <*> 
StartupResidentService:InnerHandler Message:<*> 
onStartedWakingUp 
ACDB -> <*> 
<*> <*> <*> <*> = false 
<*> <*> <*> <*> 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
getTempInfo error: null, <*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*>|compensate received 
mStatsXtProcUid: /proc/net/comm/stats does not exist! 
action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:<*> 
<*> ok, pid: [<*>, <*>, <*> 
proxyBroadcast:[com.huawei.espacev2] proxy:false 
removeFreezeProcess pkg:com.huawei.espacev<*> 
<*> <*> OK ! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:libcOpenFile <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) changed bounds; rebatching 
updateTint: tint=<*> 
[LoginActivity.isLoggedIn]isLoggedIn:true 
notifyInterfaceClassActivity: client is android.net.INetworkManagementEventObserver$Stub$Proxy@c0acf8b 
applyInPlace=true shouldPeek=false alertAgain=true 
<*> <*> <*> <*> 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
NormalTraffic:update notification type = -<*> 
DialpadFragment mBroadcastReceiver action:android.intent.action.SCREEN_ON 
ImsServiceSub : broadcastVopsSsacIntent Vops = true , Ssac = false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> = <*>-<*>-<*> <*>:<*>:<*> <*> = <*>-<*>-<*> <*>:<*>:<*> 
CommonMethodUtil:No package name to uid:-<*> 
updateDimmedActivatedHideSensitive overlap:false 
shouldBlockLocation running ... 
mSimSubId:<*> onDataActivity: direction=<*> 
<*> <*> <*> <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*> 
<*> <*> <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
[RouteService.onStartCommand] 
at com.baidu.location.g.a.b(Unknown) 
at com.baidu.location.g.a.b(Unknown) 
qsc_send_cmd finish 
wait_finger_up FPC_LIB_FINGER_LOST 
GetAddrInfoHandler addr: <*> {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
onTransact in code is: <*> 
Change to single clock mode! 
<*> <*> <*> <*> <*> 
HandlePowerStatistic:handleTotalControl 
HandlePowerStatistic:notifyPkgList1=[] 
<*>|getTodayTotalSteps <*> 
<*>|rebuild notification 
updateTint: tint=<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Set local private IP is:[<*>.<*>.<*>.<*>] 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
WeatherDynamicUpdater update before : mDrawingData[<*>] = <*> <*>, <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
MyOrientationListener: updateRotation. 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> 
@@@@@@@@@@@@ uid :<*> download :true 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FileSec: write app bundle id = &<*>ߢ[ 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> is [<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:libcSeekFile => <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace : getkey <*> not null 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [END] 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => [START],Mode[r] 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:KeySpace : getkey <*> <*> 
<*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Switch tunnel mode to <*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateClipping isOverlap:false 
icon : <*> found in app 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onProposedRotationChanged, rotation=<*> 
<*>|compensate received 
<*>|compensate <*> <*> 
<*> <*> <*> <*> <*>,<*>-<*>,<*> #7f14004e app:id/msim_status_bar_operators_card_one_id} 
[<*>] Mms_conv 
release:lock=<*>, flg=0x0, tag="*launch*", name=android", ws=WorkSource{<*>}, uid=<*>, pid=<*> 
updateNotificationShade 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
cancelNotificationWithTag pid <*>,uid = <*>,tag = null,pkg <*> <*> 
<*> <*> <*> <*> <*> Intent { <*> <*> <*> 
<*> device policy manager service. 
updateNotificationShade 
postEventFromNative: msg=<*>,arg1=<*>,arg2=<*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
updateTint: tint=<*> 
<*>|compensate received 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> : <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
acquire lock=<*>, flags=0x1, tag="*launch*", name=android, ws=WorkSource{<*>}, uid=<*>, pid=<*> 
resumeTopActivityLocked: <*> <*> need to <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> = true 
removeNotificationChildren 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> is <*> 
action:action.huawei.PHONE_AUDIO_MODE, mPermissionType:<*> 
<*> <*> <*> <*> found in <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
Returning system default Launcher 
<*> stream <*>, <*> <*> <*> <*> <*> <*> 
InCallPresenter - onCallListChange callList=com.android.incallui.CallList@86c7f<*> 
InCallPresenter - <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
getOutput() device <*>, stream <*>, samplingRate <*>, format <*>, channelMask <*>, flags <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> = true 
<*> <*> <*> <*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
StatusBarNotifier - <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
mVSimCurCardType is -<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> is null 
adev_set_parameters: enter: <*> 
readRilMessage: Buffer = [B@204bb9f HexData = <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> alarm OK ! 
action:action.huawei.PHONE_AUDIO_MODE, mPermissionType:<*> 
<*> <*> <*> is false 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> is: <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=true, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> com.android.phone broadcastIntent}}) changed bounds; rebatching 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
updateNotificationShade 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
readRilMessage: Buffer = [B@204bb9f HexData = [010000000404000012000000514f454d484f4f4b1d04080002000000ffff] 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> children:[], parent:null, conferenceable:[], videoState:Audio Only, mSessionModificationState:<*>, VideoSettings:(CameraDir:<*>)] 
<*> <*> <*> home data home 中国移动 中国移动 <*> 中国移动 中国移动 <*> <*> <*> <*> not supported <*> <*> RoamInd=<*> DefRoamInd=<*> EmergOnly=false IsDataRoamingFromRegistration=false 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> <*> 
show_incallscreen <*> 
ImsServiceSub : StatusForAccessTech networkMode = <*> registered = <*> status = <*> restrictCause = <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:isUnderControll third party not in whitelist: <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
<*>|getTodayTotalSteps <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
begin 
qsc_send_cmd finish 
begin 
begin 
mIsNetworkSpeedEnabled = false, mIsAirplaneMode = false, <*> = false, <*> = true, <*> = false, <*> = true, <*> = false 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
Start proc <*> <*> <*> <*> 
fddn EVENT_GET_AD_DONE FDN_PS_CHECK:false ,FDN_PRELOAD_CACHE:true 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
cancelNotification,index:-<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
t:false, fl: false, p: <*>, ce: true, we: false 
NatTrafficNotifyService:delta byte = <*> no traffic delta = 0Traffic state is <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
updateLightsLocked,turn off notificationLight 
StartupResidentService:InnerHandler Message:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation running ... 
action: ACTION_SERVICE_STATE_CHANGED 
<*> <*> <*> <*> <*> <*> 
<*> <*> size is <*> <*> 
Get no-perm notification callback <*> 
AppLogManager onCreate 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:svn_closeAll <*> 
<*>|getTodayTotalSteps <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
onStepCounterChange stepsNum:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
removeNotificationChildren 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> is <*> <*> <*> <*> <*> = <*>.<*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> 
dispatch ordered broadcast [foreground] <*> <*> <*> has <*> receivers 
qsc_send_cmd finish 
KGSvcFp onAuthenticationError.<*> 
stopFilter m_filterIsStarted:false 
Reading a NULL string not supported here. 
InCallActivity - <*> <*> <*> <*> <*> 
<*>|onStandStepChanged <*> 
<*> <*> android broadcastIntent}}) changed bounds; rebatching 
<*>|after compensate: cache step_<*> 
removeNotificationChildren 
updateClipping isOverlap:false 
onStepCounterChange stepsNum:<*> 
transferRemoteInputFocus: <*> 
ambient lux=<*>.<*>,timeStamp =<*> 
earliestValidTime + POWER_ON_DARKENING_LIGHT_DEBOUNCE 
<*> <*> <*> <*> 
Final value: x_offset=<*>.<*>, y_offset=<*>.<*>, z_offset=<*>.<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to ip address uc.huawei.com/<*>.<*>.<*>.<*> 
pa2240-proximity calling driver setDelay <*> ms 
<*>|getTodayTotalSteps <*> 
bh1745-light calling driver <*> 
StatusBarNotifier - <*> = false 
InCallPresenter - <*> state = <*> 
<*> <*> Connect to <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*>.<*>.<*>.<*> 
removeNotificationChildren 
<*> <*> <*> <*> <*> 
begin 
<*> <*> <*> 
qsc_decode end 
PFW.HwPFWService:handle PFW_MSG_SYSTEM 
KGSvcFp onAuthenticationAcquired.<*> 
begin 
<*> <*> <*> <*> <*> <*> 
I/LocTech-Label :: OSOBSERVER :: Data Items In 
overlapAmount:<*>.<*>, previousNotificationEnd:<*>.<*>, newYTranslation:<*>.<*>, location:<*>, i:<*>, getTopPadding:<*>.<*>, getLocationOnScreen():-<*> 
<*> <*> <*> 
stopSelfIfIdle: STOP! 
Cache monitor msg as screen_off 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
updateDimmedActivatedHideSensitive overlap:true 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
receive data len = <*> 
<*> <*> rt=<*>/<*> <*> <*> 
KGSvcCall onScreenTurningOn. 
LightSensor, enable, <*>: flags=<*> 
<*> <*> <*> <*> = <*> 
cancelNotificationLocked:<*>|com.android.incallui|<*>|null|<*> 
updateLightsLocked,mInCall <*> = true,ledNotification == null?true 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateCallLayout:isBackground=false, isInteractive=true 
onEntryRemovedInternal:<*>|com.android.incallui|<*>|null|<*>, group=<*>|com.android.incallui|<*>|null|<*> 
getCurrentCellid PHONE_TYPE_GSM cellidString = <*> 
disableGps:false isEnabled()=true 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
onStepCounterChange stepsNum:<*> 
<*>|rebuild notification 
<*> <*> <*> 
I/LocTech-Value :: Data <*> <*> <*> <*> 
left handleScrnOnOffTimeStats, mScrnOffAccTime = <*>, mScrnOffAccTime = <*>, mScrnOnAccTime = <*> 
onScreenTurnedOn() 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
StatusBarNotifier - <*> <*> <*> <*> 
imeVis=false 
bh1745-light calling driver <*> 
<*> <*> = true 
Releasing suspend blocker "PowerManagerService.Display". 
Final value: x_offset=<*>.<*>, y_offset=<*>.<*>, z_offset=<*>.<*> 
batch:sensor(android.sensor.accelerometer) sample_rate=<*>.000000Hz report_rate_f=<*>.000000Hz curr sample rate:<*>.<*> cur rpt rate:<*> max:<*>.<*> min:<*>.<*> 
<*>|getTodayTotalSteps <*> 
AwareMem_DMEServer: stop 
generateAddAnimation:null, false 
updateLight --> mIsNotificationExisting: false ledOnMS: <*> ledOffMS :<*> 
adev_set_parameters: exit with code(<*>) 
<*> <*> <*> <*> 
begin 
begin 
TafficState:default sub id = 0slotIndex = <*> subscriptionId = <*> 
Get no-perm notification callback android.intent.action.SCREEN_OFF 
transferRemoteInputFocus: <*> 
MagicLink2-BroadcastReceiver:====>ACTION_SCREEN_OFF 
at com.huawei.ecs.mip.proxy.TcpClientThread.onLoop(TcpClientThread.java:<*>) 
<*>|before compensate: cache step_<*> 
<*> <*> is <*> <*> <*> <*> <*> = <*>.<*> 
qsc_send_cmd finish 
<*> <*> is not <*> 
receive data len = <*> 
<*> <*> <*> 
turn off notificationLight due to incall or screenon 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO], children:[], parent:null, conferenceable:[], videoState:Audio Only, mSessionModificationState:<*>, VideoSettings:(CameraDir:<*>)] 
------------startInput-------------- 
updateClipping isOverlap:true 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
huawei_audio huawei_choose_HandsFree_device_incall_forHWtest: test Type =<*> 
platform_set_parameters: enter: - <*> 
<*> ActivityRecord{b46dc67 u0 com.android.incallui/.InCallActivity <*> <*> <*> 
WindowOrientationListener enabled 
updateClipping isOverlap:false 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
getNextIndex: <*>; from <*> to <*>; size: <*> 
<*> - <*> <*> <*> <*> <*> <*> <*> <*> <*> CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO], children:[], parent:null, conferenceable:[], videoState:Audio Only, <*> <*> <*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
DisplayPowerState Updating <*> <*> <*> <*> 
updateSlider1 seekBarProgress:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> - <*> 
LeisureTrafficSetting:result is empty 
ExtraTrafficSetting:result is empty 
No peeking: unimportant notification: <*> 
onNotificationExpansionChanged called 
setOverlap mOverlap:true, mDimmed:false 
Background partial concurrent mark sweep GC freed <*> AllocSpace objects, <*> LOS objects, <*>% free, <*> <*> <*> <*> <*> 
Split enqueueing broadcast <*> <*> 
<*>|compensate <*> <*> 
send data return = <*> 
<*> <*> <*> <*> 
qsc_send_cmd finish 
huawei_cust_set_parameters: exit with code(<*>) 
adev_set_parameters: exit with code(<*>) 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
create: <*> 
<*> <*> <*> <*> 
<*>|getTodayTotalSteps <*> 
received cell-signal:<*> 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
<*>|compensate <*> <*> 
<*>|getTodayTotalSteps <*> 
updateNotificationShade 
removeNotificationChildren 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
action:qualcomm.intent.action.ACTION_AUDIO_STATE_CHANGED, mPermissionType:<*> 
Transact:getHwAdminCachedValue to device policy manager service. 
<*> <*> <*> <*> <*> <*> <*> 
huawei_audio huawei_choose_Handset_device_incall_forHWtest: test Type =<*> 
huawei_cust_set_parameters: exit with code(<*>) 
disableEffects=null canInterrupt=false once update: false 
<*> <*> <*> is <*>: <*> 
VideoCallFragment - <*> 
<*> <*> <*> is false 
removeNotificationChildren 
transferRemoteInputFocus: <*> 
<*>|getTodayTotalSteps <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
isMusicActive... 
<*>|onStandStepChanged <*> 
<*>|REPORT : <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*> <*> <*> duration=<*> } transition to: <*> <*> 
rtt=<*>,tcp_tx_pkts=<*>,tcp_rx_pkts=<*> 
ignore <*> <*> <*> <*> <*> time:<*> 
<*>|compensate received 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
<*>|after compensate: cache step_<*> 
applyInPlace=true shouldPeek=false alertAgain=true 
<*>|getTodayTotalSteps <*> 
<*>|rebuild notification 
Caller checkPermission fail 
Destroying surface <*> called by com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> com.android.server.wm.WindowState.removeLocked:<*> com.android.server.wm.WindowManagerService.removeWindowInnerLocked:<*> com.android.server.wm.WindowManagerService.removeWindowInnerLocked:<*> com.android.server.wm.WindowManagerService.removeWindowLocked:<*> com.android.server.wm.WindowManagerService.removeWindowLocked:<*> com.android.server.wm.WindowManagerService.removeWindow:<*> 
<*> <*> <*> <*> <*> not supported <*> 
notifyStartedWakingUp 
onError <*> 
qsc_send_cmd finish 
mode change : <*> 
send data return = <*> 
CtrlSocket restoreScrOnStatus <*> 
updateLightsLocked --> mBatteryLight.turnOff 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> <*> <*> <*> 
InCallPresenter - <*> 
Unfinished business... 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
shouldBlockLocation ret:false 
collapsePanel:false 
VideoCallPresenter - <*> <*> <*> <*> <*> <*> <*> <*> <*> CAPABILITY_MUTE CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO], children:[], parent:null, conferenceable:[], videoState:Audio Only, <*> <*> <*> 
mode change : <*> 
ContentChange for slot: <*> 
cancelAutohide 
removeNotificationViews:<*>|com.android.incallui|<*>|null|<*> 
APS brightness=<*>.<*>,ConvertToPercentage=NaN 
<*> <*> to fs_data 
batch,<*>,handle <*>, timeout:<*> ,period_ns:<*> 
0x55, 0x0, 0x0, 0x<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
updateTint: tint=<*> 
worker idle 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
begin 
qsc_send_cmd finish 
ExtraTrafficSetting:result is empty 
qsc_decode end 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
simCount:<*> phoneState:<*> 
<*> <*> <*> = <*> 
handle_exception_events enter 
process buffer and get message 
transferRemoteInputFocus: <*> 
Change to single clock mode! 
AwareMem_DMEServer: stop 
<*> <*> = true 
PFW.HwPFWService:mBroadcastReceiver action = <*> 
<*> <*> = <*>-<*>-<*> <*>:<*>:<*> <*> = <*>-<*>-<*> <*>:<*>:<*> 
<*> read from <*> <*> 
<*> <*> <*> <*> <*> 
sendMessage <*> 
cancelAutohide 
notifyUiVisibilityChanged:vis=0xc0000700, SystemUiVisibility=0xc<*> 
Setting mDismissKeyguard true by win Window{e6a6b5e u0 com.android.incallui/com.android.incallui.InCallActivity} 
handleNotifyScreenTurningOn 
onScreenTurningOn 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x11,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
updateLightsLocked,turn off notificationLight 
batch,<*>,handle <*>, timeout:<*> ,period_ns:<*> 
StatusBarNotifier - <*> <*> <*> 
ProximitySensor - <*> <*> <*> <*> <*> <*> 
updateLightsLocked,turn off notificationLight 
InCallActivity - <*> <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
summary = null 
AwareMem_EventTracker: [APP_ACTIVITY_FINISH_<*>] is abandoned for memory <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
ProximitySensor - Proximity wake lock already acquired 
Display ready! 
<*>|compensate received 
read from oem info: data_readback 
<*> <*> <*> <*> 
<*> <*> <*> <*> 
enqueueNotificationInternal: n.getKey = <*> 
DisabledState cellid = <*> 
enter addToIdleMessage(type:<*>), mainloop is busy, add to idleMessage 
begin 
worker idle 
qsc_decode end 
onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it 
<*> <*> <*> 
KGSvcFp onAuthenticationAcquired.<*> 
isCloneProcess = false 
MemoryRecoveryDMEPlugin: <*> <*> <*> <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Change to single clock mode! 
acquire lock=<*>, flags=0x1, <*> name=android, ws=null, uid=<*>, pid=<*> 
get_spk_pa_type: pa is max<*> 
duration: <*> <*> <*> <*> (<*> * <*> * <*> * <*> <*> <*> <*> <*> (<*> * <*> * <*> * <*>) day 
I/LocTech-Label :: OSOBSERVER :: Data Items In 
<*> <*> <*> = <*> <*> = <*> <*> = <*> 
Dis-Feature : <*> 
<*> <*> <*> <*> <*> 
KGSvcCall onScreenTurningOn. 
send data return = <*> 
DisplayPowerState Updating screen state: state=ON, backlight=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
removeNotification:<*>|com.android.incallui|<*>|null|<*> 
Animating brightness: target=<*>, rate=<*> 
flush,<*> handle <*> 
isLockScreenDisabled HwKeyguardManagerImpl result = false 
CtrlSocket Receiver,disable: false locked: <*> <*> <*> mSmartKeyguardLevel: normal_level mStartPowerSaving: <*> 
KGSvcCall onScreenTurnedOn. 
flush:sensor(android.sensor.step_counter) handle:<*> 
<*> <*> <*> <*> 
shouldBlockLocation running ... 
write <*> failed 
<*>|before compensate: cache step_<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> took <*> ms 
receive data len = <*> 
receive data len = <*> 
QSEECom_send_cmd return! 
begin 
QSEECom_send_cmd return! 
send data return = <*> 
qsc_send_cmd finish 
begin 
huawei_audio huawei_choose_HandsFree_device_incall_forHWtest: test Type =<*> 
<*> <*> <*> <*> 
audio_extn_set_anc_parameters: anc_enabled:<*> 
<*> <*> <*> <*> 
begin 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
collectReceiverComponents, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, <*> receiver size:<*>, flags: <*> 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
getOrInflateState subId:<*> 
Call: getSubId <*> is <*>: <*> 
receive data len = <*> 
InCallPresenter - onCallListChange <*> <*> <*> 
receive data len = <*> 
<*> <*> <*> <*> <*> 
begin 
<*> <*> <*> <*> ws=null, uid=<*>, pid=<*> 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> = true 
begin 
VideoCallPresenter - <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
begin 
cause :<*> 
<*> <*> <*> 
updateLightsLocked,turn off notificationLight 
<*> <*> <*> 
<*> = false, <*> = true, <*> = true, <*> = true, <*> = <*> 
<*> <*> <*> <*> <*> <*> <*> 
send data return = <*> 
begin 
begin 
qsc_send_cmd finish 
receive data len = <*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
huawei_cust_set_parameters: exit with code(<*>) 
platform_set_parameters: exit with code(<*>) 
huawei_audio huawei_choose_Handset_device_incall_forHWtest: test Type =<*> 
<*> output <*>, stream <*>, <*> <*> 
audio_extn_fbsp_set_parameters: Speaker protection disabled 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> : <*> 
action:qualcomm.intent.action.ACTION_AUDIO_STATE_CHANGED, mPermissionType:<*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> 
<*> <*> : <*> 
ACDB -> <*> 
ACDB -> <*> 
applyIconTint ignore 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
receive data len = <*> 
begin 
send data return = <*> 
receive data len = <*> 
qsc_decode end 
receive data len = <*> 
QSEECom_send_cmd return! 
receive data len = <*> 
<*> <*> <*> 
Pid:<*> deleteTrackName(<*>) 
huawei_audio huawei_choose_HandsFree_device_incall_forHWtest: test Type =<*> 
disable_audio_route: exit 
fddn EVENT_GET_AD_DONE FDN_PS_CHECK:false ,FDN_PRELOAD_CACHE:true 
[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*> 
<*> <*> <*> <*> <*> <*> 
platform_get_native_support:napb: ui Prop enabled(<*>) version(<*>) 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> type <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
Rcvd UNSOL response with <*> bytes data for SUB<*> 
<*> <*> <*> = <*>, <*> = false, <*> = <*>, <*> = false 
received broadcast <*> 
<*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> = <*>, <*> = false, <*> = false 
Received Broadcast Intent ACTION_UNSOL_RESPONSE_OEM_HOOK_RAW 
shouldBlockLocation running ... 
4G, isCAState=false 
getOrInflateState subId:<*> 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
msg.recv{<*>} XmlMsg.decodeBuf(XmlMsg.java:<*>) RECV <*> bytes <*> <*> 
VideoCallPresenter - <*> <*> <*> <*> 
onForegroundActivitiesChanged pid = <*>, uid = <*> 
qsc_send_cmd finish 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> #7f1403e3 app:id/speed} 
updateBluetooth:::setBluetoothBatteryEnable false. 
<*> <*> <*> <*> <*> <*> 
state = <*> 
<*> <*> <*> <*> <*> <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
AppAutoStartupPolicy:prevent start receiver of package com.netease.newsreader.activity for action android.net.conn.CONNECTIVITY_CHANGE 
AppAutoStartupPolicy:prevent start receiver of package <*> for action android.net.conn.CONNECTIVITY_CHANGE 
AutoStartupDataMgr:retrieveStartupSettings type <*> of com.netease.newsreader.activity is <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of com.netease.newsreader.activity is <*> 
AutoStartupDataMgr:retrieveStartupSettings type <*> of <*> is <*> 
isCardAbsent slot:<*> slotState:<*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
<*>|compensate received 
<*>|compensate received 
<*>|compensate <*> <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
<*> <*> <*> 
qsc_send_cmd finish 
receive data len = <*> 
qsc_decode end 
send data return = <*> 
search 
<*> <*> <*> 
release:lock=<*>, flg=0x0, tag="*launch*", name=android", ws=WorkSource{<*>}, uid=<*>, pid=<*> 
qsc_decode end 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=true 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
qsc_send_cmd finish 
begin 
receive data len = <*> 
retrieveServiceLocked, callerApp: ProcessRecord{34bf34f <*>:system/<*>}, flags: <*> 
0xc0, 0x2a, 0x7c, 0x3f 
read from oem info: x_offset=<*>.<*>, y_offset=<*>.<*>, z_offset=<*>.<*> 
QSEECom_send_cmd return! 
[ConnectivityChangeReceiver.onReceive]Start! 
AwareMem_EventTracker: [POLLING_TIMEOUT_<*>] is abandoned for <*> <*> <*> 
[ReceiverUtils.resumeLogUpload] 
begin 
receive data len = <*> 
Calling a method in the system process without a qualified user: android.app.ContextImpl.startService:<*> android.content.ContextWrapper.startService:<*> <*> <*> <*> 
send data return = <*> 
[IssueCreationService.startSocketServerThread] 
<*> <*> = true, <*> = <*>, <*> = <*>, <*> = <*> 
upload<*> 
begin 
begin 
Create obj success use class <*> 
ExtraTrafficSetting:result is empty 
qsc_decode end 
qsc_send_cmd finish 
qsc_decode end 
qsc_decode end 
begin 
StartupResidentService:InnerHandler Message:<*> 
receive data len = <*> 
qsc_send_cmd finish 
receive data len = <*> 
begin 
begin 
[SdcardManager.isMounted]Path:/storage/emulated/<*> 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
receive data len = <*> 
qsc_send_cmd finish 
send data return = <*> 
qsc_decode end 
begin 
qsc_decode end 
send data return = <*> 
receive data len = <*> 
begin 
<*> not in <*> <*> 
CloudRecordGetCfgInfoRspNotify leave 
qsc_decode end 
begin 
<*>|after compensate: cache step_<*> 
receive data len = <*> 
QSEECom_send_cmd return! 
qsc_decode end 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
receive data len = <*> 
receive data len = <*> 
send data return = <*> 
begin 
QSEECom_send_cmd return! 
begin 
receive data len = <*> 
QSEECom_send_cmd return! 
send data return = <*> 
send data return = <*> 
qsc_decode end 
begin 
send data return = <*> 
qsc_send_cmd finish 
QSEECom_send_cmd return! 
qsc_decode end 
receive data len = <*> 
<*> <*> <*> <*> 
QSEECom_send_cmd return! 
qsc_send_cmd finish 
<*> <*> <*> 
<*> <*> <*> 
begin 
begin 
qsc_send_cmd finish 
begin 
<*> <*> <*> visible: false 
begin 
begin 
qsc_send_cmd finish 
begin 
qsc_decode end 
QSEECom_send_cmd return! 
[CheckNewVersionThread-<*>]retrieve newversioninfo.xml: 
begin 
begin 
qsc_decode end 
<*>|getTodayTotalSteps <*> 
qsc_decode end 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:waiting for useful network.......... 
send data return = <*> 
receive data len = <*> 
qsc_decode end 
begin 
receive data len = <*> 
begin 
qsc_send_cmd finish 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
updateNotificationShade 
qsc_send_cmd finish 
begin 
begin 
send data return = <*> 
begin 
qsc_decode end 
send data return = <*> 
qsc_decode end 
<*> <*> <*> 
begin 
begin 
QSEECom_send_cmd return! 
receive data len = <*> 
qsc_send_cmd finish 
qsc_send_cmd finish 
begin 
begin 
send data return = <*> 
begin 
answer call by keyCode = <*>, down = true, isSupVolumnkeyAnswerCall = false 
qsc_send_cmd finish 
receive data len = <*> 
receive data len = <*> 
begin 
qsc_send_cmd finish 
begin 
QSEECom_send_cmd return! 
receive data len = <*> 
QSEECom_send_cmd return! 
begin 
qsc_send_cmd finish 
begin 
<*>|after compensate: cache step_<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> 
qsc_decode end 
qsc_decode end 
send data return = <*> 
qsc_decode end 
QSEECom_send_cmd return! 
qsc_send_cmd finish 
send data return = <*> 
begin 
<*> <*> : <*> 
dispatch ordered broadcast [bgkeyapp] <*> <*> <*> has <*> receivers 
<*> BaseBroadcast.sendBroadcast(BaseBroadcast.java:<*>) no receiver for <*> 
queryIntentActivitiesAsUser size results:<*>, for package:com.huawei.espacev<*> 
Launcher.IconCache, cacheLocked Utilities.createIconBitmap entry.title = eSpace ComponentName:ComponentInfo{com.huawei.espacev2/com.huawei.espace.module.start.ui.StartActivity} user:UserHandle{<*>} 
<*> <*> <*> <*> <*> 
NewEspaceMessageContentObserver getNewEspaceMessageCount: <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> size is <*> 
<*> <*> <*> <*> <*> 
audio_extn_get_parameters: returns 
<*> <*> <*> <*> 
<*> stream <*>, <*> <*> <*> <*> device <*> 
<*> <*> <*> <*> 
<*> = <*> 
fpc poll irq interupt 
receive data len = <*> 
qsc_send_cmd finish 
receive data len = <*> 
<*>|compensate received 
<*>|getTodayTotalSteps <*> 
huawei_cust_set_parameters: exit with code(<*>) 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
platform_get_native_support:napb: ui Prop enabled(<*>) version(<*>) 
ACDB -> <*> 
ACDB -> <*> <*> <*> = <*> <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
<<*>-<*>-<*> <*>:<*>:<*>> [WARN] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[WARN] magic[<*> <*>]:PubEvt_Close Getting a socket[<*>] from the Socket-table Failed! 
DisplayPowerStatesetColorFadeLevel: level=<*>.0967255E-<*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
<*>|rebuild notification 
<*> <*> <*> <*> <*> 
updateTint: tint=<*> 
WindowOrientationListener disabled 
<*> <*> <*> <*> <*> is <*> 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<*>) 
stopMonitoringMotionLocked() 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
out_get_latency: Latency <*> 
t:false, fl: false, p: <*>, ce: true, we: false 
cleanUpApplicationRecord -- <*> 
<*> <*> <*> <*> <*> <*> <*> u0 euid: <*> <*> 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false 
<*>|compensate received 
<*> <*> rt=<*>/<*> <*> <*> 
TelecomServiceImpl: isInCall callState is <*>: <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> type is null or <*> <*> <*> <*> <*> <*> 
TelecomServiceImpl: isInCall callState is <*>: <*> 
TelecomServiceImpl: isInCall callState is <*>: <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
ExtraTrafficSetting:result is empty 
<*> <*> <*> <*> <*> 
<*> = true 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_OpenFile => <*> 
Apply window without WALLPAPER 
collectReceiverComponents, callerApp: ProcessRecord{506ad58 <*>:com.android.systemui/u0a33}, intent:com.android.systemui.statusbar.visible.change, receiver size:<*>, flags: <*> 
isCloneProcess = false 
getNextIndex: <*>; from <*> to <*>; size: <*> 
The tag is null error! 
set notification panel padding = <*> 
set notification panel padding = <*> 
set notification panel padding = <*> 
APS: 2DSDR: AbsListView.FlingRunnable.endFling, we will clear SDR ratio 
<*> <*> <*> <*> <*> 
bmp is null : false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
bmp is null : false 
No config file found <*> 
<*> <*> <*> <*> : <*> repeating : false interval : <*> trigger : <*>-<*>-<*> <*>:<*>:<*> isMissed : false 
pa2240-proximity calling driver <*> 
ProximitySensor, enable, <*>: mEnabled=<*> 
LightSensor, enable, <*>: flags=<*> 
<*> <*> <*> <*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
qsc_send_cmd finish 
<*> state is <*> <*> 
instantCollapse 
collectReceiverComponents, callerApp: ProcessRecord{506ad58 <*>:com.android.systemui/u0a33}, intent:com.android.systemui.statusbar.visible.change, receiver size:<*>, flags: <*> 
KGSvcCall onScreenTurnedOn. 
<*> = false, <*> = <*> 
getNextIndex: <*>; from <*> to <*>; size: <*> 
Acquiring suspend blocker "PowerManagerService.Broadcasts". 
Display ready! 
Heartbeat timer.timers{<*>} <*> <*> <*> <*> 
WindowOrientationListener enabled 
<*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
read from oem info: data_readback 
<*> <*> <*> <*> <*> device <*> <*> 
resumeSuspendedAutohide 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
Enqueueing ordered broadcast[foreground] <*> <*> <*> prev had <*> 
WatchThread{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown output: java.net.SocketException: Socket is closed 
WatchThread{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is closed 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) disconnected 
CtrlSocket Receiver,disable: false locked: <*> <*> <*> mSmartKeyguardLevel: normal_level mStartPowerSaving: <*> 
updateLightsLocked --> mBatteryLight.turnOff 
huawei_common_set_parameters: exit with code(<*>) 
<*> <*> <*> <*> 
<*> = false, <*> = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> udp detect response <*> id is [<*>],ack id is [<*>]! 
isMonitorCellId mInfos.size() = <*> 
stopScanAp mIsScaning = false 
<*> <*> <*> type = <*> 
<*> <*> will not <*> 
mSimSubId:<*> onDataActivity: direction=<*> 
CalculateTrafficMethod:getAllUidBytesInPeriod start = <*>-<*>-<*> <*>:<*>:<*> end = <*>-<*>-<*> <*>:<*>:<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
isCurrentBySim()=false 
<*> <*> <*> <*> <*> 
ITrafficInfo:ITrafficInfo create 301updateBytes = <*> 
<*> <*> <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) connected 
QSEECom_send_cmd return! 
receive data len = <*> 
qsc_decode end 
send data return = <*> 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
<*> <*> <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> 
isCardAbsent slot:<*> slotState:<*> 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
ambient lux=<*>.<*>,timeStamp =<*> 
onTouchEvent: code=<*>, action=<*>, event=MotionEvent { action=ACTION_DOWN, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>.<*>, y[<*>]=<*>.<*>, toolType[<*>]=TOOL_TYPE_FINGER, buttonState=<*>, metaState=<*>, flags=0x0, edgeFlags=0x0, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=0x1002 } 
transitionTo: mode=MODE_OPAQUE, animate=false 
obtain, mHwFlags=<*> 
<*> <*> <*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
HarassmentInterceptionDBProvider:URL= content://com.huawei.systemmanager.HarassmentInterceptionDBProvider/interception_messages 
<*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
transferRemoteInputFocus: <*> 
<*> <*> <*> <*> <*> <*> <*> 
Transact:getHwAdminCachedValue to device policy manager service. 
fingersense_touch_up() finished 
querySoundEffectsEnabled... 
Moving to PAUSED: <*> <*> <*> <*> (pause complete) 
DynamicUpdater call updateFolder 
<*>|compensate received 
<*>|getTodayTotalSteps <*> 
fingersense_touch_up() finished 
querySoundEffectsEnabled... 
Split enqueueing broadcast [callerApp]:ProcessRecord{<*> <*>:com.baidu.input_huawei/u0a74} 
at com.baidu.location.g.a.b(Unknown) 
obtain, mHwFlags=<*> 
answer call by keyCode = <*>, down = false, isSupVolumnkeyAnswerCall = false 
Transact:getHwAdminCachedValue to device policy manager service. 
<*> <*> <*> = <*> delta = <*> <*> = <*> 
cancelNotification 
send_cmd_kernel: cmd=<*> 
action:com.huawei.android.action.launcher_weather_icon_change, mPermissionType:<*> 
<*> <*> <*> <*> <*> <*> [<*>, <*>, <*>, <*>, <*>, <*>, <*>, <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
Change to single clock mode! 
dispatch ordered broadcast [bgkeyapp] <*> <*> <*> has <*> receivers 
check dependency pid: <*> is depended by pid: <*> 
<*>|onStandStepChanged <*> 
Launcher onPause() 
<*> <*> <*> <*> <*> 
adev_set_parameters: enter: <*> 
<*> <*> <*> <*> <*> <*> 
QSEECom_send_cmd return! 
<*> <*> <*> of type <*> for Event <*>, with Raise=<*> 
begin 
send data return = <*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
onScreenTurnedOff() 
out_get_latency: Latency <*> 
out_get_latency: Latency <*> 
<*> <*> rt=<*>/<*> <*> <*> 
<*> <*> = true 
mIntentReceiver-ACTION_SCREEN_OFF 
mobile iface:rmnet_data<*> 
is Beta User, userType = <*> 
TelecomServiceImpl: isInCall callState is <*>: <*> 
updateNotificationShade 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
tryUpdateKeyguardWallpaperWithMask::useMask=<*>, avgColorType=<*> 
Application requested orientation <*>, got rotation <*> which has compatible metrics 
ITrafficInfo:ITrafficInfo create 301updateBytes = <*> 
apply skiped :<*> 
updateBluetooth:::setBluetoothBatteryEnable false. 
Handle message: <*> 
Dis-Feature : <*> 
pa2240-proximity calling driver <*> 
<*> <*> V.ED..... ......ID <*>,<*>-<*>,<*> #7f1403e3 app:id/speed} 
mTiffStream skip = <*> 
Setting HAL auto-suspend mode to false 
Got set_interactive hint 
setKeyguardWallpaperAVGColor:<*> 
<*> <*> <*> <*> 
updateDisplayLocked: screenOn=true 
setBackgroundColor:new=<*>, old=<*> 
create: <*> 
process buffer and get message 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*> <*> <*> <*> <*> <*> <*> 
Wait finish 
Ignore update <*> <*> false 
pa2240-proximity calling driver setDelay <*> ms 
updateNotificationShade 
removeNotificationChildren 
removeSensor,mHandles:{} 
showNotificationAll 
FpPerformance FpUtils.fingerTurnOnScreen():true 
Launcher onStart() 
AppAutoStartupPolicy:prevent start receiver of package com.ss.android.article.news for action <*> 
<*> <*> <*> <*> <*> device <*> <*> 
0x55, 0x0, 0x0, 0x<*> 
<*> <*> <*> <*> <*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> <*> type = <*> 
ACDB -> <*> <*> 
ambient lux=<*>.<*>,timeStamp =<*> 
Split enqueueing broadcast <*> <*> 
NormalTrafficAnalysis:alert byte = <*> last alert byte = <*> 
WeatherDynamicUpdater update before : mDrawingData[<*>] = <*> <*>, <*> 
WatchThread{<*>} TcpSocket.close(TcpSocket.java:<*>) shutdown input: java.net.SocketException: Socket is closed 
loadMagazine 
AwareMem_DMEServer: start 
HDebug print the key screen_state 
<*>| ## MSG_DEAL_SYSTEM_EVENT <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
<*> <*> <*> <*> 
begin 
release:lock=<*>, flg=0x0, <*> <*> ws=null, uid=<*>, pid=<*> 
Access denied finding property "persist.sys.smart_power" 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*>]:FSM_Tool_LibcAccess ==> call <*> <*> <*> <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> 
Invalid profile no. <*>, total profiles <*> only 
updateRotationUnchecked(alwaysSendConfiguration=false) 
<*>|compensate received 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|getTodayTotalSteps <*> 
<*>|before compensate: cache step_<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
updateNotificationShade 
answer call by keyCode = <*>, down = true, isSupVolumnkeyAnswerCall = false 
notifyStartedGoingToSleep 
selectOutput() commonFlags for output <*>, <*> 
audio_extn_fbsp_get_parameters: Speaker protection disabled 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> 
<*> <*> <*> <*> <*> <*> 
<*> <*> <*> type <*> <*> <*> <*> <*> 
The tag is null error! 
<*> <*> <*> <*> 
QSEECom_send_cmd return! 
send data return = <*> 
begin 
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<*>) 
at com.huawei.keyguard.support.magazine.MagazineWallpaper$<*>.onMagazinePicLoaded(MagazineWallpaper.java:<*>) 
<*> <*> <*> 
DisplayPowerStatesetColorFadeLevel: level=<*>.<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=OFF, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
scheduleLightAlarmLocked(<*>) 
hw_set_colortemperature: end-- 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
begin 
receive data len = <*> 
notifyScreenOn 
<*> <*> <*> 
<*> <*> is not <*> 
Got set_interactive hint 
Broadcasting intent ACTION_RAC_CHANGED 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
QSEECom_send_cmd return! 
qsc_send_cmd finish 
receive data len = <*> 
Caller checkPermission fail 
Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f <*>:system/<*>} 
SleepPolicy:<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*> <*> <*> took <*> ms 
<*> <*> <*> <*> <*> 
huawei_audio huawei_choose_Handset_device_incall_forHWtest: test Type =<*> 
workerFunction STATE_WAIT_FINGER_UP 
PFW.HwPFWAppRestartPolicy:receive action = android.intent.action.SCREEN_OFF 
DefaultState what=<*> 
disableGps:false isEnabled()=true 
TelecomServiceImpl: isInCall callState is <*>: <*> 
ExtraTrafficSetting:result is empty 
QSEECom_send_cmd return! 
<*> <*> <*> 
sendImmediateMessage <*> 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
bindServiceLocked, r: <*> u0 euid: <*> <*> euid: <*> 
begin 
receive data len = <*> 
Provider.call: getPrefString 
VolumeDialogController.Callbacks onScreenOff 
setIsExpanded: false 
<*> <*> <*> 
refreshState=data, BooleanState[,icon=ResourceIcon[resId=0x7f0201f6],label=移动数据,labelTint=<*>,textChangedDelay=<*>,contentDescription=移动数据,dualLabelContentDescription=null,minimalContentDescription=null,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=true] 
Apply window Height MATCH_PARENT 
send: <*> 
Animating brightness: target=<*>, rate=<*> 
AutoStartupDataMgr:isUnderControll third party not in whitelist: cn.wps.moffice_eng 
Split enqueueing broadcast [callerApp]:ProcessRecord{506ad58 <*>:com.android.systemui/u0a33} 
SND -> {<*> bandwidth gettetherstats} 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> = <*> device <*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> 
instantCollapse 
ACDB -> <*> 
ACDB -> <*> <*> <*> = <*> <*> = <*> 
Launcher onResume() 
<*> <*> <*> = false 
<*> <*> <*> <*> = false 
[SdcardManager.isMounted]Mounted:/storage/emulated/<*>:true 
GetAddrInfoHandler addr: uc.huawei.com {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
updateNotificationShade 
<*> <*> <*> 
receive data len = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
begin 
qsc_decode end 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) disconnected 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Switch tunnel mode to [<*>]! 
release:lock=<*>, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=<*>, pid=<*> 
TafficState:default sub id = 0slotIndex = <*> subscriptionId = <*> 
send data return = <*> 
<*>| ## MSG_DEAL_SYSTEM_EVENT <*> 
<*> <*> <*> = <*> <*> = <*> <*> = <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
<*>|after compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
[ACC]processReportInd: X: <*>.<*> Y: <*>.<*> Z: <*>.<*> x_offset:<*>.<*> y_offset:<*>.<*> z_offset:<*>.<*> 
receive data len = <*> 
begin 
QSEECom_send_cmd return! 
send data return = <*> 
<*> <*> <*> 
platform_can_split_snd_device: snd_device(<*>) num devices(<*>) new_snd_devices(<*>) 
receive data len = <*> 
begin 
send data return = <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> do not need to <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
ambient lux=<*>.<*>,timeStamp =<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateTint: tint=<*> 
<*> <*> <*> / 301ms, <*>.<*> / 301ms, <*>.<*> / <*> <*>.<*> / 301ms, <*>.<*> / 301ms, <*>.<*> / 301ms, <*>.<*> / 301ms, <*>.<*> / 301ms, <*>.<*> / 301ms, <*>.<*> / <*> <*>.<*> / 301ms, <*>.<*> / <*> <*>.<*> / 301ms, <*>.<*> / <*> <*>.<*> / 301ms, <*>.<*> / <*> <*> 
AutoMode=true,Target=<*>,Current=<*>,amount=<*>.<*>,duration=<*>.<*> 
proxyBroadcast:[com.android.browser] proxy:true 
<*> <*> <*> samplingRate <*>, format <*>, channelMask <*>, flags <*> 
selectOutput() commonFlags for output <*>, <*> 
<*> <*> <*> <*> 
platform_get_native_support:napb: ui Prop enabled(<*>) version(<*>) 
<*> <*> <*> <*> <*> <*> <*> 
select_devices: done 
receive data len = <*> 
at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<*>) 
mSeekListener onProgressChanged progress:<*> fromUser:false 
LightSensor, enable, <*>: en=<*> 
DisplayBase::SetDisplayState: Set state = <*>, display <*> 
Caller checkPermission fail 
batch called handle:<*> sample_ns:<*> latency_ns:<*> 
<*> <*> <*> : <*> 
hideScrim() 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
onAcquired <*> 
Invalid profile no. <*>, total profiles <*> only 
<*> <*> <*> <*> <*> 
Reading a NULL string not supported here. 
ready=false,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=true,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
WindowOrientationListener disabled 
AwareMem_DMEServer: stop 
The tag is null error! 
Apply window without WALLPAPER 
get_spk_pa_type: pa is max<*> 
huawei_common_set_parameters: exit with code(<*>) 
<*> <*> <*> <*> <*> <*> <*> <*> <*> screen off 
<*> <*> id = <*> <*> <*> <*> <*> 
transitionTo: mode=MODE_TRANSLUCENT, animate=false 
<*> <*> <*> <*> <*> 
send data return = <*> 
send data return = <*> 
receive data len = <*> 
resetCommute 
send data return = <*> 
getRemainingChance <*> 
Ignore update <*> <*> <*> 
notifyUiVisibilityChanged:vis=0x8608, SystemUiVisibility=0x<*> 
<*> <*> <*> <*> <*> 
BlurBitmap draw super <*>.<*> 
ash->screen off 
pa2240-proximity calling driver setDelay <*> ms 
Split enqueueing broadcast [callerApp]:ProcessRecord{506ad58 <*>:com.android.systemui/u0a33} 
refreshState=bt, BooleanState[,icon=ResourceIcon[resId=0x7f0201b7],label=蓝牙,labelTint=<*>,textChangedDelay=<*>,contentDescription=蓝牙关闭。,打开蓝牙设置。,dualLabelContentDescription=蓝牙,minimalContentDescription=蓝牙：%s。,minimalAccessibilityClassName=android.widget.Switch,expandedAccessibilityClassName=android.widget.Switch,autoMirrorDrawable=false,disabledByPolicy=false,enforcedAdmin=null,value=false] 
Apply window Height MATCH_PARENT 
resetPagerState 
Client requesting input be hidden, pid=<*> 
DisplayPowerController updatePowerState mPendingRequestLocked=policy=BRIGHT, useProximitySensor=false, useProximitySensorbyPhone=true, screenBrightness=<*>, screenAutoBrightnessAdjustment=<*>.<*>, brightnessSetByUser=true, useAutoBrightness=true, blockScreenOn=false, lowPowerMode=false, boostScreenBrightness=false, dozeScreenBrightness=<*>, dozeScreenState=UNKNOWN, useTwilight=false, useSmartBacklight=true, brightnessWaitMode=false, brightnessWaitRet=true, screenAutoBrightness=<*>, userId=<*> 
<*> <*> <*> 
AppAutoStartupPolicy:prevent start receiver of package cn.wps.moffice_eng for action android.intent.action.USER_PRESENT 
dispatch ordered broadcast [background] <*> <*> <*> has <*> receivers 
<*> <*> <*> <*> <*> 
<*> <*> to device <*> <*> <*> <*> 
report state:<*> event type:<*> pid:<*> uid:<*> pkg:null to pid: <*> 
apply skiped :<*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
platform_get_native_support:napb: ui Prop enabled(<*>) version(<*>) 
KGSvcCall onStartedWakingUp. 
[ReceiverUtils.reportVersionInfo] 
<*> <*> <*> 
ACDB -> <*> 
ACDB -> <*> 
<*> <*> <*> <*> <*> <*> <*> 
begin 
Ignore update <*> <*> false 
GetAddrInfoHandler addr: uc.huawei.com {<*>, <*>, <*>} <*>.<*>.<*>.<*> 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send udp detect packet ok when login,id:[<*>];count:[<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send udp detect packet ok when login,id:[<*>];count:[<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:Send udp detect packet ok when login,id:[<*>];count:[<*>]! 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*> <*> <*> <*> <*> 
<*> PendingIntentRecord{7f86237 com.huawei.espacev2 broadcastIntent}}) : type=<*> triggerAtTime=<*> win=<*> tElapsed=<*> maxElapsed=<*> interval=<*> flags=0x<*> 
<*> <*> alarm OK ! 
receive data len = <*> 
PFW.HwPFWService:mBroadcastReceiver action = android.intent.action.SCREEN_ON 
handledataswitchchanged 
process buffer and get message 
ExtraTrafficSetting:result is empty 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
<*> output <*>, stream <*>, <*> <*> 
<*> <*> <*> <*> <*> <*> <*> <*> 
NotificationUtil:Month Warning Notification not create 
send data return = <*> 
<*> <*> <*> 
qsc_decode end 
receive data len = <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<<*>-<*>-<*> <*>:<*>:<*>> [NOTICE] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[NOTICE] magic[<*> <*>]:FSM_Tool_TreatFolderEncEx => [START]: pcFileName <*> 
<<*>-<*>-<*> <*>:<*>:<*>> [ERR] SDK: UE-SeC <*>-<*>-<*> <*>:<*>:<*>:<*> Level[ERR] magic[<*> <*> <*> <*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
transferRemoteInputFocus: <*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
<*> <*> = <*>.<*> 
earliestValidTime + POWER_ON_BRIGHTENING_LIGHT_DEBOUNCE 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
updateRotationUnchecked(alwaysSendConfiguration=false) 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
rotationForOrientationLw(orient=<*>, last=<*>); user=<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
<*>|getTodayTotalSteps <*> 
MyOrientationListener: updateRotation. 
<*>|compensate received 
<*>|before compensate: cache step_<*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
<*> <*> = <*>.<*> 
check perfhub service fail! 
<*> <*> <*> <*> currentFocusWindow: null, currentFocusApp: <*> <*> <*> <*> <*> <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|getTodayTotalSteps <*> 
transitionTo: mode=MODE_OPAQUE, animate=false 
[HME_JPEG_DEC_Delete](<*>): HME_JPEG_DEC_Delete: decoder_ctx=null 
[LoginActivity.getIntentData]action：android.intent.action.MAIN 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
<*> <*> <*> <*> <*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> is null or <*> <*> <*> <*> <*> <*> <*> is null or <*> <*> <*> <*> <*> <*> <*> 
BoostFramework() : mPerf = <*> 
Skipping, home stack task: TaskRecord{37babfb #<*> A=com.huawei.android.launcher U=<*> StackId=<*> sz=<*>} 
Returning system default Launcher 
Create obj success use class android.app.HwCustNotificationImpl 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
mThermalService is NULL! 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
showNotificationAll 
isCurrentBySim()=false 
isCurrentBySim()=false 
isCurrentBySim()=false 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
<*>|before compensate: cache step_<*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
current cell id is not monitor ..... cellid = <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
<*>|rebuild notification 
<*> <*> <*> <*> 
retrieveServiceLocked, callerApp: <*> <*> flags: <*> 
<*> <*> <*> <*> <*> <*> 
search 
<*> <*> <*> size is <*> 
cancelAutohide 
<*> <*> <*> <*> <*> <*> <*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
notifyUiVisibilityChanged:vis=0x40000000, SystemUiVisibility=0x<*> 
<*>|REPORT : <*> <*> <*> <*> 
<*>|rebuild notification 
disableEffects=null canInterrupt=false once update: false 
updateDimmedActivatedHideSensitive overlap:false 
updateDimmedActivatedHideSensitive overlap:false 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
<*>|before compensate: cache step_<*> 
<*>|compensate <*> <*> 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
disableEffects=null canInterrupt=false once update: false 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
<*>|getTodayTotalSteps <*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
Calling fingersense_classify_touch() 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
disableEffects=null canInterrupt=false once update: false 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
onProposedRotationChanged, rotation=<*> 
c: true, w: false, t: false, l: false 
transferRemoteInputFocus: <*> 
notifyListenerHuawei::origin typeIcon:<*> icons.mName:4G isSuspend:false, showDataIcon=true, dataConnected=true, isRoaming=false 
release:lock=<*>, flg=0x0, tag="RILJ_ACK_WL", name=com.android.phone", ws=null, uid=<*>, pid=<*> 
Destroying surface <*> called by com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> <*> <*> <*> <*> <*> <*> 
[Thermal_Hw] temperature_valid, battery : temperature is invalid, invalid temperatrue is <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
isCurrentBySim()=false 
<*>|onStandStepChanged <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
applyInPlace=true shouldPeek=false alertAgain=true 
isCurrentBySim()=false 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
CubicBezierInterpolator mControlPoint1x = <*>.<*>, mControlPoint1y = <*>.<*>, mControlPoint2x = <*>.<*>, mControlPoint2y = <*>.<*> 
updateTint: tint=<*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
updateClipping isOverlap:false 
onDataActivity: direction=<*> 
<*>|getTodayTotalSteps <*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
Calling fingersense_classify_touch() 
<*>|compensate received 
showNotificationAll 
<*>|getTodayTotalSteps <*> 
<*>|compensate received 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
<*>|after compensate: cache step_<*> 
<*>|rebuild notification 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
<*> <*> <*> 
at android.os.Handler.dispatchMessage(Handler.java:<*>) 
onStepCounterChange stepsNum:<*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
Calling fingersense_touch_up() 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
updateNotificationShade 
updateClipping isOverlap:false 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
removeNotificationChildren 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
<*>|getTodayTotalSteps <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
chinaDateTime:晚上<*>:<*> 
proxy app:com.huawei.camera,uid:<*>,result:true 
<*>|onStandStepChanged <*> 
<*>|getTodayTotalSteps <*> 
<*>|after compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateTint: tint=<*> 
fingersense_classify_touch() finished 
<*>|getTodayTotalSteps <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
<*>|compensate <*> <*> 
<*>|before compensate: cache step_<*> 
showNotificationAll 
<*>|getTodayTotalSteps <*> 
<*>|getTodayTotalSteps <*> 
removeNotificationChildren 
updateClipping isOverlap:false 
fingersense_touch_up() finished 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
onStepCounterChange stepsNum:<*> 
disableEffects=null canInterrupt=false once update: false 
onProcessDied pid = <*>, uid = <*> 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
<*>|REPORT : <*> <*> <*> <*> 
showNotificationAll 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
ImsServiceSub : handleSsac voice = <*> 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
setMobileDataIndicatorsHuawei subId:<*> visible:true strengthIcon:<*> typeIcon:<*> contentDescription:手机信号满格。 typeContentDescription:4G isTypeIconWide:true showActivity:true activityIn:false activityOut:false isRoaming:false 
Calling fingersense_touch_up() 
isCurrentBySim()=false 
is3GCalling is false,mCdmaSlot is -<*> 
<*> <*> <*> <*> <*> <*> <*> <*> <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
disableEffects=null canInterrupt=false once update: false 
updateNotification(StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE))) 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
isCardAbsent slot:<*> slotState:<*> 
onStepCounterChange stepsNum:<*> 
disableEffects=null canInterrupt=false once update: false 
<*>|rebuild notification 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
removeNotificationChildren 
<*>|REPORT : <*> <*> <*> <*> 
Create obj success use class android.app.HwCustNotificationImpl 
removeNotificationChildren 
acquire lock=<*>, flags=0x1, tag="RILJ_ACK_WL", name=com.android.phone, ws=null, uid=<*>, pid=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
getOrInflateState subId:<*> 
mVSimCurCardType is -<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
MyOrientationListener: updateRotation. 
ContentChange for slot: <*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
updateSlider1 seekBarProgress:<*> 
mSeekListener onProgressChanged progress:<*> fromUser:false 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
mSeekListener onProgressChanged progress:<*> fromUser:false 
updateSlider1 seekBarProgress:<*> 
updateSlider1 seekBarProgress:<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
<*>|onStandStepChanged <*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
updateTint: tint=<*> 
updateNotificationShade 
<*>|onStandStepChanged <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
notifyInterfaceClassActivity: client is com.android.server.ConnectivityService$<*>@e0f099c 
<*>|onStandStepChanged <*> 
<*>|compensate <*> <*> 
<*>|getTodayTotalSteps <*> 
<*>|before compensate: cache step_<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
Create obj success use class android.app.HwCustNotificationImpl 
fingersense_classify_touch() finished 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
onSignalStrengthsChanged signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte level=<*> isSuspend=false levelOld=<*>,mSignalStrength level=<*> 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*>|REPORT : <*> <*> <*> <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
interpolate:mPosBrightness=<*>.0lux=<*>.<*>,mIsReboot=true,mIsUserChange=false,mDelta=<*>.<*> 
<*>|before compensate: cache step_<*> 
<*>|REPORT : <*> <*> <*> <*> 
<*>|upDateHealthNotification()|<*>|<*>.<*>|<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
showNotificationAll 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
onChange selfChange:false uri.toString():content://settings/system/screen_auto_brightness mIsObserveAutoBrightnessChange:true 
mSeekListener onProgressChanged progress:<*> fromUser:false 
fingersense_touch_up() finished 
ContentChange for slot: <*> 
ContentChange for slot: <*> 
back light level before map = <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
APS brightness=<*>.<*>,ConvertToPercentage=<*>.<*> 
back light level before map = <*> 
updateSignalStrength: signalStrength=SignalStrength: <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> false gw|lte 
<*>|standStepCounter report <*> steps,write fe 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
Create obj success use class android.app.HwCustNotificationImpl 
<*>|getTodayTotalSteps <*> 
MSG_QUERY_TCP_INFO called,count:<*> 
<*>|getTodayTotalSteps <*> 
[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>] 
<*>|getTodayTotalSteps <*> 
<*>|compensate <*> <*> 
<*>|rebuild notification 
<*>|after compensate: cache step_<*> 
<*>|MSG_RECORD_DATA_TO_FILE datas.size()=<*> 
<*>|getTodayTotalSteps <*> 
enqueueNotificationInternal: n.getKey = <*>|com.huawei.health|<*>|null|<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
<*>|after compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
updateTint: tint=<*> 
No peeking: unimportant notification: <*>|com.huawei.health|<*>|null|<*> 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
<*>|rebuild notification 
Calling fingersense_touch_up() 
[FaultTreeWidgets.setOptionCheckedListener]end... 
[FaultTreeWidgets.setOptionCheckedListener]end... 
transferRemoteInputFocus: <*> 
<*>|getTodayTotalSteps <*> 
applyInPlace=true shouldPeek=false alertAgain=true 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
t=<*>,BT=<*>,DT=<*>,BT1=<*>,DT1=<*>,Bn=false,Dn=false,lx=[<*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>, <*>.<*>/<*>],mLx=<*>.<*>,s=<*>.<*>,ss=<*>.<*>,AuIntervened=false,mProximityState=false,bLux=<*>.<*>,dLux=<*>.<*>,bLux1=<*>.<*>,dLux1=<*>.<*> 
onSignal: mSubId=<*>,currDataSubID=<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
onNotificationPosted: StatusBarNotification(pkg=com.huawei.health user=UserHandle{<*>} id=<*> tag=null key=<*>|com.huawei.health|<*>|null|<*>: Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x62 color=0x00000000 vis=PRIVATE)) important=<*>, post=<*>, when=<*>, vis=<*>, userid=<*> 
new ScenarioAction sPoolSize: <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*>|getTodayTotalSteps <*> 
reusing notification for key: <*>|com.huawei.health|<*>|null|<*> 
<*>|onStandStepChanged <*> 
transferRemoteInputFocus: <*> 
transferRemoteInputFocus: <*> 
[Thermal_Hw] temperature_filter: get invalid temperature, use old temp 
Calling fingersense_touch_up() 
<*>|rebuild notification 
action:android.net.conn.DATA_ACTIVITY_CHANGE, mPermissionType:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
at java.io.FileInputStream.<init>(FileInputStream.java:<*>) 
getTempInfo error: null, <*> 
isCurrentBySim()=false 
userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x0, uid=<*> 
t:false, fl: false, p: <*>, ce: true, we: false 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_mcc_mnc 
sub =<*>,strMccMnc =null,hashMccMnc =[],strPlmn =hw_hspap_show_4g 
apply hwPhoneState.mSubId:<*> anyMobileVisible:false mIsAirplaneMode:false, mobileGroupVisible=true 
onEntryAdded:<*>|com.huawei.health|<*>|null|<*>, group=<*>|com.huawei.health|<*>|null|<*> 
onStepCounterChange stepsNum:<*> 
Create obj success use class android.app.HwCustNotificationImpl 
updateTint: tint=<*> 
received cell-signal:<*> 
<*>|after compensate: cache step_<*> 
fingersense_touch_up() finished 
<*>|REPORT : <*> <*> <*> <*> 
transferRemoteInputFocus: <*> 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
<*>|getTodayTotalSteps <*> 
action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:<*> 
fingersense_classify_touch() finished 
<*>|compensate received 
applyInPlace=true shouldPeek=false alertAgain=true 
showNotificationAll 
Calling fingersense_classify_touch() 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
fingersense_touch_up() finished 
updateTint: tint=<*> 
Split enqueueing broadcast [callerApp]:ProcessRecord{580cfb2 <*>:com.huawei.health:DaemonService/u0a99} 
Multiple rapid taps detecting, aborting Knuckle Gestures. 
EventCenter Get :android.com.huawei.bone.NOTIFY_SPORT_DATA 
Create obj success use class android.app.HwCustNotificationImpl 
PowerManagerNotifier onUserActivity: event=<*>, uid=<*> 
fingersense_touch_up() finished 
InputDispatcher::monitor frozen check! 
frozenCheckLocked mDispatchFrozen=<*> mNextUnblockedEvent=<*> 
ready=true,policy=<*>,wakefulness=<*>,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=<*>,auto=<*>,adj=<*>.0userId=<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
updateDimmedActivatedHideSensitive overlap:false 
onDataActivity: direction=<*> 
to: connected=true,enabled=true,level=<*>,inetCondition=<*>,iconGroup=IconGroup(4G),activityIn=false,activityOut=false,rssi=<*>,lastModified=<*>-<*> <*>:<*>:<*>,isRoaming=false,dataSim=true,networkName=中国移动,networkNameData=中国移动,dataConnected=true,isDefault=true,isEmergency=false,airplaneMode=false,carrierNetworkChangeMode=false,userSetup=true 
interpolate:mPosBrightness=<*>.0lux=<*>.<*>,mIsReboot=true,mIsUserChange=false,mDelta=<*>.<*> 
updateSlider2 seekBarProgress:<*> 
<*>|getTodayTotalSteps <*> 
transferRemoteInputFocus: <*> 
presently, hw_update_color_temp_for_rg_led interface not achieved. 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
updateSlider1 seekBarProgress:<*> 
Watch Thread{<*>} WatchThread.onLoop(WatchThread.java:<*>) watch thread onLoop...--》 iWatched.doWatch() 
getSeekBarProgress isAutoMode:true current brightness:<*> percentage:<*>.<*> 
enqueueNotificationInternal: pkg=com.huawei.health id=<*> notification=Notification(pri=<*> contentView=null vibrate=null sound=null defaults=0x0 flags=0x2 color=0x00000000 vis=PRIVATE) 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
<*>|before compensate: cache step_<*> 
disableEffects=null canInterrupt=false once update: false 
onEntryUpdated:<*>|com.huawei.health|<*>|null|<*> 
transferRemoteInputFocus: <*> 
<*>|before compensate: cache step_<*> 
<*>|getTodayTotalSteps <*> 
Create obj success use class android.app.HwCustNotificationImpl 
mExtDataOld:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] mExtData:ExtData [mMasterNetWorkType=<*>, mSlaveNetWorkType=<*>, mMasterNetWorkLevel=<*>, mSlaveNetWorkLevel=<*>, mDataState=<*>, mDataActivity=<*>, mDataNetType=<*>] 
connect :true 
WatchThread{<*>} TcpClient.clearAll(TcpClient.java:<*>) ==================== TCP CLIENT CLEAR ALL ==================== 
tcp.conn{<*>} TcpSocket.connect_i(TcpSocket.java:<*>) connecting to ip address uc.huawei.com/<*>.<*>.<*>.<*> 
tcp.conn{<*>} XmlMsg.encodeBuf(XmlMsg.java:<*>) SEND <*> bytes <*> <*> 
tcp.recv{<*>} TcpClientThread.onReceiverWork(TcpClientThread.java:<*>) get tcp message <*> 
